// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_REG_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_REG_INIT
`ifdef RANDOMIZE_MEM_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_MEM_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

// VCS coverage exclude_file
module regs_combMem(	// Regfile.scala:32:19
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [4:0]  R2_addr,
  input         R2_en,
                R2_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [63:0] W0_data,
  input  [4:0]  W1_addr,
  input         W1_en,
                W1_clk,
  input  [63:0] W1_data,
  output [63:0] R0_data,
                R1_data,
                R2_data);

  reg [63:0] Memory[0:31];	// Regfile.scala:32:19
  always @(posedge W0_clk) begin	// Regfile.scala:32:19
    if (W0_en)	// Regfile.scala:32:19
      Memory[W0_addr] <= W0_data;	// Regfile.scala:32:19
    if (W1_en)	// Regfile.scala:32:19
      Memory[W1_addr] <= W1_data;	// Regfile.scala:32:19
  end // always @(posedge)
  `ifndef SYNTHESIS	// Regfile.scala:32:19
    `ifdef RANDOMIZE_MEM_INIT	// Regfile.scala:32:19
      integer initvar;	// Regfile.scala:32:19
      reg [63:0] _RANDOM_MEM;	// Regfile.scala:32:19
    `endif // RANDOMIZE_MEM_INIT
    initial begin	// Regfile.scala:32:19
      `INIT_RANDOM_PROLOG_	// Regfile.scala:32:19
      `ifdef RANDOMIZE_MEM_INIT	// Regfile.scala:32:19
        for (initvar = 0; initvar < 32; initvar = initvar + 1) begin
          _RANDOM_MEM = {{`RANDOM}, {`RANDOM}};
          Memory[initvar] = _RANDOM_MEM[63:0];
        end	// Regfile.scala:32:19
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign R0_data = R0_en ? Memory[R0_addr] : 64'bx;	// Regfile.scala:32:19
  assign R1_data = R1_en ? Memory[R1_addr] : 64'bx;	// Regfile.scala:32:19
  assign R2_data = R2_en ? Memory[R2_addr] : 64'bx;	// Regfile.scala:32:19
endmodule

// external module Interact

module Fetch(	// <stdin>:8:10
  input         clock,
                reset,
                io_fcfe_jump_flag,
  input  [63:0] io_fcfe_jump_pc,
  input         io_fcfe_flush,
                io_fcfe_stall,
  output [63:0] io_fdio_pc,
  output        io_pc_valid,
  output [63:0] io_pc_bits,
                io_next_pc);

  reg         started;	// Fetch.scala:25:26
  reg  [63:0] pc;	// Fetch.scala:28:21
  reg  [63:0] old_pc;	// Fetch.scala:29:25
  wire        _next_pc_T_2 = io_fcfe_flush & io_fcfe_jump_flag;	// Fetch.scala:36:36
  wire [63:0] _next_pc_T_4 = io_fcfe_jump_pc + 64'h4;	// Fetch.scala:36:85
  wire [63:0] _next_pc_T_7 = pc + 64'h4;	// Fetch.scala:28:21, :36:85, :37:37
  wire        _io_fdio_pc_T_2 = io_fcfe_flush & io_fcfe_jump_flag;	// Fetch.scala:51:36
  always @(posedge clock) begin
    if (reset) begin
      started <= 1'h0;	// Fetch.scala:25:26
      pc <= 64'h80000000;	// Fetch.scala:28:21
      old_pc <= 64'h0;	// Fetch.scala:29:25
    end
    else begin
      started <= 1'h1;	// Fetch.scala:25:26, :26:13
      if (io_fcfe_stall) begin
      end
      else begin
        if (_next_pc_T_2)	// Fetch.scala:36:36
          pc <= _next_pc_T_4;	// Fetch.scala:28:21, :36:85
        else if (started)	// Fetch.scala:25:26, :36:36
          pc <= _next_pc_T_7;	// Fetch.scala:28:21, :37:37
        if (_io_fdio_pc_T_2)	// Fetch.scala:51:36
          old_pc <= io_fcfe_jump_pc;	// Fetch.scala:29:25
        else	// Fetch.scala:51:36
          old_pc <= pc;	// Fetch.scala:28:21, :29:25
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:8:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:8:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:8:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:8:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:8:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:8:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:8:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:8:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:8:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:8:10
        `INIT_RANDOM_PROLOG_	// <stdin>:8:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:8:10
        _RANDOM_0 = `RANDOM;	// <stdin>:8:10
        _RANDOM_1 = `RANDOM;	// <stdin>:8:10
        _RANDOM_2 = `RANDOM;	// <stdin>:8:10
        _RANDOM_3 = `RANDOM;	// <stdin>:8:10
        _RANDOM_4 = `RANDOM;	// <stdin>:8:10
        started = _RANDOM_0[0];	// Fetch.scala:25:26
        pc = {_RANDOM_0[31:1], _RANDOM_1, _RANDOM_2[0]};	// Fetch.scala:25:26, :28:21
        old_pc = {_RANDOM_2[31:1], _RANDOM_3, _RANDOM_4[0]};	// Fetch.scala:28:21, :29:25
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:8:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:8:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_fdio_pc = io_fcfe_stall ? old_pc : _io_fdio_pc_T_2 ? io_fcfe_jump_pc : pc;	// <stdin>:8:10, Fetch.scala:28:21, :29:25, :51:36, Mux.scala:101:16
  assign io_pc_valid = ~io_fcfe_stall & started;	// <stdin>:8:10, Fetch.scala:25:26, :65:23
  assign io_pc_bits = io_fcfe_stall ? old_pc : io_fcfe_flush & io_fcfe_jump_flag ? io_fcfe_jump_pc : pc;	// <stdin>:8:10, Fetch.scala:28:21, :29:25, :61:36, Mux.scala:101:16
  assign io_next_pc = _next_pc_T_2 ? _next_pc_T_4 : started ? _next_pc_T_7 : pc;	// <stdin>:8:10, Fetch.scala:25:26, :28:21, :36:{36,85}, :37:37, Mux.scala:101:16
endmodule

module ControlUnit(	// <stdin>:49:10
  input  [31:0] io_inst,
  output [1:0]  io_jump_type,
  output        io_branch_type,
  output [1:0]  io_opa_type,
                io_opb_type,
  output [2:0]  io_imm_type,
  output [5:0]  io_alu_op,
  output [1:0]  io_wb_type,
  output [2:0]  io_sd_type,
                io_ld_type);

  wire        _controlsig_T_1 = io_inst == 32'h13;	// Lookup.scala:31:38
  wire        _controlsig_T_3 = io_inst[6:0] == 7'h17;	// Lookup.scala:31:38
  wire        _controlsig_T_5 = io_inst[6:0] == 7'h37;	// Lookup.scala:31:38
  wire        _controlsig_T_7 = io_inst[6:0] == 7'h6F;	// Lookup.scala:31:38
  wire [9:0]  _GEN = {io_inst[14:12], io_inst[6:0]};	// Lookup.scala:31:38
  wire        _controlsig_T_9 = _GEN == 10'h67;	// Lookup.scala:31:38
  wire        _controlsig_T_11 = _GEN == 10'h63;	// Lookup.scala:31:38
  wire        _controlsig_T_13 = _GEN == 10'hE3;	// Lookup.scala:31:38
  wire        _controlsig_T_15 = _GEN == 10'h263;	// Lookup.scala:31:38
  wire        _controlsig_T_17 = _GEN == 10'h2E3;	// Lookup.scala:31:38
  wire        _controlsig_T_19 = _GEN == 10'h363;	// Lookup.scala:31:38
  wire        _controlsig_T_240 = _GEN == 10'h3E3;	// Lookup.scala:31:38
  wire        _controlsig_T_23 = _GEN == 10'h3;	// Lookup.scala:31:38
  wire        _controlsig_T_25 = _GEN == 10'h83;	// Lookup.scala:31:38
  wire        _controlsig_T_27 = _GEN == 10'h103;	// Lookup.scala:31:38
  wire        _controlsig_T_29 = _GEN == 10'h203;	// Lookup.scala:31:38
  wire        _controlsig_T_31 = _GEN == 10'h283;	// Lookup.scala:31:38
  wire        _controlsig_T_33 = _GEN == 10'h303;	// Lookup.scala:31:38
  wire        _controlsig_T_35 = _GEN == 10'h183;	// Lookup.scala:31:38
  wire        _controlsig_T_37 = _GEN == 10'h23;	// Lookup.scala:31:38
  wire        _controlsig_T_39 = _GEN == 10'hA3;	// Lookup.scala:31:38
  wire        _controlsig_T_41 = _GEN == 10'h123;	// Lookup.scala:31:38
  wire        _controlsig_T_43 = _GEN == 10'h1A3;	// Lookup.scala:31:38
  wire        _controlsig_T_45 = _GEN == 10'h13;	// Lookup.scala:31:38
  wire        _controlsig_T_47 = _GEN == 10'h113;	// Lookup.scala:31:38
  wire        _controlsig_T_49 = _GEN == 10'h193;	// Lookup.scala:31:38
  wire        _controlsig_T_51 = _GEN == 10'h213;	// Lookup.scala:31:38
  wire        _controlsig_T_53 = _GEN == 10'h313;	// Lookup.scala:31:38
  wire        _controlsig_T_55 = _GEN == 10'h393;	// Lookup.scala:31:38
  wire [16:0] _GEN_0 = {io_inst[31:25], io_inst[14:12], io_inst[6:0]};	// Lookup.scala:31:38
  wire        _controlsig_T_57 = _GEN_0 == 17'h93;	// Lookup.scala:31:38
  wire        _controlsig_T_59 = _GEN_0 == 17'h293;	// Lookup.scala:31:38
  wire        _controlsig_T_61 = _GEN_0 == 17'h8293;	// Lookup.scala:31:38
  wire        _controlsig_T_63 = _GEN_0 == 17'h33;	// Lookup.scala:31:38
  wire        _controlsig_T_65 = _GEN_0 == 17'h8033;	// Lookup.scala:31:38
  wire        _controlsig_T_67 = _GEN_0 == 17'hB3;	// Lookup.scala:31:38
  wire        _controlsig_T_69 = _GEN_0 == 17'h133;	// Lookup.scala:31:38
  wire        _controlsig_T_71 = _GEN_0 == 17'h1B3;	// Lookup.scala:31:38
  wire        _controlsig_T_73 = _GEN_0 == 17'h233;	// Lookup.scala:31:38
  wire        _controlsig_T_75 = _GEN_0 == 17'h2B3;	// Lookup.scala:31:38
  wire        _controlsig_T_77 = _GEN_0 == 17'h82B3;	// Lookup.scala:31:38
  wire        _controlsig_T_79 = _GEN_0 == 17'h333;	// Lookup.scala:31:38
  wire        _controlsig_T_81 = _GEN_0 == 17'h3B3;	// Lookup.scala:31:38
  wire        _controlsig_T_83 = _GEN_0 == 17'h433;	// Lookup.scala:31:38
  wire        _controlsig_T_85 = _GEN_0 == 17'h4B3;	// Lookup.scala:31:38
  wire        _controlsig_T_87 = _GEN_0 == 17'h533;	// Lookup.scala:31:38
  wire        _controlsig_T_89 = _GEN_0 == 17'h5B3;	// Lookup.scala:31:38
  wire        _controlsig_T_91 = _GEN_0 == 17'h633;	// Lookup.scala:31:38
  wire        _controlsig_T_93 = _GEN_0 == 17'h6B3;	// Lookup.scala:31:38
  wire        _controlsig_T_95 = _GEN_0 == 17'h733;	// Lookup.scala:31:38
  wire        _controlsig_T_97 = _GEN_0 == 17'h7B3;	// Lookup.scala:31:38
  wire        _controlsig_T_99 = _GEN == 10'h1B;	// Lookup.scala:31:38
  wire        _controlsig_T_101 = _GEN_0 == 17'h9B;	// Lookup.scala:31:38
  wire        _controlsig_T_103 = _GEN_0 == 17'h29B;	// Lookup.scala:31:38
  wire        _controlsig_T_105 = _GEN_0 == 17'h829B;	// Lookup.scala:31:38
  wire        _controlsig_T_107 = _GEN_0 == 17'h3B;	// Lookup.scala:31:38
  wire        _controlsig_T_109 = _GEN_0 == 17'h803B;	// Lookup.scala:31:38
  wire        _controlsig_T_111 = _GEN_0 == 17'hBB;	// Lookup.scala:31:38
  wire        _controlsig_T_113 = _GEN_0 == 17'h2BB;	// Lookup.scala:31:38
  wire        _controlsig_T_115 = _GEN_0 == 17'h82BB;	// Lookup.scala:31:38
  wire        _controlsig_T_117 = _GEN_0 == 17'h43B;	// Lookup.scala:31:38
  wire        _controlsig_T_119 = _GEN_0 == 17'h63B;	// Lookup.scala:31:38
  wire        _controlsig_T_121 = _GEN_0 == 17'h6BB;	// Lookup.scala:31:38
  wire        _controlsig_T_123 = _GEN_0 == 17'h73B;	// Lookup.scala:31:38
  wire        _controlsig_T_498 = _GEN_0 == 17'h7BB;	// Lookup.scala:31:38
  wire [1:0]  _controlsig_T_312 = {_controlsig_T_498, 1'h0};	// Lookup.scala:31:38, :34:39
  wire        _GEN_1 = _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_240 | _controlsig_T_23 | _controlsig_T_25 |
                _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 |
                _controlsig_T_35 | _controlsig_T_37 | _controlsig_T_39 | _controlsig_T_41 |
                _controlsig_T_43 | _controlsig_T_45 | _controlsig_T_47 | _controlsig_T_49 |
                _controlsig_T_51 | _controlsig_T_53 | _controlsig_T_55 | _controlsig_T_57 |
                _controlsig_T_59 | _controlsig_T_61 | _controlsig_T_63 | _controlsig_T_65;	// Lookup.scala:31:38, :34:39
  wire        _GEN_2 = _controlsig_T_67 | _controlsig_T_69 | _controlsig_T_71 | _controlsig_T_73 |
                _controlsig_T_75 | _controlsig_T_77 | _controlsig_T_79 | _controlsig_T_81 |
                _controlsig_T_83 | _controlsig_T_85 | _controlsig_T_87 | _controlsig_T_89 |
                _controlsig_T_91 | _controlsig_T_93 | _controlsig_T_95 | _controlsig_T_97 |
                _controlsig_T_99 | _controlsig_T_101 | _controlsig_T_103 | _controlsig_T_105 |
                _controlsig_T_107 | _controlsig_T_109 | _controlsig_T_111 | _controlsig_T_113 |
                _controlsig_T_115 | _controlsig_T_117 | _controlsig_T_119 | _controlsig_T_121 |
                _controlsig_T_123;	// Lookup.scala:31:38, :34:39
  wire        _GEN_3 = _controlsig_T_7 | _controlsig_T_9;	// Lookup.scala:31:38, :34:39
  wire        _GEN_4 = _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_240;	// Lookup.scala:31:38, :34:39
  wire        _GEN_5 = _controlsig_T_3 | _controlsig_T_5;	// Lookup.scala:31:38, :34:39
  wire        _GEN_6 = _controlsig_T_3 | _controlsig_T_5 | _controlsig_T_7 | _controlsig_T_9;	// Lookup.scala:31:38, :34:39
  wire        _GEN_7 = _controlsig_T_45 | _controlsig_T_47 | _controlsig_T_49 | _controlsig_T_51 |
                _controlsig_T_53 | _controlsig_T_55 | _controlsig_T_57 | _controlsig_T_59 |
                _controlsig_T_61 | _controlsig_T_63 | _controlsig_T_65 | _controlsig_T_67 |
                _controlsig_T_69 | _controlsig_T_71 | _controlsig_T_73 | _controlsig_T_75 |
                _controlsig_T_77 | _controlsig_T_79 | _controlsig_T_81 | _controlsig_T_83;	// Lookup.scala:31:38, :34:39
  wire        _GEN_8 = _controlsig_T_85 | _controlsig_T_87 | _controlsig_T_89 | _controlsig_T_91 |
                _controlsig_T_93 | _controlsig_T_95 | _controlsig_T_97 | _controlsig_T_99 |
                _controlsig_T_101 | _controlsig_T_103 | _controlsig_T_105 | _controlsig_T_107 |
                _controlsig_T_109 | _controlsig_T_111 | _controlsig_T_113 | _controlsig_T_115 |
                _controlsig_T_117 | _controlsig_T_119 | _controlsig_T_121 | _controlsig_T_123 |
                _controlsig_T_498;	// Lookup.scala:31:38, :34:39
  assign io_jump_type = _controlsig_T_1 | _controlsig_T_3 | _controlsig_T_5 ? 2'h0 : _controlsig_T_7 ? 2'h1 :
                {_controlsig_T_9, 1'h0};	// <stdin>:49:10, Lookup.scala:31:38, :34:39
  assign io_branch_type = ~_controlsig_T_1 & ~_controlsig_T_3 & ~_controlsig_T_5 & ~_controlsig_T_7 &
                ~_controlsig_T_9 & (_controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 |
                _controlsig_T_17 | _controlsig_T_19 | _controlsig_T_240);	// <stdin>:49:10, Lookup.scala:31:38, :34:39
  assign io_opa_type = _controlsig_T_1 ? 2'h0 : _controlsig_T_3 ? 2'h1 : _controlsig_T_5 ? 2'h0 : _GEN_3 ? 2'h1 :
                _GEN_1 | _GEN_2 ? 2'h2 : _controlsig_T_312;	// <stdin>:49:10, Lookup.scala:31:38, :34:39
  assign io_opb_type = _controlsig_T_1 ? 2'h0 : _GEN_5 ? 2'h1 : _GEN_3 ? 2'h3 : _GEN_4 ? 2'h2 : _controlsig_T_23 |
                _controlsig_T_25 | _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 |
                _controlsig_T_33 | _controlsig_T_35 | _controlsig_T_37 | _controlsig_T_39 |
                _controlsig_T_41 | _controlsig_T_43 | _controlsig_T_45 | _controlsig_T_47 |
                _controlsig_T_49 | _controlsig_T_51 | _controlsig_T_53 | _controlsig_T_55 |
                _controlsig_T_57 | _controlsig_T_59 | _controlsig_T_61 ? 2'h1 : _controlsig_T_63 |
                _controlsig_T_65 | _controlsig_T_67 | _controlsig_T_69 | _controlsig_T_71 |
                _controlsig_T_73 | _controlsig_T_75 | _controlsig_T_77 | _controlsig_T_79 |
                _controlsig_T_81 | _controlsig_T_83 | _controlsig_T_85 | _controlsig_T_87 |
                _controlsig_T_89 | _controlsig_T_91 | _controlsig_T_93 | _controlsig_T_95 |
                _controlsig_T_97 ? 2'h2 : _controlsig_T_99 | _controlsig_T_101 | _controlsig_T_103 |
                _controlsig_T_105 ? 2'h1 : _controlsig_T_107 | _controlsig_T_109 | _controlsig_T_111 |
                _controlsig_T_113 | _controlsig_T_115 | _controlsig_T_117 | _controlsig_T_119 |
                _controlsig_T_121 | _controlsig_T_123 ? 2'h2 : _controlsig_T_312;	// <stdin>:49:10, Lookup.scala:31:38, :34:39
  assign io_imm_type = {1'h0, _controlsig_T_1 ? 2'h0 : _GEN_5 ? 2'h1 : _controlsig_T_7 ? 2'h2 : _controlsig_T_9 |
                _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_240 | _controlsig_T_23 | _controlsig_T_25 |
                _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 |
                _controlsig_T_35 ? 2'h0 : _controlsig_T_37 | _controlsig_T_39 | _controlsig_T_41 ? 2'h3 :
                {2{_controlsig_T_43}}};	// <stdin>:49:10, ControlUnit.scala:168:21, Lookup.scala:31:38, :34:39
  assign io_alu_op = _controlsig_T_1 ? 6'h3F : _GEN_6 ? 6'h0 : _controlsig_T_11 ? 6'h2 : _controlsig_T_13 ? 6'h3
                : _controlsig_T_15 ? 6'h4 : _controlsig_T_17 ? 6'h5 : _controlsig_T_19 ? 6'h6 :
                _controlsig_T_240 ? 6'h7 : _controlsig_T_23 | _controlsig_T_25 | _controlsig_T_27 |
                _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 | _controlsig_T_35 |
                _controlsig_T_37 | _controlsig_T_39 | _controlsig_T_41 | _controlsig_T_43 |
                _controlsig_T_45 ? 6'h0 : _controlsig_T_47 ? 6'h4 : _controlsig_T_49 ? 6'h6 :
                _controlsig_T_51 ? 6'h8 : _controlsig_T_53 ? 6'h9 : _controlsig_T_55 ? 6'h10 :
                _controlsig_T_57 ? 6'hD : _controlsig_T_59 ? 6'hE : _controlsig_T_61 ? 6'hF :
                _controlsig_T_63 ? 6'h0 : _controlsig_T_65 ? 6'h1 : _controlsig_T_67 ? 6'hA :
                _controlsig_T_69 ? 6'h4 : _controlsig_T_71 ? 6'h6 : _controlsig_T_73 ? 6'h8 :
                _controlsig_T_75 ? 6'hB : _controlsig_T_77 ? 6'hC : _controlsig_T_79 ? 6'h9 :
                _controlsig_T_81 ? 6'h10 : _controlsig_T_83 ? 6'h12 : _controlsig_T_85 ? 6'h13 :
                _controlsig_T_87 ? 6'h14 : _controlsig_T_89 ? 6'h15 : _controlsig_T_91 ? 6'h16 :
                _controlsig_T_93 ? 6'h17 : _controlsig_T_95 ? 6'h18 : _controlsig_T_97 ? 6'h19 :
                _controlsig_T_99 ? 6'h1A : _controlsig_T_101 ? 6'h1B : _controlsig_T_103 ? 6'h1C :
                _controlsig_T_105 ? 6'h1D : _controlsig_T_107 ? 6'h1E : _controlsig_T_109 ? 6'h1F :
                _controlsig_T_111 ? 6'h20 : _controlsig_T_113 ? 6'h21 : _controlsig_T_115 ? 6'h22 :
                _controlsig_T_117 ? 6'h23 : _controlsig_T_119 ? 6'h24 : _controlsig_T_121 ? 6'h25 :
                _controlsig_T_123 ? 6'h26 : _controlsig_T_498 ? 6'h27 : 6'h3F;	// <stdin>:49:10, Lookup.scala:31:38, :34:39
  assign io_wb_type = _controlsig_T_1 ? 2'h0 : _GEN_6 ? 2'h1 : _GEN_4 ? 2'h0 : _controlsig_T_23 |
                _controlsig_T_25 | _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 |
                _controlsig_T_33 | _controlsig_T_35 ? 2'h2 : {1'h0, ~_controlsig_T_37 & ~_controlsig_T_39 &
                ~_controlsig_T_41 & ~_controlsig_T_43 & (_GEN_7 | _GEN_8)};	// <stdin>:49:10, Lookup.scala:31:38, :34:39
  assign io_sd_type = _controlsig_T_1 | _controlsig_T_3 | _controlsig_T_5 | _controlsig_T_7 | _controlsig_T_9 |
                _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_240 | _controlsig_T_23 | _controlsig_T_25 |
                _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 |
                _controlsig_T_35 ? 3'h0 : _controlsig_T_37 ? 3'h1 : _controlsig_T_39 ? 3'h2 :
                _controlsig_T_41 ? 3'h3 : {_controlsig_T_43, 2'h0};	// <stdin>:49:10, Lookup.scala:31:38, :34:39
  assign io_ld_type = _controlsig_T_1 | _controlsig_T_3 | _controlsig_T_5 | _controlsig_T_7 | _controlsig_T_9 |
                _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_240 ? 3'h0 : _controlsig_T_23 ? 3'h1 : _controlsig_T_25 ?
                3'h2 : _controlsig_T_27 ? 3'h3 : _controlsig_T_29 ? 3'h5 : _controlsig_T_31 ? 3'h6 :
                _controlsig_T_33 ? 3'h7 : {_controlsig_T_35, 2'h0};	// <stdin>:49:10, Lookup.scala:31:38, :34:39
endmodule

module Eximm(	// <stdin>:757:10
  input  [31:0] io_inst,
  input  [2:0]  io_imm_type,
  output [63:0] io_eximm);

  wire [7:0][63:0] _GEN = {{64'h0}, {64'h0}, {64'h0}, {{{52{io_inst[31]}}, io_inst[7], io_inst[30:25], io_inst[11:8],
                1'h0}}, {{{52{io_inst[31]}}, io_inst[31:25], io_inst[11:7]}}, {{{44{io_inst[31]}},
                io_inst[19:12], io_inst[20], io_inst[30:21], 1'h0}}, {{{32{io_inst[31]}}, io_inst[31:12],
                12'h0}}, {{{52{io_inst[31]}}, io_inst[31:20]}}};	// Bitwise.scala:77:12, Cat.scala:33:92, Eximm.scala:30:{42,56}, :31:56, :32:{56,72,85}, :33:{56,72}, :34:{69,81,97}, Mux.scala:81:{58,61}
  assign io_eximm = _GEN[io_imm_type];	// <stdin>:757:10, Mux.scala:81:{58,61}
endmodule

module Decode(	// <stdin>:815:10
  input         clock,
                reset,
  input  [31:0] io_inst_bits,
  input  [63:0] io_fdio_pc,
                io_rfio_reg1_rdata,
                io_rfio_reg2_rdata,
  input         io_branch,
                io_fwde_fw_sel1,
                io_fwde_fw_sel2,
  input  [63:0] io_fwde_fw_data1,
                io_fwde_fw_data2,
  output [4:0]  io_rfio_reg1_raddr,
                io_rfio_reg2_raddr,
  output [63:0] io_deio_op_a,
                io_deio_op_b,
  output [4:0]  io_deio_rd,
  output        io_deio_branch_type,
  output [63:0] io_deio_branch_addr,
  output [5:0]  io_deio_alu_op,
  output [4:0]  io_deio_shamt,
  output [1:0]  io_deio_wb_type,
  output [2:0]  io_deio_sd_type,
  output [63:0] io_deio_reg2_rdata,
  output [2:0]  io_deio_ld_type,
  output        io_jump_flag,
  output [63:0] io_jump_pc,
  output        io_load_use,
  output [4:0]  io_fwde_reg1_raddr,
                io_fwde_reg2_raddr);

  wire [63:0]      _eximm_io_eximm;	// Decode.scala:50:23
  wire [1:0]       _cu_io_jump_type;	// Decode.scala:49:20
  wire [1:0]       _cu_io_opa_type;	// Decode.scala:49:20
  wire [1:0]       _cu_io_opb_type;	// Decode.scala:49:20
  wire [2:0]       _cu_io_imm_type;	// Decode.scala:49:20
  wire [2:0]       _cu_io_ld_type;	// Decode.scala:49:20
  wire [31:0]      inst = io_inst_bits;	// Decode.scala:38:20
  reg  [4:0]       lu_rd;	// Decode.scala:69:24
  wire             _io_deio_op_a_T_5 = _cu_io_opa_type == 2'h2;	// Decode.scala:49:20, :75:34
  wire [63:0]      _io_jump_pc_T_4 = io_fwde_fw_sel1 ? io_fwde_fw_data1 : io_rfio_reg1_rdata;	// Decode.scala:88:38
  wire [63:0]      _io_deio_reg2_rdata_T = io_fwde_fw_sel2 ? io_fwde_fw_data2 : io_rfio_reg2_rdata;	// Decode.scala:97:38
  wire [3:0][63:0] _GEN = {{64'h4}, {_io_deio_reg2_rdata_T}, {_eximm_io_eximm}, {64'h0}};	// Decode.scala:50:23, :75:95, :97:38, Mux.scala:81:{58,61}
  wire             _io_jump_pc_T = _cu_io_jump_type == 2'h1;	// Decode.scala:49:20, :113:38, Mux.scala:81:61
  wire             _io_jump_pc_T_3 = _cu_io_jump_type == 2'h2;	// Decode.scala:49:20, :75:34, :113:82
  always @(posedge clock) begin
    if (reset)
      lu_rd <= 5'h0;	// Decode.scala:69:24
    else if (io_branch | _cu_io_ld_type == 3'h0)	// Decode.scala:49:20, :72:17, :73:32
      lu_rd <= 5'h0;	// Decode.scala:69:24
    else	// Decode.scala:49:20, :72:17, :73:32
      lu_rd <= inst[11:7];	// Decode.scala:61:16, :63:15, :69:24
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:815:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:815:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:815:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:815:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:815:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:815:10
        `INIT_RANDOM_PROLOG_	// <stdin>:815:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:815:10
        _RANDOM_0 = `RANDOM;	// <stdin>:815:10
        lu_rd = _RANDOM_0[4:0];	// Decode.scala:69:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:815:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:815:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  ControlUnit cu (	// Decode.scala:49:20
    .io_inst        (inst),	// Decode.scala:61:16
    .io_jump_type   (_cu_io_jump_type),
    .io_branch_type (io_deio_branch_type),
    .io_opa_type    (_cu_io_opa_type),
    .io_opb_type    (_cu_io_opb_type),
    .io_imm_type    (_cu_io_imm_type),
    .io_alu_op      (io_deio_alu_op),
    .io_wb_type     (io_deio_wb_type),
    .io_sd_type     (io_deio_sd_type),
    .io_ld_type     (_cu_io_ld_type)
  );
  Eximm eximm (	// Decode.scala:50:23
    .io_inst     (inst),	// Decode.scala:61:16
    .io_imm_type (_cu_io_imm_type),	// Decode.scala:49:20
    .io_eximm    (_eximm_io_eximm)
  );
  assign io_rfio_reg1_raddr = inst[19:15];	// <stdin>:815:10, Decode.scala:61:16
  assign io_rfio_reg2_raddr = inst[24:20];	// <stdin>:815:10, Decode.scala:61:16, :62:16
  assign io_deio_op_a = _io_deio_op_a_T_5 ? _io_jump_pc_T_4 : _cu_io_opa_type == 2'h1 ? io_fdio_pc : 64'h0;	// <stdin>:815:10, Decode.scala:49:20, :75:34, :88:38, Mux.scala:81:{58,61}
  assign io_deio_op_b = _GEN[_cu_io_opb_type];	// <stdin>:815:10, Decode.scala:49:20, :75:95, Mux.scala:81:{58,61}
  assign io_deio_rd = inst[11:7];	// <stdin>:815:10, Decode.scala:61:16, :63:15
  assign io_deio_branch_addr = io_fdio_pc + {{52{inst[31]}}, inst[7], inst[30:25], inst[11:8], 1'h0};	// <stdin>:815:10, Cat.scala:33:92, Decode.scala:61:16, :73:17, :104:{39,58,79,88,101}
  assign io_deio_shamt = inst[24:20];	// <stdin>:815:10, Decode.scala:61:16, :64:11
  assign io_deio_reg2_rdata = _io_deio_reg2_rdata_T;	// <stdin>:815:10, Decode.scala:97:38
  assign io_deio_ld_type = _cu_io_ld_type;	// <stdin>:815:10, Decode.scala:49:20
  assign io_jump_flag = _io_jump_pc_T | _io_jump_pc_T_3;	// <stdin>:815:10, Decode.scala:113:{38,63,82}
  assign io_jump_pc = _io_jump_pc_T ? io_fdio_pc + _eximm_io_eximm : _io_jump_pc_T_3 ? _io_jump_pc_T_4 +
                _eximm_io_eximm & 64'hFFFFFFFFFFFFFFFE : 64'h80000000;	// <stdin>:815:10, Decode.scala:50:23, :88:38, :113:{38,82}, :117:71, :118:{121,139,142}, Mux.scala:101:16
  assign io_load_use = (_io_deio_op_a_T_5 & inst[19:15] == lu_rd | _cu_io_opb_type == 2'h2 & inst[24:20] == lu_rd)
                & (|lu_rd);	// <stdin>:815:10, Decode.scala:49:20, :61:16, :62:16, :69:24, :75:{34,57,64,75,95,118,125,138,148}
  assign io_fwde_reg1_raddr = inst[19:15];	// <stdin>:815:10, Decode.scala:61:16
  assign io_fwde_reg2_raddr = inst[24:20];	// <stdin>:815:10, Decode.scala:61:16, :62:16
endmodule

module Alu(	// <stdin>:923:10
  input  [63:0] io_op_a,
                io_op_b,
  input  [5:0]  io_alu_op,
  input  [4:0]  io_shamt,
  output [63:0] io_result);

  wire [64:0]  _GEN = {io_op_a[63], io_op_a};	// Alu.scala:76:13, :86:40
  wire [64:0]  _GEN_0 = {io_op_b[63], io_op_b};	// Alu.scala:77:13, :86:40
  wire [126:0] _GEN_1 = {63'h0, io_op_a};	// Alu.scala:96:33
  wire [126:0] _GEN_2 = {121'h0, io_op_b[5:0]};	// Alu.scala:96:{33,43}
  wire [63:0]  _GEN_3 = {58'h0, io_op_b[5:0]};	// Alu.scala:96:43, :97:33
  wire [63:0]  _res_T_34 = io_op_a >> _GEN_3;	// Alu.scala:97:33
  wire [63:0]  _res_T_38 = $signed($signed(io_op_a) >>> _GEN_3);	// Alu.scala:97:33, :98:40
  wire [94:0]  _res_T_80 = {31'h0, io_op_a} << io_shamt;	// Alu.scala:99:34
  wire [63:0]  _GEN_4 = {59'h0, io_shamt};	// Alu.scala:100:34
  wire [63:0]  _res_T_83 = io_op_a >> _GEN_4;	// Alu.scala:100:34
  wire [63:0]  _res_T_44 = $signed($signed(io_op_a) >>> _GEN_4);	// Alu.scala:100:34, :101:41
  wire [63:0]  _res_T_47 = io_op_a & io_op_b;	// Alu.scala:102:33
  wire [63:0]  _res_T_49 = ~_res_T_47;	// Alu.scala:102:33, :103:25
  wire [127:0] _GEN_5 = {{64{io_op_a[63]}}, io_op_a};	// Alu.scala:76:13, :104:34
  wire [127:0] _GEN_6 = _GEN_5 * {{64{io_op_b[63]}}, io_op_b};	// Alu.scala:77:13, :104:34
  wire [127:0] _GEN_7 = {64'h0, io_op_b};	// Alu.scala:106:37, Mux.scala:81:58
  wire [127:0] _GEN_8 = _GEN_5 * _GEN_7;	// Alu.scala:104:34, :106:37
  wire [127:0] _GEN_9 = {64'h0, io_op_a} * _GEN_7;	// Alu.scala:106:37, :107:36, Mux.scala:81:58
  wire [64:0]  _res_T_68 = $signed(_GEN) / $signed(_GEN_0);	// Alu.scala:86:40, :108:40
  wire [63:0]  _res_T_119 = io_op_a / io_op_b;	// Alu.scala:109:34
  wire [63:0]  _res_T_127 = io_op_a % io_op_b;	// Alu.scala:111:34
  wire [31:0]  _res_T_78 = io_op_a[31:0] + io_op_b[31:0];	// Alu.scala:112:36
  wire [63:0]  _res_T_87 = $signed($signed(io_op_a) >>> _GEN_4);	// Alu.scala:100:34, :115:43
  wire [31:0]  _res_T_96 = io_op_a[31:0] - io_op_b[31:0];	// Alu.scala:112:36, :117:35
  wire [126:0] _res_T_99 = _GEN_1 << _GEN_2;	// Alu.scala:96:33, :118:35
  wire [63:0]  _res_T_103 = io_op_a >> _GEN_3;	// Alu.scala:97:33, :119:35
  wire [63:0]  _res_T_108 = $signed($signed(io_op_a) >>> _GEN_3);	// Alu.scala:97:33, :120:42
  wire [64:0]  _res_T_116 = $signed(_GEN) / $signed(_GEN_0);	// Alu.scala:86:40, :122:42
  wire [63:0]  _res_T_124 = $signed(io_op_a) % $signed(io_op_b);	// Alu.scala:124:42
  wire [63:0]  _res_T_150 = io_alu_op == 6'h9 ? io_op_a | io_op_b : io_alu_op == 6'h8 ? io_op_a ^ io_op_b : io_alu_op
                == 6'h7 ? {63'h0, io_op_a > io_op_b} : io_alu_op == 6'h6 ? {63'h0, io_op_a < io_op_b} :
                io_alu_op == 6'h5 ? {63'h0, $signed(io_op_a) > $signed(io_op_b)} : io_alu_op == 6'h4 ?
                {63'h0, $signed(io_op_a) < $signed(io_op_b)} : io_alu_op == 6'h3 ? {63'h0, io_op_a !=
                io_op_b} : io_alu_op == 6'h2 ? {63'h0, io_op_a == io_op_b} : io_alu_op == 6'h1 ? io_op_a -
                io_op_b : io_alu_op == 6'h0 ? io_op_a + io_op_b : 64'h0;	// Alu.scala:86:40, :87:40, :88:33, :89:33, :90:40, :91:40, :92:34, :93:34, :94:33, :95:32, :96:33, Mux.scala:81:{58,61}
  wire [126:0] _res_T_168 = io_alu_op == 6'h12 ? {{63{_GEN_6[63]}}, _GEN_6[63:0]} : io_alu_op == 6'h11 ?
                {{63{_res_T_49[63]}}, _res_T_49} : io_alu_op == 6'h10 ? {{63{_res_T_47[63]}}, _res_T_47} :
                io_alu_op == 6'hF ? {{63{_res_T_44[63]}}, _res_T_44} : io_alu_op == 6'hE ?
                {{63{_res_T_83[63]}}, _res_T_83} : io_alu_op == 6'hD ? {{32{_res_T_80[94]}}, _res_T_80} :
                io_alu_op == 6'hC ? {{63{_res_T_38[63]}}, _res_T_38} : io_alu_op == 6'hB ?
                {{63{_res_T_34[63]}}, _res_T_34} : io_alu_op == 6'hA ? _GEN_1 << _GEN_2 :
                {{63{_res_T_150[63]}}, _res_T_150};	// Alu.scala:96:33, :97:33, :98:40, :99:34, :100:34, :101:41, :102:33, :103:25, :104:{34,44}, Mux.scala:81:{58,61}
  wire [63:0]  _GEN_10 = {{32{_res_T_78[31]}}, _res_T_78};	// Alu.scala:112:36, Mux.scala:81:58
  assign io_result = (&io_alu_op) ? 64'h0 : io_alu_op == 6'h27 ? {{32{_res_T_127[31]}}, _res_T_127[31:0]} :
                io_alu_op == 6'h26 ? {{32{_res_T_124[31]}}, _res_T_124[31:0]} : io_alu_op == 6'h25 ?
                {{32{_res_T_119[31]}}, _res_T_119[31:0]} : io_alu_op == 6'h24 ? {{32{_res_T_116[31]}},
                _res_T_116[31:0]} : io_alu_op == 6'h23 ? {{32{_GEN_6[31]}}, _GEN_6[31:0]} : io_alu_op ==
                6'h22 ? {{32{_res_T_108[31]}}, _res_T_108[31:0]} : io_alu_op == 6'h21 ?
                {{32{_res_T_103[31]}}, _res_T_103[31:0]} : io_alu_op == 6'h20 ? {{32{_res_T_99[31]}},
                _res_T_99[31:0]} : io_alu_op == 6'h1F ? {{32{_res_T_96[31]}}, _res_T_96} : io_alu_op ==
                6'h1E ? _GEN_10 : io_alu_op == 6'h1D ? {{32{_res_T_87[31]}}, _res_T_87[31:0]} : io_alu_op
                == 6'h1C ? {{32{_res_T_83[31]}}, _res_T_83[31:0]} : io_alu_op == 6'h1B ?
                {{32{_res_T_80[31]}}, _res_T_80[31:0]} : io_alu_op == 6'h1A ? _GEN_10 : io_alu_op == 6'h19
                ? _res_T_127 : io_alu_op == 6'h18 ? $signed(io_op_a) % $signed(io_op_b) : io_alu_op ==
                6'h17 ? _res_T_119 : io_alu_op == 6'h16 ? _res_T_68[63:0] : io_alu_op == 6'h15 ?
                _GEN_9[127:64] : io_alu_op == 6'h14 ? _GEN_8[127:64] : io_alu_op == 6'h13 ? _GEN_6[127:64]
                : _res_T_168[63:0];	// <stdin>:923:10, Alu.scala:99:34, :100:34, :104:34, :105:45, :106:{37,47}, :107:{36,46}, :108:40, :109:34, :110:40, :111:34, :113:48, :114:48, :115:{43,55}, :117:35, :118:{35,51}, :119:{35,51}, :120:{42,58}, :121:45, :122:{42,59}, :123:46, :124:{42,59}, :125:46, Mux.scala:81:{58,61}
endmodule

module Excute(	// <stdin>:1156:10
  input  [63:0] io_deio_op_a,
                io_deio_op_b,
  input  [4:0]  io_deio_rd,
  input         io_deio_branch_type,
  input  [63:0] io_deio_branch_addr,
  input  [5:0]  io_deio_alu_op,
  input  [4:0]  io_deio_shamt,
  input  [1:0]  io_deio_wb_type,
  input  [2:0]  io_deio_sd_type,
  input  [63:0] io_deio_reg2_rdata,
  input  [2:0]  io_deio_ld_type,
  output [63:0] io_emio_alu_res,
  output [1:0]  io_emio_wb_type,
  output [4:0]  io_emio_rd,
  output [2:0]  io_emio_ld_type,
                io_emio_ld_addr_lowbit,
  output        io_jump_flag,
  output [63:0] io_jump_pc,
                io_raddr,
                io_waddr,
                io_wdata,
  output [7:0]  io_wmask,
  output [4:0]  io_fwex_reg_waddr,
  output [63:0] io_fwex_reg_wdata,
  output        io_fwex_reg_we);

  wire [63:0] _io_raddr_T_1;	// Excute.scala:51:20
  wire [63:0] _alu_io_result;	// Excute.scala:32:21
  assign _io_raddr_T_1 = (|io_deio_ld_type) ? _alu_io_result : 64'h0;	// Excute.scala:32:21, :51:{20,37}
  Alu alu (	// Excute.scala:32:21
    .io_op_a   (io_deio_op_a),
    .io_op_b   (io_deio_op_b),
    .io_alu_op (io_deio_alu_op),
    .io_shamt  (io_deio_shamt),
    .io_result (_alu_io_result)
  );
  assign io_emio_alu_res = _alu_io_result;	// <stdin>:1156:10, Excute.scala:32:21
  assign io_emio_wb_type = io_deio_wb_type;	// <stdin>:1156:10
  assign io_emio_rd = io_deio_rd;	// <stdin>:1156:10
  assign io_emio_ld_type = io_deio_ld_type;	// <stdin>:1156:10
  assign io_emio_ld_addr_lowbit = _io_raddr_T_1[2:0];	// <stdin>:1156:10, Excute.scala:44:39, :51:20
  assign io_jump_flag = io_deio_branch_type & (|_alu_io_result);	// <stdin>:1156:10, Excute.scala:32:21, :47:{50,69}
  assign io_jump_pc = io_deio_branch_addr;	// <stdin>:1156:10
  assign io_raddr = _io_raddr_T_1;	// <stdin>:1156:10, Excute.scala:51:20
  assign io_waddr = (|io_deio_sd_type) ? _alu_io_result : 64'h0;	// <stdin>:1156:10, Excute.scala:32:21, :51:20, :53:{20,37}
  assign io_wdata = io_deio_reg2_rdata;	// <stdin>:1156:10
  assign io_wmask = io_deio_sd_type == 3'h4 ? 8'hFF : {4'h0, io_deio_sd_type == 3'h3 ? 4'hF : {2'h0,
                io_deio_sd_type == 3'h2 ? 2'h3 : {1'h0, io_deio_sd_type == 3'h1}}};	// <stdin>:1156:10, Mux.scala:81:{58,61}
  assign io_fwex_reg_waddr = io_deio_rd;	// <stdin>:1156:10
  assign io_fwex_reg_wdata = _alu_io_result;	// <stdin>:1156:10, Excute.scala:32:21
  assign io_fwex_reg_we = io_deio_wb_type == 2'h1;	// <stdin>:1156:10, Excute.scala:65:40
endmodule

module Mem(	// <stdin>:1200:10
  input  [63:0] io_emio_alu_res,
  input  [1:0]  io_emio_wb_type,
  input  [4:0]  io_emio_rd,
  input  [2:0]  io_emio_ld_type,
                io_emio_ld_addr_lowbit,
  input  [63:0] io_rdata,
  output [1:0]  io_mwio_wb_type,
  output [63:0] io_mwio_wb_data,
  output [4:0]  io_mwio_rd,
                io_fwmem_reg_waddr,
  output [63:0] io_fwmem_reg_wdata,
  output        io_fwmem_reg_we);

  wire [63:0]      rvalue;	// Mem.scala:24:22
  wire             _rvalue_T_148 = io_emio_ld_addr_lowbit == 3'h2;	// Mux.scala:81:61
  wire             _rvalue_T_162 = io_emio_ld_addr_lowbit == 3'h4;	// Mux.scala:81:61
  wire             _rvalue_T_152 = io_emio_ld_addr_lowbit == 3'h6;	// Mux.scala:81:61
  wire [7:0][63:0] _GEN = {{{{56{io_rdata[63]}}, io_rdata[63:56]}}, {{{56{io_rdata[55]}}, io_rdata[55:48]}},
                {{{56{io_rdata[47]}}, io_rdata[47:40]}}, {{{56{io_rdata[39]}}, io_rdata[39:32]}},
                {{{56{io_rdata[31]}}, io_rdata[31:24]}}, {{{56{io_rdata[23]}}, io_rdata[23:16]}},
                {{{56{io_rdata[15]}}, io_rdata[15:8]}}, {{{56{io_rdata[7]}}, io_rdata[7:0]}}};	// Bitwise.scala:77:12, Cat.scala:33:92, Mem.scala:30:{49,63}, :31:{49,64}, :32:{49,64}, :33:{49,64}, :34:{49,64}, :35:{49,64}, :36:{49,64}, :37:{49,64}, Mux.scala:81:{58,61}
  wire             _rvalue_T_160 = io_emio_ld_addr_lowbit == 3'h0;	// Mux.scala:81:61
  wire [7:0][7:0]  _GEN_0 = {{io_rdata[7:0]}, {io_rdata[7:0]}, {io_rdata[47:40]}, {io_rdata[39:32]}, {io_rdata[31:24]},
                {io_rdata[23:16]}, {io_rdata[15:8]}, {io_rdata[7:0]}};	// Mem.scala:30:63, :31:64, :32:64, :33:64, :34:64, :35:64, Mux.scala:81:{58,61}
  wire [7:0][63:0] _GEN_1 = {{_rvalue_T_162 ? {32'h0, io_rdata[63:32]} : _rvalue_T_160 ? {32'h0, io_rdata[31:0]} :
                64'h0}, {_rvalue_T_152 ? {48'h0, io_rdata[63:48]} : _rvalue_T_162 ? {48'h0,
                io_rdata[47:32]} : _rvalue_T_148 ? {48'h0, io_rdata[31:16]} : _rvalue_T_160 ? {48'h0,
                io_rdata[15:0]} : 64'h0}, {{56'h0, (&io_emio_ld_addr_lowbit) ? io_rdata[63:56] :
                _rvalue_T_152 ? io_rdata[55:48] : _GEN_0[io_emio_ld_addr_lowbit]}}, {io_rdata},
                {_rvalue_T_162 ? {{32{io_rdata[63]}}, io_rdata[63:32]} : _rvalue_T_160 ?
                {{32{io_rdata[31]}}, io_rdata[31:0]} : 64'h0}, {_rvalue_T_152 ? {{48{io_rdata[63]}},
                io_rdata[63:48]} : _rvalue_T_162 ? {{48{io_rdata[47]}}, io_rdata[47:32]} : _rvalue_T_148 ?
                {{48{io_rdata[31]}}, io_rdata[31:16]} : _rvalue_T_160 ? {{48{io_rdata[15]}},
                io_rdata[15:0]} : 64'h0}, {_GEN[io_emio_ld_addr_lowbit]}, {64'h0}};	// Bitwise.scala:77:12, Cat.scala:33:92, Mem.scala:31:49, :33:49, :35:49, :36:64, :37:{49,64}, :42:64, :43:64, :44:64, :45:64, :50:64, :51:64, Mux.scala:81:{58,61}
  assign rvalue = _GEN_1[io_emio_ld_type];	// Mem.scala:26:12, Mux.scala:81:{58,61}
  wire             _io_fwmem_reg_wdata_T = io_emio_wb_type == 2'h1;	// Mem.scala:89:30
  wire             _io_fwmem_reg_wdata_T_1 = io_emio_wb_type == 2'h2;	// Mem.scala:90:30, Mux.scala:81:61
  assign io_mwio_wb_type = io_emio_wb_type;	// <stdin>:1200:10
  assign io_mwio_wb_data = _io_fwmem_reg_wdata_T ? io_emio_alu_res : _io_fwmem_reg_wdata_T_1 ? rvalue : 64'h0;	// <stdin>:1200:10, Mem.scala:89:30, :90:30, Mux.scala:81:58, :101:16
  assign io_mwio_rd = io_emio_rd;	// <stdin>:1200:10
  assign io_fwmem_reg_waddr = io_emio_rd;	// <stdin>:1200:10
  assign io_fwmem_reg_wdata = _io_fwmem_reg_wdata_T ? io_emio_alu_res : _io_fwmem_reg_wdata_T_1 ? rvalue : 64'h0;	// <stdin>:1200:10, Mem.scala:89:30, :90:30, Mux.scala:81:58, :101:16
  assign io_fwmem_reg_we = _io_fwmem_reg_wdata_T | _io_fwmem_reg_wdata_T_1;	// <stdin>:1200:10, Mem.scala:89:30, :90:30, :96:52
endmodule

module Wb(	// <stdin>:1403:10
  input  [1:0]  io_mwio_wb_type,
  input  [63:0] io_mwio_wb_data,
  input  [4:0]  io_mwio_rd,
  output [4:0]  io_rfio_rd,
  output        io_rfio_reg_wen,
  output [63:0] io_rfio_reg_wdata,
  output [4:0]  io_fwwb_reg_waddr,
  output [63:0] io_fwwb_reg_wdata,
  output        io_fwwb_reg_we);

  assign io_rfio_rd = io_mwio_rd;	// <stdin>:1403:10
  assign io_rfio_reg_wen = |io_mwio_wb_type;	// <stdin>:1403:10, Wb.scala:24:40
  assign io_rfio_reg_wdata = io_mwio_wb_data;	// <stdin>:1403:10
  assign io_fwwb_reg_waddr = io_mwio_rd;	// <stdin>:1403:10
  assign io_fwwb_reg_wdata = io_mwio_wb_data;	// <stdin>:1403:10
  assign io_fwwb_reg_we = |io_mwio_wb_type;	// <stdin>:1403:10, Wb.scala:24:40
endmodule

module Regfile(	// <stdin>:1417:10
  input         clock,
  input  [4:0]  io_RfDe_reg1_raddr,
                io_RfDe_reg2_raddr,
                io_RfWb_rd,
  input         io_RfWb_reg_wen,
  input  [63:0] io_RfWb_reg_wdata,
  output [63:0] io_RfDe_reg1_rdata,
                io_RfDe_reg2_rdata);

  wire [63:0] _regs_ext_R0_data;	// Regfile.scala:32:19
  wire [63:0] _regs_ext_R1_data;	// Regfile.scala:32:19
  wire [63:0] _regs_ext_R2_data;	// Regfile.scala:32:19
  regs_combMem regs_ext (	// Regfile.scala:32:19
    .R0_addr (io_RfWb_rd),
    .R0_en   (1'h1),	// <stdin>:1417:10
    .R0_clk  (clock),
    .R1_addr (io_RfDe_reg1_raddr),
    .R1_en   (1'h1),	// <stdin>:1417:10
    .R1_clk  (clock),
    .R2_addr (io_RfDe_reg2_raddr),
    .R2_en   (1'h1),	// <stdin>:1417:10
    .R2_clk  (clock),
    .W0_addr (5'h0),	// Regfile.scala:37:9
    .W0_en   (1'h1),	// <stdin>:1417:10
    .W0_clk  (clock),
    .W0_data (64'h0),	// Regfile.scala:37:13
    .W1_addr (io_RfWb_rd),
    .W1_en   (1'h1),	// <stdin>:1417:10
    .W1_clk  (clock),
    .W1_data (io_RfWb_reg_wen & (|io_RfWb_rd) ? io_RfWb_reg_wdata : _regs_ext_R0_data),	// Regfile.scala:32:19, :39:{28,45,60}
    .R0_data (_regs_ext_R0_data),
    .R1_data (_regs_ext_R1_data),
    .R2_data (_regs_ext_R2_data)
  );
  assign io_RfDe_reg1_rdata = (|io_RfDe_reg1_raddr) ? _regs_ext_R1_data : 64'h0;	// <stdin>:1417:10, Regfile.scala:32:19, :37:13, :48:{30,50}
  assign io_RfDe_reg2_rdata = (|io_RfDe_reg2_raddr) ? _regs_ext_R2_data : 64'h0;	// <stdin>:1417:10, Regfile.scala:32:19, :37:13, :49:{30,50}
endmodule

module FlowControl(	// <stdin>:1440:10
  input         io_fcde_jump_flag,
  input  [63:0] io_fcde_jump_pc,
  input         io_fcde_load_use,
                io_fcex_jump_flag,
  input  [63:0] io_fcex_jump_pc,
  output        io_fcfe_jump_flag,
  output [63:0] io_fcfe_jump_pc,
  output        io_fcfe_flush,
                io_fcfe_stall,
                io_fcde_flush);

  assign io_fcfe_jump_flag = io_fcde_jump_flag | io_fcex_jump_flag;	// <stdin>:1440:10, FlowControl.scala:101:44
  assign io_fcfe_jump_pc = io_fcex_jump_flag ? io_fcex_jump_pc : io_fcde_jump_flag ? io_fcde_jump_pc : 64'h80000000;	// <stdin>:1440:10, Mux.scala:101:16
  assign io_fcfe_flush = io_fcex_jump_flag | io_fcde_jump_flag;	// <stdin>:1440:10, Mux.scala:101:16
  assign io_fcfe_stall = ~io_fcex_jump_flag & ~io_fcde_jump_flag & io_fcde_load_use;	// <stdin>:1440:10, Mux.scala:101:16
  assign io_fcde_flush = io_fcex_jump_flag | ~io_fcde_jump_flag & io_fcde_load_use;	// <stdin>:1440:10, Mux.scala:101:16
endmodule

module Forward(	// <stdin>:1511:10
  input  [4:0]  io_fwde_reg1_raddr,
                io_fwde_reg2_raddr,
                io_fwex_reg_waddr,
  input  [63:0] io_fwex_reg_wdata,
  input         io_fwex_reg_we,
  input  [4:0]  io_fwmem_reg_waddr,
  input  [63:0] io_fwmem_reg_wdata,
  input         io_fwmem_reg_we,
  input  [4:0]  io_fwwb_reg_waddr,
  input  [63:0] io_fwwb_reg_wdata,
  input         io_fwwb_reg_we,
  output        io_fwde_fw_sel1,
                io_fwde_fw_sel2,
  output [63:0] io_fwde_fw_data1,
                io_fwde_fw_data2);

  wire reg1_ex_hazard = (|io_fwde_reg1_raddr) & io_fwex_reg_we & io_fwex_reg_waddr == io_fwde_reg1_raddr;	// Forward.scala:38:{46,73,95}
  wire reg2_ex_hazard = (|io_fwde_reg2_raddr) & io_fwex_reg_we & io_fwex_reg_waddr == io_fwde_reg2_raddr;	// Forward.scala:39:{46,73,95}
  wire reg1_mem_hazard = (|io_fwde_reg1_raddr) & io_fwmem_reg_we & io_fwmem_reg_waddr == io_fwde_reg1_raddr;	// Forward.scala:38:46, :41:{75,98}
  wire reg2_mem_hazard = (|io_fwde_reg2_raddr) & io_fwmem_reg_we & io_fwmem_reg_waddr == io_fwde_reg2_raddr;	// Forward.scala:39:46, :42:{75,98}
  wire reg1_wb_hazard = (|io_fwde_reg1_raddr) & io_fwwb_reg_we & io_fwwb_reg_waddr == io_fwde_reg1_raddr;	// Forward.scala:38:46, :44:{73,95}
  wire reg2_wb_hazard = (|io_fwde_reg2_raddr) & io_fwwb_reg_we & io_fwwb_reg_waddr == io_fwde_reg2_raddr;	// Forward.scala:39:46, :45:{73,95}
  assign io_fwde_fw_sel1 = reg1_ex_hazard | reg1_mem_hazard | reg1_wb_hazard;	// <stdin>:1511:10, Forward.scala:38:73, :41:75, :44:73, :47:57
  assign io_fwde_fw_sel2 = reg2_ex_hazard | reg2_mem_hazard | reg2_wb_hazard;	// <stdin>:1511:10, Forward.scala:39:73, :42:75, :45:73, :48:57
  assign io_fwde_fw_data1 = reg1_ex_hazard ? io_fwex_reg_wdata : reg1_mem_hazard ? io_fwmem_reg_wdata : reg1_wb_hazard
                ? io_fwwb_reg_wdata : 64'h0;	// <stdin>:1511:10, Forward.scala:38:73, :41:75, :44:73, Mux.scala:101:16
  assign io_fwde_fw_data2 = reg2_ex_hazard ? io_fwex_reg_wdata : reg2_mem_hazard ? io_fwmem_reg_wdata : reg2_wb_hazard
                ? io_fwwb_reg_wdata : 64'h0;	// <stdin>:1511:10, Forward.scala:39:73, :42:75, :45:73, Mux.scala:101:16
endmodule

// external module DebugInterface

module Core(	// <stdin>:1572:10
  input         clock,
                reset,
  input  [63:0] io_inst,
                io_rdata,
  output [63:0] io_pc,
  output        io_valid,
                io_load_use,
  output [63:0] io_raddr,
                io_waddr,
                io_wdata,
  output [7:0]  io_wmask,
  output [63:0] io_next_pc);

  wire        _fw_io_fwde_fw_sel1;	// Core.scala:294:20
  wire        _fw_io_fwde_fw_sel2;	// Core.scala:294:20
  wire [63:0] _fw_io_fwde_fw_data1;	// Core.scala:294:20
  wire [63:0] _fw_io_fwde_fw_data2;	// Core.scala:294:20
  wire        _fc_io_fcfe_jump_flag;	// Core.scala:92:20
  wire [63:0] _fc_io_fcfe_jump_pc;	// Core.scala:92:20
  wire        _fc_io_fcfe_flush;	// Core.scala:92:20
  wire        _fc_io_fcfe_stall;	// Core.scala:92:20
  wire        _fc_io_fcde_flush;	// Core.scala:92:20
  wire [63:0] _regfile_io_RfDe_reg1_rdata;	// Core.scala:89:25
  wire [63:0] _regfile_io_RfDe_reg2_rdata;	// Core.scala:89:25
  wire [4:0]  _wb_io_rfio_rd;	// Core.scala:45:20
  wire        _wb_io_rfio_reg_wen;	// Core.scala:45:20
  wire [63:0] _wb_io_rfio_reg_wdata;	// Core.scala:45:20
  wire [4:0]  _wb_io_fwwb_reg_waddr;	// Core.scala:45:20
  wire [63:0] _wb_io_fwwb_reg_wdata;	// Core.scala:45:20
  wire        _wb_io_fwwb_reg_we;	// Core.scala:45:20
  wire [1:0]  _mem_io_mwio_wb_type;	// Core.scala:44:21
  wire [63:0] _mem_io_mwio_wb_data;	// Core.scala:44:21
  wire [4:0]  _mem_io_mwio_rd;	// Core.scala:44:21
  wire [4:0]  _mem_io_fwmem_reg_waddr;	// Core.scala:44:21
  wire [63:0] _mem_io_fwmem_reg_wdata;	// Core.scala:44:21
  wire        _mem_io_fwmem_reg_we;	// Core.scala:44:21
  wire [63:0] _excute_io_emio_alu_res;	// Core.scala:42:24
  wire [1:0]  _excute_io_emio_wb_type;	// Core.scala:42:24
  wire [4:0]  _excute_io_emio_rd;	// Core.scala:42:24
  wire [2:0]  _excute_io_emio_ld_type;	// Core.scala:42:24
  wire [2:0]  _excute_io_emio_ld_addr_lowbit;	// Core.scala:42:24
  wire        _excute_io_jump_flag;	// Core.scala:42:24
  wire [63:0] _excute_io_jump_pc;	// Core.scala:42:24
  wire [4:0]  _excute_io_fwex_reg_waddr;	// Core.scala:42:24
  wire [63:0] _excute_io_fwex_reg_wdata;	// Core.scala:42:24
  wire        _excute_io_fwex_reg_we;	// Core.scala:42:24
  wire [4:0]  _decode_io_rfio_reg1_raddr;	// Core.scala:41:24
  wire [4:0]  _decode_io_rfio_reg2_raddr;	// Core.scala:41:24
  wire [63:0] _decode_io_deio_op_a;	// Core.scala:41:24
  wire [63:0] _decode_io_deio_op_b;	// Core.scala:41:24
  wire [4:0]  _decode_io_deio_rd;	// Core.scala:41:24
  wire        _decode_io_deio_branch_type;	// Core.scala:41:24
  wire [63:0] _decode_io_deio_branch_addr;	// Core.scala:41:24
  wire [5:0]  _decode_io_deio_alu_op;	// Core.scala:41:24
  wire [4:0]  _decode_io_deio_shamt;	// Core.scala:41:24
  wire [1:0]  _decode_io_deio_wb_type;	// Core.scala:41:24
  wire [2:0]  _decode_io_deio_sd_type;	// Core.scala:41:24
  wire [63:0] _decode_io_deio_reg2_rdata;	// Core.scala:41:24
  wire [2:0]  _decode_io_deio_ld_type;	// Core.scala:41:24
  wire        _decode_io_jump_flag;	// Core.scala:41:24
  wire [63:0] _decode_io_jump_pc;	// Core.scala:41:24
  wire        _decode_io_load_use;	// Core.scala:41:24
  wire [4:0]  _decode_io_fwde_reg1_raddr;	// Core.scala:41:24
  wire [4:0]  _decode_io_fwde_reg2_raddr;	// Core.scala:41:24
  wire [63:0] _fetch_io_fdio_pc;	// Core.scala:40:23
  wire        _fetch_io_pc_valid;	// Core.scala:40:23
  wire [63:0] _fetch_io_pc_bits;	// Core.scala:40:23
  reg  [63:0] fdreg_pc;	// Core.scala:49:24
  reg  [63:0] dereg_op_a;	// Core.scala:54:24
  reg  [63:0] dereg_op_b;	// Core.scala:54:24
  reg  [4:0]  dereg_rd;	// Core.scala:54:24
  reg         dereg_branch_type;	// Core.scala:54:24
  reg  [63:0] dereg_branch_addr;	// Core.scala:54:24
  reg  [5:0]  dereg_alu_op;	// Core.scala:54:24
  reg  [4:0]  dereg_shamt;	// Core.scala:54:24
  reg  [1:0]  dereg_wb_type;	// Core.scala:54:24
  reg  [2:0]  dereg_sd_type;	// Core.scala:54:24
  reg  [63:0] dereg_reg2_rdata;	// Core.scala:54:24
  reg  [2:0]  dereg_ld_type;	// Core.scala:54:24
  reg  [63:0] emreg_alu_res;	// Core.scala:70:24
  reg  [1:0]  emreg_wb_type;	// Core.scala:70:24
  reg  [4:0]  emreg_rd;	// Core.scala:70:24
  reg  [2:0]  emreg_ld_type;	// Core.scala:70:24
  reg  [2:0]  emreg_ld_addr_lowbit;	// Core.scala:70:24
  reg  [1:0]  mwreg_wb_type;	// Core.scala:80:24
  reg  [63:0] mwreg_wb_data;	// Core.scala:80:24
  reg  [4:0]  mwreg_rd;	// Core.scala:80:24
  always @(posedge clock) begin
    if (reset) begin
      fdreg_pc <= 64'h80000000;	// <stdin>:1601:20, Core.scala:49:24
      dereg_op_a <= 64'h0;	// <stdin>:1606:28, Core.scala:54:24
      dereg_op_b <= 64'h0;	// <stdin>:1606:28, Core.scala:54:24
      dereg_rd <= 5'h0;	// <stdin>:1609:23, Core.scala:54:24
      dereg_branch_type <= 1'h0;	// Core.scala:54:24, :301:19
      dereg_branch_addr <= 64'h0;	// <stdin>:1606:28, Core.scala:54:24
      dereg_alu_op <= 6'h3F;	// <stdin>:1610:27, Core.scala:54:24
      dereg_shamt <= 5'h0;	// <stdin>:1609:23, Core.scala:54:24
      dereg_wb_type <= 2'h0;	// <stdin>:1608:25, Core.scala:54:24
      dereg_sd_type <= 3'h0;	// <stdin>:1605:25, Core.scala:54:24
      dereg_reg2_rdata <= 64'h0;	// <stdin>:1606:28, Core.scala:54:24
      dereg_ld_type <= 3'h0;	// <stdin>:1605:25, Core.scala:54:24
      emreg_alu_res <= 64'h0;	// <stdin>:1606:28, Core.scala:70:24
      emreg_wb_type <= 2'h0;	// <stdin>:1608:25, Core.scala:70:24
      emreg_rd <= 5'h0;	// <stdin>:1609:23, Core.scala:70:24
      emreg_ld_type <= 3'h0;	// <stdin>:1605:25, Core.scala:70:24
      emreg_ld_addr_lowbit <= 3'h0;	// <stdin>:1605:25, Core.scala:70:24
      mwreg_wb_type <= 2'h0;	// <stdin>:1608:25, Core.scala:80:24
      mwreg_wb_data <= 64'h0;	// <stdin>:1606:28, Core.scala:80:24
      mwreg_rd <= 5'h0;	// <stdin>:1609:23, Core.scala:80:24
    end
    else begin
      fdreg_pc <= _fetch_io_fdio_pc;	// Core.scala:40:23, :49:24
      if (_fc_io_fcde_flush) begin	// Core.scala:92:20
        dereg_op_a <= 64'h0;	// <stdin>:1606:28, Core.scala:54:24
        dereg_op_b <= 64'h0;	// <stdin>:1606:28, Core.scala:54:24
        dereg_rd <= 5'h0;	// <stdin>:1609:23, Core.scala:54:24
        dereg_branch_addr <= 64'h0;	// <stdin>:1606:28, Core.scala:54:24
        dereg_alu_op <= 6'h0;	// Core.scala:54:24, Mux.scala:101:16
        dereg_shamt <= 5'h0;	// <stdin>:1609:23, Core.scala:54:24
        dereg_wb_type <= 2'h0;	// <stdin>:1608:25, Core.scala:54:24
        dereg_sd_type <= 3'h0;	// <stdin>:1605:25, Core.scala:54:24
        dereg_reg2_rdata <= 64'h0;	// <stdin>:1606:28, Core.scala:54:24
        dereg_ld_type <= 3'h0;	// <stdin>:1605:25, Core.scala:54:24
      end
      else begin	// Core.scala:92:20
        dereg_op_a <= _decode_io_deio_op_a;	// Core.scala:41:24, :54:24
        dereg_op_b <= _decode_io_deio_op_b;	// Core.scala:41:24, :54:24
        dereg_rd <= _decode_io_deio_rd;	// Core.scala:41:24, :54:24
        dereg_branch_addr <= _decode_io_deio_branch_addr;	// Core.scala:41:24, :54:24
        dereg_alu_op <= _decode_io_deio_alu_op;	// Core.scala:41:24, :54:24
        dereg_shamt <= _decode_io_deio_shamt;	// Core.scala:41:24, :54:24
        dereg_wb_type <= _decode_io_deio_wb_type;	// Core.scala:41:24, :54:24
        dereg_sd_type <= _decode_io_deio_sd_type;	// Core.scala:41:24, :54:24
        dereg_reg2_rdata <= _decode_io_deio_reg2_rdata;	// Core.scala:41:24, :54:24
        dereg_ld_type <= _decode_io_deio_ld_type;	// Core.scala:41:24, :54:24
      end
      dereg_branch_type <= ~_fc_io_fcde_flush & _decode_io_deio_branch_type;	// Core.scala:41:24, :54:24, :92:20, Mux.scala:101:16
      emreg_alu_res <= _excute_io_emio_alu_res;	// Core.scala:42:24, :70:24
      emreg_wb_type <= _excute_io_emio_wb_type;	// Core.scala:42:24, :70:24
      emreg_rd <= _excute_io_emio_rd;	// Core.scala:42:24, :70:24
      emreg_ld_type <= _excute_io_emio_ld_type;	// Core.scala:42:24, :70:24
      emreg_ld_addr_lowbit <= _excute_io_emio_ld_addr_lowbit;	// Core.scala:42:24, :70:24
      mwreg_wb_type <= _mem_io_mwio_wb_type;	// Core.scala:44:21, :80:24
      mwreg_wb_data <= _mem_io_mwio_wb_data;	// Core.scala:44:21, :80:24
      mwreg_rd <= _mem_io_mwio_rd;	// Core.scala:44:21, :80:24
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1572:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1572:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1572:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1572:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1572:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1572:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1572:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:1572:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:1572:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:1572:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:1572:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:1572:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:1572:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:1572:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:1572:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:1572:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:1572:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:1572:10
      automatic logic [31:0] _RANDOM_14;	// <stdin>:1572:10
      automatic logic [31:0] _RANDOM_15;	// <stdin>:1572:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1572:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1572:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1572:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1572:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1572:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1572:10
        _RANDOM_3 = `RANDOM;	// <stdin>:1572:10
        _RANDOM_4 = `RANDOM;	// <stdin>:1572:10
        _RANDOM_5 = `RANDOM;	// <stdin>:1572:10
        _RANDOM_6 = `RANDOM;	// <stdin>:1572:10
        _RANDOM_7 = `RANDOM;	// <stdin>:1572:10
        _RANDOM_8 = `RANDOM;	// <stdin>:1572:10
        _RANDOM_9 = `RANDOM;	// <stdin>:1572:10
        _RANDOM_10 = `RANDOM;	// <stdin>:1572:10
        _RANDOM_11 = `RANDOM;	// <stdin>:1572:10
        _RANDOM_12 = `RANDOM;	// <stdin>:1572:10
        _RANDOM_13 = `RANDOM;	// <stdin>:1572:10
        _RANDOM_14 = `RANDOM;	// <stdin>:1572:10
        _RANDOM_15 = `RANDOM;	// <stdin>:1572:10
        fdreg_pc = {_RANDOM_0, _RANDOM_1};	// Core.scala:49:24
        dereg_op_a = {_RANDOM_2, _RANDOM_3};	// Core.scala:54:24
        dereg_op_b = {_RANDOM_4, _RANDOM_5};	// Core.scala:54:24
        dereg_rd = _RANDOM_6[4:0];	// Core.scala:54:24
        dereg_branch_type = _RANDOM_6[5];	// Core.scala:54:24
        dereg_branch_addr = {_RANDOM_6[31:6], _RANDOM_7, _RANDOM_8[5:0]};	// Core.scala:54:24
        dereg_alu_op = _RANDOM_8[11:6];	// Core.scala:54:24
        dereg_shamt = _RANDOM_8[16:12];	// Core.scala:54:24
        dereg_wb_type = _RANDOM_8[18:17];	// Core.scala:54:24
        dereg_sd_type = _RANDOM_8[21:19];	// Core.scala:54:24
        dereg_reg2_rdata = {_RANDOM_8[31:22], _RANDOM_9, _RANDOM_10[21:0]};	// Core.scala:54:24
        dereg_ld_type = _RANDOM_10[24:22];	// Core.scala:54:24
        emreg_alu_res = {_RANDOM_10[31:25], _RANDOM_11, _RANDOM_12[24:0]};	// Core.scala:54:24, :70:24
        emreg_wb_type = _RANDOM_12[26:25];	// Core.scala:70:24
        emreg_rd = _RANDOM_12[31:27];	// Core.scala:70:24
        emreg_ld_type = _RANDOM_13[2:0];	// Core.scala:70:24
        emreg_ld_addr_lowbit = _RANDOM_13[5:3];	// Core.scala:70:24
        mwreg_wb_type = _RANDOM_13[7:6];	// Core.scala:70:24, :80:24
        mwreg_wb_data = {_RANDOM_13[31:8], _RANDOM_14, _RANDOM_15[7:0]};	// Core.scala:70:24, :80:24
        mwreg_rd = _RANDOM_15[12:8];	// Core.scala:80:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1572:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1572:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Interact interact (	// Core.scala:32:26
    .inst (io_inst[31:0]),	// Core.scala:33:22
    .clk  (clock),
    .rst  (reset)
  );
  Fetch fetch (	// Core.scala:40:23
    .clock             (clock),
    .reset             (reset),
    .io_fcfe_jump_flag (_fc_io_fcfe_jump_flag),	// Core.scala:92:20
    .io_fcfe_jump_pc   (_fc_io_fcfe_jump_pc),	// Core.scala:92:20
    .io_fcfe_flush     (_fc_io_fcfe_flush),	// Core.scala:92:20
    .io_fcfe_stall     (_fc_io_fcfe_stall),	// Core.scala:92:20
    .io_fdio_pc        (_fetch_io_fdio_pc),
    .io_pc_valid       (_fetch_io_pc_valid),
    .io_pc_bits        (_fetch_io_pc_bits),
    .io_next_pc        (io_next_pc)
  );
  Decode decode (	// Core.scala:41:24
    .clock               (clock),
    .reset               (reset),
    .io_inst_bits        (fdreg_pc[2] ? io_inst[63:32] : io_inst[31:0]),	// Core.scala:49:24, :113:{31,40,60,76}
    .io_fdio_pc          (fdreg_pc),	// Core.scala:49:24
    .io_rfio_reg1_rdata  (_regfile_io_RfDe_reg1_rdata),	// Core.scala:89:25
    .io_rfio_reg2_rdata  (_regfile_io_RfDe_reg2_rdata),	// Core.scala:89:25
    .io_branch           (_excute_io_jump_flag),	// Core.scala:42:24
    .io_fwde_fw_sel1     (_fw_io_fwde_fw_sel1),	// Core.scala:294:20
    .io_fwde_fw_sel2     (_fw_io_fwde_fw_sel2),	// Core.scala:294:20
    .io_fwde_fw_data1    (_fw_io_fwde_fw_data1),	// Core.scala:294:20
    .io_fwde_fw_data2    (_fw_io_fwde_fw_data2),	// Core.scala:294:20
    .io_rfio_reg1_raddr  (_decode_io_rfio_reg1_raddr),
    .io_rfio_reg2_raddr  (_decode_io_rfio_reg2_raddr),
    .io_deio_op_a        (_decode_io_deio_op_a),
    .io_deio_op_b        (_decode_io_deio_op_b),
    .io_deio_rd          (_decode_io_deio_rd),
    .io_deio_branch_type (_decode_io_deio_branch_type),
    .io_deio_branch_addr (_decode_io_deio_branch_addr),
    .io_deio_alu_op      (_decode_io_deio_alu_op),
    .io_deio_shamt       (_decode_io_deio_shamt),
    .io_deio_wb_type     (_decode_io_deio_wb_type),
    .io_deio_sd_type     (_decode_io_deio_sd_type),
    .io_deio_reg2_rdata  (_decode_io_deio_reg2_rdata),
    .io_deio_ld_type     (_decode_io_deio_ld_type),
    .io_jump_flag        (_decode_io_jump_flag),
    .io_jump_pc          (_decode_io_jump_pc),
    .io_load_use         (_decode_io_load_use),
    .io_fwde_reg1_raddr  (_decode_io_fwde_reg1_raddr),
    .io_fwde_reg2_raddr  (_decode_io_fwde_reg2_raddr)
  );
  Excute excute (	// Core.scala:42:24
    .io_deio_op_a           (dereg_op_a),	// Core.scala:54:24
    .io_deio_op_b           (dereg_op_b),	// Core.scala:54:24
    .io_deio_rd             (dereg_rd),	// Core.scala:54:24
    .io_deio_branch_type    (dereg_branch_type),	// Core.scala:54:24
    .io_deio_branch_addr    (dereg_branch_addr),	// Core.scala:54:24
    .io_deio_alu_op         (dereg_alu_op),	// Core.scala:54:24
    .io_deio_shamt          (dereg_shamt),	// Core.scala:54:24
    .io_deio_wb_type        (dereg_wb_type),	// Core.scala:54:24
    .io_deio_sd_type        (dereg_sd_type),	// Core.scala:54:24
    .io_deio_reg2_rdata     (dereg_reg2_rdata),	// Core.scala:54:24
    .io_deio_ld_type        (dereg_ld_type),	// Core.scala:54:24
    .io_emio_alu_res        (_excute_io_emio_alu_res),
    .io_emio_wb_type        (_excute_io_emio_wb_type),
    .io_emio_rd             (_excute_io_emio_rd),
    .io_emio_ld_type        (_excute_io_emio_ld_type),
    .io_emio_ld_addr_lowbit (_excute_io_emio_ld_addr_lowbit),
    .io_jump_flag           (_excute_io_jump_flag),
    .io_jump_pc             (_excute_io_jump_pc),
    .io_raddr               (io_raddr),
    .io_waddr               (io_waddr),
    .io_wdata               (io_wdata),
    .io_wmask               (io_wmask),
    .io_fwex_reg_waddr      (_excute_io_fwex_reg_waddr),
    .io_fwex_reg_wdata      (_excute_io_fwex_reg_wdata),
    .io_fwex_reg_we         (_excute_io_fwex_reg_we)
  );
  Mem mem (	// Core.scala:44:21
    .io_emio_alu_res        (emreg_alu_res),	// Core.scala:70:24
    .io_emio_wb_type        (emreg_wb_type),	// Core.scala:70:24
    .io_emio_rd             (emreg_rd),	// Core.scala:70:24
    .io_emio_ld_type        (emreg_ld_type),	// Core.scala:70:24
    .io_emio_ld_addr_lowbit (emreg_ld_addr_lowbit),	// Core.scala:70:24
    .io_rdata               (io_rdata),
    .io_mwio_wb_type        (_mem_io_mwio_wb_type),
    .io_mwio_wb_data        (_mem_io_mwio_wb_data),
    .io_mwio_rd             (_mem_io_mwio_rd),
    .io_fwmem_reg_waddr     (_mem_io_fwmem_reg_waddr),
    .io_fwmem_reg_wdata     (_mem_io_fwmem_reg_wdata),
    .io_fwmem_reg_we        (_mem_io_fwmem_reg_we)
  );
  Wb wb (	// Core.scala:45:20
    .io_mwio_wb_type   (mwreg_wb_type),	// Core.scala:80:24
    .io_mwio_wb_data   (mwreg_wb_data),	// Core.scala:80:24
    .io_mwio_rd        (mwreg_rd),	// Core.scala:80:24
    .io_rfio_rd        (_wb_io_rfio_rd),
    .io_rfio_reg_wen   (_wb_io_rfio_reg_wen),
    .io_rfio_reg_wdata (_wb_io_rfio_reg_wdata),
    .io_fwwb_reg_waddr (_wb_io_fwwb_reg_waddr),
    .io_fwwb_reg_wdata (_wb_io_fwwb_reg_wdata),
    .io_fwwb_reg_we    (_wb_io_fwwb_reg_we)
  );
  Regfile regfile (	// Core.scala:89:25
    .clock              (clock),
    .io_RfDe_reg1_raddr (_decode_io_rfio_reg1_raddr),	// Core.scala:41:24
    .io_RfDe_reg2_raddr (_decode_io_rfio_reg2_raddr),	// Core.scala:41:24
    .io_RfWb_rd         (_wb_io_rfio_rd),	// Core.scala:45:20
    .io_RfWb_reg_wen    (_wb_io_rfio_reg_wen),	// Core.scala:45:20
    .io_RfWb_reg_wdata  (_wb_io_rfio_reg_wdata),	// Core.scala:45:20
    .io_RfDe_reg1_rdata (_regfile_io_RfDe_reg1_rdata),
    .io_RfDe_reg2_rdata (_regfile_io_RfDe_reg2_rdata)
  );
  FlowControl fc (	// Core.scala:92:20
    .io_fcde_jump_flag (_decode_io_jump_flag),	// Core.scala:41:24
    .io_fcde_jump_pc   (_decode_io_jump_pc),	// Core.scala:41:24
    .io_fcde_load_use  (_decode_io_load_use),	// Core.scala:41:24
    .io_fcex_jump_flag (_excute_io_jump_flag),	// Core.scala:42:24
    .io_fcex_jump_pc   (_excute_io_jump_pc),	// Core.scala:42:24
    .io_fcfe_jump_flag (_fc_io_fcfe_jump_flag),
    .io_fcfe_jump_pc   (_fc_io_fcfe_jump_pc),
    .io_fcfe_flush     (_fc_io_fcfe_flush),
    .io_fcfe_stall     (_fc_io_fcfe_stall),
    .io_fcde_flush     (_fc_io_fcde_flush)
  );
  Forward fw (	// Core.scala:294:20
    .io_fwde_reg1_raddr (_decode_io_fwde_reg1_raddr),	// Core.scala:41:24
    .io_fwde_reg2_raddr (_decode_io_fwde_reg2_raddr),	// Core.scala:41:24
    .io_fwex_reg_waddr  (_excute_io_fwex_reg_waddr),	// Core.scala:42:24
    .io_fwex_reg_wdata  (_excute_io_fwex_reg_wdata),	// Core.scala:42:24
    .io_fwex_reg_we     (_excute_io_fwex_reg_we),	// Core.scala:42:24
    .io_fwmem_reg_waddr (_mem_io_fwmem_reg_waddr),	// Core.scala:44:21
    .io_fwmem_reg_wdata (_mem_io_fwmem_reg_wdata),	// Core.scala:44:21
    .io_fwmem_reg_we    (_mem_io_fwmem_reg_we),	// Core.scala:44:21
    .io_fwwb_reg_waddr  (_wb_io_fwwb_reg_waddr),	// Core.scala:45:20
    .io_fwwb_reg_wdata  (_wb_io_fwwb_reg_wdata),	// Core.scala:45:20
    .io_fwwb_reg_we     (_wb_io_fwwb_reg_we),	// Core.scala:45:20
    .io_fwde_fw_sel1    (_fw_io_fwde_fw_sel1),
    .io_fwde_fw_sel2    (_fw_io_fwde_fw_sel2),
    .io_fwde_fw_data1   (_fw_io_fwde_fw_data1),
    .io_fwde_fw_data2   (_fw_io_fwde_fw_data2)
  );
  DebugInterface DI (	// Core.scala:301:19
    .clk        (clock),
    .rst        (reset),
    .pc         (_fetch_io_pc_bits),	// Core.scala:40:23
    .pc_req     (_fetch_io_pc_valid),	// Core.scala:40:23
    .inst       (fdreg_pc[2] ? io_inst[63:32] : io_inst[31:0]),	// Core.scala:49:24, :113:{40,60,76}, :306:22
    .inst_valid (1'h0),	// Core.scala:301:19
    .load_use   (_decode_io_load_use),	// Core.scala:41:24
    .op_a       (dereg_op_a),	// Core.scala:54:24
    .op_b       (dereg_op_b),	// Core.scala:54:24
    .result     (_excute_io_emio_alu_res),	// Core.scala:42:24
    .br_yes     (_excute_io_jump_flag),	// Core.scala:42:24
    .rd         (_wb_io_rfio_rd),	// Core.scala:45:20
    .reg_wen    (_wb_io_rfio_reg_wen),	// Core.scala:45:20
    .reg_wdata  (_wb_io_rfio_reg_wdata)	// Core.scala:45:20
  );
  assign io_pc = _fetch_io_pc_bits;	// <stdin>:1572:10, Core.scala:40:23
  assign io_valid = _fetch_io_pc_valid;	// <stdin>:1572:10, Core.scala:40:23
  assign io_load_use = _decode_io_load_use;	// <stdin>:1572:10, Core.scala:41:24
endmodule

// external module TempMem

module Soc(	// <stdin>:1803:10
  input         clock,
                reset,
  output [63:0] io_next_pc);

  wire [63:0] _tm_inst;	// Soc.scala:15:20
  wire [63:0] _tm_rdata;	// Soc.scala:15:20
  wire [63:0] _core_io_pc;	// Soc.scala:12:22
  wire        _core_io_valid;	// Soc.scala:12:22
  wire        _core_io_load_use;	// Soc.scala:12:22
  wire [63:0] _core_io_raddr;	// Soc.scala:12:22
  wire [63:0] _core_io_waddr;	// Soc.scala:12:22
  wire [63:0] _core_io_wdata;	// Soc.scala:12:22
  wire [7:0]  _core_io_wmask;	// Soc.scala:12:22
  Core core (	// Soc.scala:12:22
    .clock       (clock),
    .reset       (reset),
    .io_inst     (_tm_inst),	// Soc.scala:15:20
    .io_rdata    (_tm_rdata),	// Soc.scala:15:20
    .io_pc       (_core_io_pc),
    .io_valid    (_core_io_valid),
    .io_load_use (_core_io_load_use),
    .io_raddr    (_core_io_raddr),
    .io_waddr    (_core_io_waddr),
    .io_wdata    (_core_io_wdata),
    .io_wmask    (_core_io_wmask),
    .io_next_pc  (io_next_pc)
  );
  TempMem tm (	// Soc.scala:15:20
    .clk      (clock),
    .load_use (_core_io_load_use),	// Soc.scala:12:22
    .pc       (_core_io_pc),	// Soc.scala:12:22
    .valid    (_core_io_valid),	// Soc.scala:12:22
    .raddr    (_core_io_raddr),	// Soc.scala:12:22
    .waddr    (_core_io_waddr),	// Soc.scala:12:22
    .wdata    (_core_io_wdata),	// Soc.scala:12:22
    .wmask    (_core_io_wmask),	// Soc.scala:12:22
    .inst     (_tm_inst),
    .rdata    (_tm_rdata)
  );
endmodule


// ----- 8< ----- FILE "rv64/./build/Interact.v" ----- 8< -----


module Interact(input [31:0] inst,
                input  clk,
                input  rst
);
   
   reg ebreak_flag;
   reg [2:0] over_count;

   always@(posedge clk)begin
       if(rst)
           ebreak_flag <= 1'b0;
       else
       if(inst == 32'b00000000000100000000000001110011)begin
           ebreak_flag <= 1'b1;
       end
   end

   always@(posedge clk)begin  //需要等前面指令执行结束，再停止程序
       if(rst)
           over_count <= 'd0;
       else begin
           if(ebreak_flag)begin
               over_count <= over_count + 1'b1;
               if(over_count == 3'd4)begin
                   $display("ebreak!");
                   $finish;
               end
                   
           end
       end 
           
   end

   
endmodule
        

// ----- 8< ----- FILE "rv64/./build/DebugInterface.v" ----- 8< -----



import "DPI-C" function void update_debuginfo(input reg[63:0] pc, input pc_req, input reg[31:0] inst, 
  input inst_valid, input load_use, input reg[63:0] op_a, input reg[63:0] op_b, input reg[63:0] result, 
   input br_yes,
   input reg[4:0] rd, input reg[63:0] reg_wdata,
  input reg_wen);

module DebugInterface(
                   input        clk,
                   input        rst,            
           
                   input [63:0] pc,
                   input        pc_req,

                   input [31:0] inst,
                   input        inst_valid,
                   input        load_use,

                   input [63:0] op_a,
                   input [63:0] op_b,
                   input [63:0] result,
                   input        br_yes,


                   input [4:0] rd,
                   input [63:0] reg_wdata,
                   input        reg_wen
);




always@(posedge clk)begin
   if(rst != 'd1)
       update_debuginfo(pc,pc_req,inst,inst_valid,load_use,op_a,op_b,result,br_yes,rd,reg_wdata,reg_wen);
end



endmodule


    

// ----- 8< ----- FILE "rv64/./build/TempMem.v" ----- 8< -----


import "DPI-C" function longint pmem_read(
   input reg[63:0] raddr);

import "DPI-C" function void pmem_write(
   input reg[63:0] waddr, input reg[63:0] wdata, input byte wmask);

module TempMem(
   input           clk,

   input           load_use,

   output  reg [63:0]  inst,
   input   [63:0]  pc,
   input           valid,

   input   [63:0]  raddr,
   output  reg [63:0]  rdata,

   input   [63:0]  wdata,
   input   [63:0]  waddr,
   input   [7:0]   wmask
);

   reg [63:0]  old_inst;

   always@(posedge clk)begin

       old_inst <= inst;

       if(load_use == 'd1)
           inst <= inst;         //不变,给decode再一次的use指令  
       else if(valid == 'd1)
           inst <= pmem_read(pc);
       

       if(raddr != 'd0)
           rdata <= pmem_read(raddr);
       if(waddr != 'd0)
           pmem_write(waddr, wdata, wmask);
       
   end

endmodule


    

// ----- 8< ----- FILE "firrtl_black_box_resource_files.f" ----- 8< -----


