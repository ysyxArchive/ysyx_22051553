// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_REG_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_REG_INIT
`ifdef RANDOMIZE_MEM_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_MEM_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

// VCS coverage exclude_file
module regs_combMem(	// Regfile.scala:32:19
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [4:0]  R2_addr,
  input         R2_en,
                R2_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [63:0] W0_data,
  input  [4:0]  W1_addr,
  input         W1_en,
                W1_clk,
  input  [63:0] W1_data,
  output [63:0] R0_data,
                R1_data,
                R2_data);

  reg [63:0] Memory[0:31];	// Regfile.scala:32:19
  always @(posedge W0_clk) begin	// Regfile.scala:32:19
    if (W0_en)	// Regfile.scala:32:19
      Memory[W0_addr] <= W0_data;	// Regfile.scala:32:19
    if (W1_en)	// Regfile.scala:32:19
      Memory[W1_addr] <= W1_data;	// Regfile.scala:32:19
  end // always @(posedge)
  `ifndef SYNTHESIS	// Regfile.scala:32:19
    `ifdef RANDOMIZE_MEM_INIT	// Regfile.scala:32:19
      integer initvar;	// Regfile.scala:32:19
      reg [63:0] _RANDOM_MEM;	// Regfile.scala:32:19
    `endif // RANDOMIZE_MEM_INIT
    initial begin	// Regfile.scala:32:19
      `INIT_RANDOM_PROLOG_	// Regfile.scala:32:19
      `ifdef RANDOMIZE_MEM_INIT	// Regfile.scala:32:19
        for (initvar = 0; initvar < 32; initvar = initvar + 1) begin
          _RANDOM_MEM = {{`RANDOM}, {`RANDOM}};
          Memory[initvar] = _RANDOM_MEM[63:0];
        end	// Regfile.scala:32:19
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign R0_data = R0_en ? Memory[R0_addr] : 64'bx;	// Regfile.scala:32:19
  assign R1_data = R1_en ? Memory[R1_addr] : 64'bx;	// Regfile.scala:32:19
  assign R2_data = R2_en ? Memory[R2_addr] : 64'bx;	// Regfile.scala:32:19
endmodule

module Fetch(	// <stdin>:2:10
  input         clock,
                reset,
                io_fcfe_jump_flag,
  input  [63:0] io_fcfe_jump_pc,
  input         io_fcfe_flush,
                io_fcfe_stall,
  output [63:0] io_fdio_pc,
  output        io_pc_valid,
  output [63:0] io_pc_bits,
                io_next_pc);

  reg         started;	// Fetch.scala:25:26
  reg  [63:0] pc;	// Fetch.scala:28:21
  reg  [63:0] old_pc;	// Fetch.scala:29:25
  wire        _next_pc_T_2 = io_fcfe_flush & io_fcfe_jump_flag;	// Fetch.scala:36:36
  wire [63:0] _next_pc_T_4 = io_fcfe_jump_pc + 64'h4;	// Fetch.scala:36:85
  wire [63:0] _next_pc_T_7 = pc + 64'h4;	// Fetch.scala:28:21, :36:85, :37:37
  wire        _io_fdio_pc_T_2 = io_fcfe_flush & io_fcfe_jump_flag;	// Fetch.scala:51:36
  always @(posedge clock) begin
    if (reset) begin
      started <= 1'h0;	// Fetch.scala:25:26
      pc <= 64'h80000000;	// Fetch.scala:28:21
      old_pc <= 64'h0;	// Fetch.scala:29:25
    end
    else begin
      started <= 1'h1;	// Fetch.scala:25:26, :26:13
      if (io_fcfe_stall) begin
      end
      else begin
        if (_next_pc_T_2)	// Fetch.scala:36:36
          pc <= _next_pc_T_4;	// Fetch.scala:28:21, :36:85
        else if (started)	// Fetch.scala:25:26, :36:36
          pc <= _next_pc_T_7;	// Fetch.scala:28:21, :37:37
        if (_io_fdio_pc_T_2)	// Fetch.scala:51:36
          old_pc <= io_fcfe_jump_pc;	// Fetch.scala:29:25
        else	// Fetch.scala:51:36
          old_pc <= pc;	// Fetch.scala:28:21, :29:25
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:2:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2:10
        _RANDOM_3 = `RANDOM;	// <stdin>:2:10
        _RANDOM_4 = `RANDOM;	// <stdin>:2:10
        started = _RANDOM_0[0];	// Fetch.scala:25:26
        pc = {_RANDOM_0[31:1], _RANDOM_1, _RANDOM_2[0]};	// Fetch.scala:25:26, :28:21
        old_pc = {_RANDOM_2[31:1], _RANDOM_3, _RANDOM_4[0]};	// Fetch.scala:28:21, :29:25
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_fdio_pc = io_fcfe_stall ? old_pc : _io_fdio_pc_T_2 ? io_fcfe_jump_pc : pc;	// <stdin>:2:10, Fetch.scala:28:21, :29:25, :51:36, Mux.scala:101:16
  assign io_pc_valid = ~io_fcfe_stall & started;	// <stdin>:2:10, Fetch.scala:25:26, :65:23
  assign io_pc_bits = io_fcfe_stall ? old_pc : io_fcfe_flush & io_fcfe_jump_flag ? io_fcfe_jump_pc : pc;	// <stdin>:2:10, Fetch.scala:28:21, :29:25, :61:36, Mux.scala:101:16
  assign io_next_pc = _next_pc_T_2 ? _next_pc_T_4 : started ? _next_pc_T_7 : pc;	// <stdin>:2:10, Fetch.scala:25:26, :28:21, :36:{36,85}, :37:37, Mux.scala:101:16
endmodule

module ControlUnit(	// <stdin>:43:10
  input  [31:0] io_inst,
  output [1:0]  io_jump_type,
  output        io_branch_type,
  output [1:0]  io_opa_type,
  output [2:0]  io_opb_type,
                io_imm_type,
  output [5:0]  io_alu_op,
  output [1:0]  io_wb_type,
  output [2:0]  io_sd_type,
                io_ld_type,
  output [1:0]  io_csr_type);

  wire        _controlsig_T_1 = io_inst == 32'h13;	// Lookup.scala:31:38
  wire        _controlsig_T_3 = io_inst[6:0] == 7'h17;	// Lookup.scala:31:38
  wire        _controlsig_T_5 = io_inst[6:0] == 7'h37;	// Lookup.scala:31:38
  wire        _controlsig_T_7 = io_inst[6:0] == 7'h6F;	// Lookup.scala:31:38
  wire [9:0]  _GEN = {io_inst[14:12], io_inst[6:0]};	// Lookup.scala:31:38
  wire        _controlsig_T_9 = _GEN == 10'h67;	// Lookup.scala:31:38
  wire        _controlsig_T_11 = _GEN == 10'h63;	// Lookup.scala:31:38
  wire        _controlsig_T_13 = _GEN == 10'hE3;	// Lookup.scala:31:38
  wire        _controlsig_T_15 = _GEN == 10'h263;	// Lookup.scala:31:38
  wire        _controlsig_T_17 = _GEN == 10'h2E3;	// Lookup.scala:31:38
  wire        _controlsig_T_19 = _GEN == 10'h363;	// Lookup.scala:31:38
  wire        _controlsig_T_264 = _GEN == 10'h3E3;	// Lookup.scala:31:38
  wire        _controlsig_T_23 = _GEN == 10'h3;	// Lookup.scala:31:38
  wire        _controlsig_T_25 = _GEN == 10'h83;	// Lookup.scala:31:38
  wire        _controlsig_T_27 = _GEN == 10'h103;	// Lookup.scala:31:38
  wire        _controlsig_T_29 = _GEN == 10'h203;	// Lookup.scala:31:38
  wire        _controlsig_T_31 = _GEN == 10'h283;	// Lookup.scala:31:38
  wire        _controlsig_T_33 = _GEN == 10'h303;	// Lookup.scala:31:38
  wire        _controlsig_T_35 = _GEN == 10'h183;	// Lookup.scala:31:38
  wire        _controlsig_T_37 = _GEN == 10'h23;	// Lookup.scala:31:38
  wire        _controlsig_T_39 = _GEN == 10'hA3;	// Lookup.scala:31:38
  wire        _controlsig_T_41 = _GEN == 10'h123;	// Lookup.scala:31:38
  wire        _controlsig_T_43 = _GEN == 10'h1A3;	// Lookup.scala:31:38
  wire        _controlsig_T_45 = _GEN == 10'h13;	// Lookup.scala:31:38
  wire        _controlsig_T_47 = _GEN == 10'h113;	// Lookup.scala:31:38
  wire        _controlsig_T_49 = _GEN == 10'h193;	// Lookup.scala:31:38
  wire        _controlsig_T_51 = _GEN == 10'h213;	// Lookup.scala:31:38
  wire        _controlsig_T_53 = _GEN == 10'h313;	// Lookup.scala:31:38
  wire        _controlsig_T_55 = _GEN == 10'h393;	// Lookup.scala:31:38
  wire [15:0] _GEN_0 = {io_inst[31:26], io_inst[14:12], io_inst[6:0]};	// Lookup.scala:31:38
  wire        _controlsig_T_57 = _GEN_0 == 16'h93;	// Lookup.scala:31:38
  wire        _controlsig_T_59 = _GEN_0 == 16'h293;	// Lookup.scala:31:38
  wire        _controlsig_T_61 = _GEN_0 == 16'h4293;	// Lookup.scala:31:38
  wire [16:0] _GEN_1 = {io_inst[31:25], io_inst[14:12], io_inst[6:0]};	// Lookup.scala:31:38
  wire        _controlsig_T_63 = _GEN_1 == 17'h33;	// Lookup.scala:31:38
  wire        _controlsig_T_65 = _GEN_1 == 17'h8033;	// Lookup.scala:31:38
  wire        _controlsig_T_67 = _GEN_0 == 16'hB3;	// Lookup.scala:31:38
  wire        _controlsig_T_69 = _GEN_1 == 17'h133;	// Lookup.scala:31:38
  wire        _controlsig_T_71 = _GEN_1 == 17'h1B3;	// Lookup.scala:31:38
  wire        _controlsig_T_73 = _GEN_1 == 17'h233;	// Lookup.scala:31:38
  wire        _controlsig_T_75 = _GEN_1 == 17'h2B3;	// Lookup.scala:31:38
  wire        _controlsig_T_77 = _GEN_1 == 17'h82B3;	// Lookup.scala:31:38
  wire        _controlsig_T_79 = _GEN_1 == 17'h333;	// Lookup.scala:31:38
  wire        _controlsig_T_81 = _GEN_1 == 17'h3B3;	// Lookup.scala:31:38
  wire        _controlsig_T_83 = _GEN_1 == 17'h433;	// Lookup.scala:31:38
  wire        _controlsig_T_85 = _GEN_1 == 17'h4B3;	// Lookup.scala:31:38
  wire        _controlsig_T_87 = _GEN_1 == 17'h533;	// Lookup.scala:31:38
  wire        _controlsig_T_89 = _GEN_1 == 17'h5B3;	// Lookup.scala:31:38
  wire        _controlsig_T_91 = _GEN_1 == 17'h633;	// Lookup.scala:31:38
  wire        _controlsig_T_93 = _GEN_1 == 17'h6B3;	// Lookup.scala:31:38
  wire        _controlsig_T_95 = _GEN_1 == 17'h733;	// Lookup.scala:31:38
  wire        _controlsig_T_97 = _GEN_1 == 17'h7B3;	// Lookup.scala:31:38
  wire        _controlsig_T_99 = _GEN == 10'h1B;	// Lookup.scala:31:38
  wire        _controlsig_T_101 = _GEN_0 == 16'h9B;	// Lookup.scala:31:38
  wire        _controlsig_T_103 = _GEN_0 == 16'h29B;	// Lookup.scala:31:38
  wire        _controlsig_T_105 = _GEN_0 == 16'h429B;	// Lookup.scala:31:38
  wire        _controlsig_T_107 = _GEN_1 == 17'h3B;	// Lookup.scala:31:38
  wire        _controlsig_T_109 = _GEN_1 == 17'h803B;	// Lookup.scala:31:38
  wire        _controlsig_T_111 = _GEN_1 == 17'hBB;	// Lookup.scala:31:38
  wire        _controlsig_T_113 = _GEN_1 == 17'h2BB;	// Lookup.scala:31:38
  wire        _controlsig_T_115 = _GEN_1 == 17'h82BB;	// Lookup.scala:31:38
  wire        _controlsig_T_117 = _GEN_1 == 17'h43B;	// Lookup.scala:31:38
  wire        _controlsig_T_119 = _GEN_1 == 17'h63B;	// Lookup.scala:31:38
  wire        _controlsig_T_121 = _GEN_1 == 17'h6BB;	// Lookup.scala:31:38
  wire        _controlsig_T_123 = _GEN_1 == 17'h73B;	// Lookup.scala:31:38
  wire        _controlsig_T_125 = _GEN_1 == 17'h7BB;	// Lookup.scala:31:38
  wire        _controlsig_T_127 = _GEN == 10'hF3;	// Lookup.scala:31:38
  wire        _controlsig_T_129 = _GEN == 10'h173;	// Lookup.scala:31:38
  wire        _controlsig_T_131 = _GEN == 10'h1F3;	// Lookup.scala:31:38
  wire        _controlsig_T_133 = _GEN == 10'h2F3;	// Lookup.scala:31:38
  wire        _controlsig_T_135 = _GEN == 10'h373;	// Lookup.scala:31:38
  wire        _controlsig_T_137 = _GEN == 10'h3F3;	// Lookup.scala:31:38
  wire [1:0]  _controlsig_T_750 = {2{_controlsig_T_137}};	// Lookup.scala:31:38, :34:39
  wire        _GEN_2 = _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264 | _controlsig_T_23 | _controlsig_T_25 |
                _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 |
                _controlsig_T_35 | _controlsig_T_37 | _controlsig_T_39 | _controlsig_T_41 |
                _controlsig_T_43 | _controlsig_T_45 | _controlsig_T_47 | _controlsig_T_49 |
                _controlsig_T_51 | _controlsig_T_53 | _controlsig_T_55 | _controlsig_T_57 |
                _controlsig_T_59 | _controlsig_T_61 | _controlsig_T_63 | _controlsig_T_65 |
                _controlsig_T_67 | _controlsig_T_69;	// Lookup.scala:31:38, :34:39
  wire        _GEN_3 = _controlsig_T_71 | _controlsig_T_73 | _controlsig_T_75 | _controlsig_T_77 |
                _controlsig_T_79 | _controlsig_T_81 | _controlsig_T_83 | _controlsig_T_85 |
                _controlsig_T_87 | _controlsig_T_89 | _controlsig_T_91 | _controlsig_T_93 |
                _controlsig_T_95 | _controlsig_T_97 | _controlsig_T_99 | _controlsig_T_101 |
                _controlsig_T_103 | _controlsig_T_105 | _controlsig_T_107 | _controlsig_T_109 |
                _controlsig_T_111 | _controlsig_T_113 | _controlsig_T_115 | _controlsig_T_117 |
                _controlsig_T_119 | _controlsig_T_121 | _controlsig_T_123 | _controlsig_T_125 |
                _controlsig_T_127 | _controlsig_T_129 | _controlsig_T_131;	// Lookup.scala:31:38, :34:39
  wire        _GEN_4 = _controlsig_T_7 | _controlsig_T_9;	// Lookup.scala:31:38, :34:39
  wire        _GEN_5 = _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264;	// Lookup.scala:31:38, :34:39
  wire        _GEN_6 = _controlsig_T_3 | _controlsig_T_5;	// Lookup.scala:31:38, :34:39
  wire        _GEN_7 = _controlsig_T_45 | _controlsig_T_47 | _controlsig_T_49 | _controlsig_T_51 |
                _controlsig_T_53 | _controlsig_T_55 | _controlsig_T_57 | _controlsig_T_59 |
                _controlsig_T_61 | _controlsig_T_63 | _controlsig_T_65 | _controlsig_T_67 |
                _controlsig_T_69 | _controlsig_T_71 | _controlsig_T_73 | _controlsig_T_75 |
                _controlsig_T_77 | _controlsig_T_79 | _controlsig_T_81 | _controlsig_T_83 |
                _controlsig_T_85 | _controlsig_T_87;	// Lookup.scala:31:38, :34:39
  wire        _GEN_8 = _controlsig_T_89 | _controlsig_T_91 | _controlsig_T_93 | _controlsig_T_95 |
                _controlsig_T_97 | _controlsig_T_99 | _controlsig_T_101 | _controlsig_T_103 |
                _controlsig_T_105 | _controlsig_T_107 | _controlsig_T_109 | _controlsig_T_111 |
                _controlsig_T_113 | _controlsig_T_115 | _controlsig_T_117 | _controlsig_T_119 |
                _controlsig_T_121 | _controlsig_T_123 | _controlsig_T_125 | _controlsig_T_127 |
                _controlsig_T_129 | _controlsig_T_131 | ~(_controlsig_T_133 | _controlsig_T_135 |
                _controlsig_T_137);	// Lookup.scala:31:38, :34:39
  wire        _GEN_9 = _controlsig_T_37 | _controlsig_T_39 | _controlsig_T_41 | _controlsig_T_43;	// Lookup.scala:31:38, :34:39
  wire        _GEN_10 = _controlsig_T_3 | _controlsig_T_5 | _controlsig_T_7 | _controlsig_T_9;	// Lookup.scala:31:38, :34:39
  wire        _GEN_11 = _controlsig_T_45 | _controlsig_T_47 | _controlsig_T_49 | _controlsig_T_51 |
                _controlsig_T_53 | _controlsig_T_55 | _controlsig_T_57 | _controlsig_T_59 |
                _controlsig_T_61 | _controlsig_T_63 | _controlsig_T_65 | _controlsig_T_67 |
                _controlsig_T_69 | _controlsig_T_71 | _controlsig_T_73 | _controlsig_T_75 |
                _controlsig_T_77 | _controlsig_T_79 | _controlsig_T_81 | _controlsig_T_83;	// Lookup.scala:31:38, :34:39
  wire        _GEN_12 = _controlsig_T_85 | _controlsig_T_87 | _controlsig_T_89 | _controlsig_T_91 |
                _controlsig_T_93 | _controlsig_T_95 | _controlsig_T_97 | _controlsig_T_99 |
                _controlsig_T_101 | _controlsig_T_103 | _controlsig_T_105 | _controlsig_T_107 |
                _controlsig_T_109 | _controlsig_T_111 | _controlsig_T_113 | _controlsig_T_115 |
                _controlsig_T_117 | _controlsig_T_119 | _controlsig_T_121 | _controlsig_T_123 |
                _controlsig_T_125;	// Lookup.scala:31:38, :34:39
  wire        _GEN_13 = _controlsig_T_1 | _controlsig_T_3 | _controlsig_T_5 | _controlsig_T_7 | _controlsig_T_9 |
                _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264 | _controlsig_T_23 | _controlsig_T_25 |
                _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 |
                _controlsig_T_35 | _controlsig_T_37 | _controlsig_T_39 | _controlsig_T_41 |
                _controlsig_T_43 | _controlsig_T_45 | _controlsig_T_47 | _controlsig_T_49 |
                _controlsig_T_51 | _controlsig_T_53 | _controlsig_T_55 | _controlsig_T_57 |
                _controlsig_T_59 | _controlsig_T_61;	// Lookup.scala:31:38, :34:39
  wire        _GEN_14 = _controlsig_T_63 | _controlsig_T_65 | _controlsig_T_67 | _controlsig_T_69 |
                _controlsig_T_71 | _controlsig_T_73 | _controlsig_T_75 | _controlsig_T_77 |
                _controlsig_T_79 | _controlsig_T_81 | _controlsig_T_83 | _controlsig_T_85 |
                _controlsig_T_87 | _controlsig_T_89 | _controlsig_T_91 | _controlsig_T_93 |
                _controlsig_T_95 | _controlsig_T_97 | _controlsig_T_99 | _controlsig_T_101 |
                _controlsig_T_103 | _controlsig_T_105 | _controlsig_T_107 | _controlsig_T_109 |
                _controlsig_T_111 | _controlsig_T_113 | _controlsig_T_115 | _controlsig_T_117 |
                _controlsig_T_119 | _controlsig_T_121 | _controlsig_T_123 | _controlsig_T_125;	// Lookup.scala:31:38, :34:39
  assign io_jump_type = _controlsig_T_1 | _controlsig_T_3 | _controlsig_T_5 ? 2'h0 : _controlsig_T_7 ? 2'h1 :
                {_controlsig_T_9, 1'h0};	// <stdin>:43:10, Lookup.scala:31:38, :34:39
  assign io_branch_type = ~_controlsig_T_1 & ~_controlsig_T_3 & ~_controlsig_T_5 & ~_controlsig_T_7 &
                ~_controlsig_T_9 & (_controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 |
                _controlsig_T_17 | _controlsig_T_19 | _controlsig_T_264);	// <stdin>:43:10, Lookup.scala:31:38, :34:39
  assign io_opa_type = _controlsig_T_1 ? 2'h0 : _controlsig_T_3 ? 2'h1 : _controlsig_T_5 ? 2'h0 : _GEN_4 ? 2'h1 :
                _GEN_2 | _GEN_3 ? 2'h2 : _controlsig_T_133 | _controlsig_T_135 ? 2'h3 : _controlsig_T_750;	// <stdin>:43:10, Lookup.scala:31:38, :34:39
  assign io_opb_type = _controlsig_T_1 ? 3'h0 : _GEN_6 ? 3'h1 : _GEN_4 ? 3'h3 : _GEN_5 ? 3'h2 : _controlsig_T_23 |
                _controlsig_T_25 | _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 |
                _controlsig_T_33 | _controlsig_T_35 | _controlsig_T_37 | _controlsig_T_39 |
                _controlsig_T_41 | _controlsig_T_43 | _controlsig_T_45 | _controlsig_T_47 |
                _controlsig_T_49 | _controlsig_T_51 | _controlsig_T_53 | _controlsig_T_55 |
                _controlsig_T_57 | _controlsig_T_59 | _controlsig_T_61 ? 3'h1 : _controlsig_T_63 |
                _controlsig_T_65 | _controlsig_T_67 | _controlsig_T_69 | _controlsig_T_71 |
                _controlsig_T_73 | _controlsig_T_75 | _controlsig_T_77 | _controlsig_T_79 |
                _controlsig_T_81 | _controlsig_T_83 | _controlsig_T_85 | _controlsig_T_87 |
                _controlsig_T_89 | _controlsig_T_91 | _controlsig_T_93 | _controlsig_T_95 |
                _controlsig_T_97 ? 3'h2 : _controlsig_T_99 | _controlsig_T_101 | _controlsig_T_103 |
                _controlsig_T_105 ? 3'h1 : _controlsig_T_107 | _controlsig_T_109 | _controlsig_T_111 |
                _controlsig_T_113 | _controlsig_T_115 | _controlsig_T_117 | _controlsig_T_119 |
                _controlsig_T_121 | _controlsig_T_123 | _controlsig_T_125 ? 3'h2 : _controlsig_T_127 ? 3'h0
                : _controlsig_T_129 | _controlsig_T_131 ? 3'h4 : _controlsig_T_133 ? 3'h0 :
                _controlsig_T_135 ? 3'h4 : {_controlsig_T_137, 2'h0};	// <stdin>:43:10, Lookup.scala:31:38, :34:39
  assign io_imm_type = _controlsig_T_1 ? 3'h0 : _GEN_6 ? 3'h1 : _controlsig_T_7 ? 3'h2 : _controlsig_T_9 |
                _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264 | _controlsig_T_23 | _controlsig_T_25 |
                _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 |
                _controlsig_T_35 ? 3'h0 : _GEN_9 ? 3'h3 : _GEN_7 | _GEN_8 ? 3'h0 : 3'h5;	// <stdin>:43:10, Lookup.scala:31:38, :34:39
  assign io_alu_op = _controlsig_T_1 ? 6'h3F : _GEN_10 ? 6'h0 : _controlsig_T_11 ? 6'h2 : _controlsig_T_13 ?
                6'h3 : _controlsig_T_15 ? 6'h4 : _controlsig_T_17 ? 6'h5 : _controlsig_T_19 ? 6'h6 :
                _controlsig_T_264 ? 6'h7 : _controlsig_T_23 | _controlsig_T_25 | _controlsig_T_27 |
                _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 | _controlsig_T_35 |
                _controlsig_T_37 | _controlsig_T_39 | _controlsig_T_41 | _controlsig_T_43 |
                _controlsig_T_45 ? 6'h0 : _controlsig_T_47 ? 6'h4 : _controlsig_T_49 ? 6'h6 :
                _controlsig_T_51 ? 6'h8 : _controlsig_T_53 ? 6'h9 : _controlsig_T_55 ? 6'h10 :
                _controlsig_T_57 ? 6'hD : _controlsig_T_59 ? 6'hE : _controlsig_T_61 ? 6'hF :
                _controlsig_T_63 ? 6'h0 : _controlsig_T_65 ? 6'h1 : _controlsig_T_67 ? 6'hA :
                _controlsig_T_69 ? 6'h4 : _controlsig_T_71 ? 6'h6 : _controlsig_T_73 ? 6'h8 :
                _controlsig_T_75 ? 6'hB : _controlsig_T_77 ? 6'hC : _controlsig_T_79 ? 6'h9 :
                _controlsig_T_81 ? 6'h10 : _controlsig_T_83 ? 6'h12 : _controlsig_T_85 ? 6'h13 :
                _controlsig_T_87 ? 6'h14 : _controlsig_T_89 ? 6'h15 : _controlsig_T_91 ? 6'h16 :
                _controlsig_T_93 ? 6'h17 : _controlsig_T_95 ? 6'h18 : _controlsig_T_97 ? 6'h19 :
                _controlsig_T_99 ? 6'h1A : _controlsig_T_101 ? 6'h1B : _controlsig_T_103 ? 6'h1C :
                _controlsig_T_105 ? 6'h1D : _controlsig_T_107 ? 6'h1E : _controlsig_T_109 ? 6'h1F :
                _controlsig_T_111 ? 6'h20 : _controlsig_T_113 ? 6'h21 : _controlsig_T_115 ? 6'h22 :
                _controlsig_T_117 ? 6'h23 : _controlsig_T_119 ? 6'h24 : _controlsig_T_121 ? 6'h25 :
                _controlsig_T_123 ? 6'h26 : _controlsig_T_125 ? 6'h27 : _controlsig_T_127 ? 6'h0 :
                _controlsig_T_129 ? 6'h9 : _controlsig_T_131 ? 6'h28 : _controlsig_T_133 ? 6'h0 :
                _controlsig_T_135 ? 6'h9 : _controlsig_T_137 ? 6'h28 : 6'h3F;	// <stdin>:43:10, Lookup.scala:31:38, :34:39
  assign io_wb_type = _controlsig_T_1 ? 2'h0 : _GEN_10 ? 2'h1 : _GEN_5 ? 2'h0 : _controlsig_T_23 |
                _controlsig_T_25 | _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 |
                _controlsig_T_33 | _controlsig_T_35 ? 2'h2 : _GEN_9 ? 2'h0 : _GEN_11 | _GEN_12 ? 2'h1 :
                _controlsig_T_127 | _controlsig_T_129 | _controlsig_T_131 | _controlsig_T_133 |
                _controlsig_T_135 ? 2'h3 : _controlsig_T_750;	// <stdin>:43:10, Lookup.scala:31:38, :34:39
  assign io_sd_type = _controlsig_T_1 | _controlsig_T_3 | _controlsig_T_5 | _controlsig_T_7 | _controlsig_T_9 |
                _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264 | _controlsig_T_23 | _controlsig_T_25 |
                _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 |
                _controlsig_T_35 ? 3'h0 : _controlsig_T_37 ? 3'h1 : _controlsig_T_39 ? 3'h2 :
                _controlsig_T_41 ? 3'h3 : {_controlsig_T_43, 2'h0};	// <stdin>:43:10, Lookup.scala:31:38, :34:39
  assign io_ld_type = _controlsig_T_1 | _controlsig_T_3 | _controlsig_T_5 | _controlsig_T_7 | _controlsig_T_9 |
                _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264 ? 3'h0 : _controlsig_T_23 ? 3'h1 : _controlsig_T_25 ?
                3'h2 : _controlsig_T_27 ? 3'h3 : _controlsig_T_29 ? 3'h5 : _controlsig_T_31 ? 3'h6 :
                _controlsig_T_33 ? 3'h7 : {_controlsig_T_35, 2'h0};	// <stdin>:43:10, Lookup.scala:31:38, :34:39
  assign io_csr_type = _GEN_13 | _GEN_14 ? 2'h0 : _controlsig_T_127 ? 2'h1 : _controlsig_T_129 ? 2'h2 :
                _controlsig_T_131 ? 2'h3 : _controlsig_T_133 ? 2'h1 : _controlsig_T_135 ? 2'h2 :
                _controlsig_T_750;	// <stdin>:43:10, Lookup.scala:31:38, :34:39
endmodule

module Eximm(	// <stdin>:887:10
  input  [31:0] io_inst,
  input  [2:0]  io_imm_type,
  output [63:0] io_eximm);

  wire [7:0][63:0] _GEN = {{64'h0}, {64'h0}, {{59'h0, io_inst[19:15]}}, {{{52{io_inst[31]}}, io_inst[7],
                io_inst[30:25], io_inst[11:8], 1'h0}}, {{{52{io_inst[31]}}, io_inst[31:25],
                io_inst[11:7]}}, {{{44{io_inst[31]}}, io_inst[19:12], io_inst[20], io_inst[30:21], 1'h0}},
                {{{32{io_inst[31]}}, io_inst[31:12], 12'h0}}, {{{52{io_inst[31]}}, io_inst[31:20]}}};	// Bitwise.scala:77:12, Cat.scala:33:92, Eximm.scala:30:{42,56}, :31:56, :32:{56,72,85}, :33:{56,72}, :34:{69,81,97}, :35:29, Mux.scala:81:{58,61}
  assign io_eximm = _GEN[io_imm_type];	// <stdin>:887:10, Mux.scala:81:{58,61}
endmodule

module Decode(	// <stdin>:948:10
  input         clock,
                reset,
  input  [31:0] io_inst_bits,
  input  [63:0] io_fdio_pc,
                io_rfio_reg1_rdata,
                io_rfio_reg2_rdata,
  input         io_branch,
                io_fwde_fw_sel1,
                io_fwde_fw_sel2,
  input  [63:0] io_fwde_fw_data1,
                io_fwde_fw_data2,
  input         io_fwde_csr_fw_sel,
  input  [63:0] io_fwde_csr_fw_data,
                io_csrs_csr_rdata,
  output [4:0]  io_rfio_reg1_raddr,
                io_rfio_reg2_raddr,
  output [63:0] io_deio_op_a,
                io_deio_op_b,
  output [4:0]  io_deio_reg_waddr,
  output        io_deio_branch_type,
  output [63:0] io_deio_branch_addr,
  output [5:0]  io_deio_alu_op,
                io_deio_shamt,
  output [1:0]  io_deio_wb_type,
  output [2:0]  io_deio_sd_type,
  output [63:0] io_deio_reg2_rdata,
  output [2:0]  io_deio_ld_type,
  output [63:0] io_deio_csr_t,
  output [11:0] io_deio_csr_waddr,
  output        io_deio_csr_wen,
                io_deio_has_inst,
                io_jump_flag,
  output [63:0] io_jump_pc,
  output        io_load_use,
  output [4:0]  io_fwde_reg1_raddr,
                io_fwde_reg2_raddr,
  output [11:0] io_fwde_csr_raddr,
                io_csrs_csr_raddr);

  wire [63:0]      _eximm_io_eximm;	// Decode.scala:52:23
  wire [1:0]       _cu_io_jump_type;	// Decode.scala:51:20
  wire [1:0]       _cu_io_opa_type;	// Decode.scala:51:20
  wire [2:0]       _cu_io_opb_type;	// Decode.scala:51:20
  wire [2:0]       _cu_io_imm_type;	// Decode.scala:51:20
  wire [2:0]       _cu_io_sd_type;	// Decode.scala:51:20
  wire [2:0]       _cu_io_ld_type;	// Decode.scala:51:20
  wire [1:0]       _cu_io_csr_type;	// Decode.scala:51:20
  wire [31:0]      inst = io_inst_bits;	// Decode.scala:41:20
  reg  [4:0]       lu_rd;	// Decode.scala:68:24
  wire             _load_use_T_12 = inst[19:15] == lu_rd;	// Decode.scala:59:20, :60:16, :68:24, :75:64
  wire             _io_deio_op_b_T_6 = _cu_io_opb_type == 3'h2;	// Decode.scala:51:20, :75:95
  wire             _load_use_T_8 = inst[24:20] == lu_rd;	// Decode.scala:59:20, :61:16, :68:24, :75:125
  wire             _io_jump_pc_T_3 = _cu_io_jump_type == 2'h2;	// Decode.scala:51:20, :75:34, :76:65
  wire             _load_use_T_16 = (_cu_io_opa_type == 2'h2 & _load_use_T_12 | _io_deio_op_b_T_6 & _load_use_T_8 |
                (|_cu_io_sd_type) & _load_use_T_8 | _io_jump_pc_T_3 & _load_use_T_12) & (|lu_rd);	// Decode.scala:51:20, :68:24, :75:{34,57,64,95,118,125}, :76:{20,24,44,65,91}, :77:{7,17}
  wire [63:0]      _io_jump_pc_T_4 = io_fwde_fw_sel1 ? io_fwde_fw_data1 : io_rfio_reg1_rdata;	// Decode.scala:96:38
  wire [3:0][63:0] _GEN = {{_eximm_io_eximm}, {_io_jump_pc_T_4}, {io_fdio_pc}, {64'h0}};	// Decode.scala:52:23, :75:34, :96:38, Mux.scala:81:{58,61}
  wire [63:0]      _io_deio_reg2_rdata_T = io_fwde_fw_sel2 ? io_fwde_fw_data2 : io_rfio_reg2_rdata;	// Decode.scala:106:38
  wire [63:0]      _io_deio_csr_t_T = io_fwde_csr_fw_sel ? io_fwde_csr_fw_data : io_csrs_csr_rdata;	// Decode.scala:108:37
  wire             _io_jump_pc_T = _cu_io_jump_type == 2'h1;	// Decode.scala:51:20, :128:38, Mux.scala:81:61
  always @(posedge clock) begin
    if (reset)
      lu_rd <= 5'h0;	// Decode.scala:68:24
    else if (io_branch | _load_use_T_16 | _cu_io_ld_type == 3'h0)	// Decode.scala:51:20, :71:17, :73:32, :77:7
      lu_rd <= 5'h0;	// Decode.scala:68:24
    else	// Decode.scala:51:20, :71:17, :73:32, :77:7
      lu_rd <= inst[11:7];	// Decode.scala:59:20, :62:15, :68:24
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:948:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:948:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:948:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:948:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:948:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:948:10
        `INIT_RANDOM_PROLOG_	// <stdin>:948:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:948:10
        _RANDOM_0 = `RANDOM;	// <stdin>:948:10
        lu_rd = _RANDOM_0[4:0];	// Decode.scala:68:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:948:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:948:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  ControlUnit cu (	// Decode.scala:51:20
    .io_inst        (inst),	// Decode.scala:59:20
    .io_jump_type   (_cu_io_jump_type),
    .io_branch_type (io_deio_branch_type),
    .io_opa_type    (_cu_io_opa_type),
    .io_opb_type    (_cu_io_opb_type),
    .io_imm_type    (_cu_io_imm_type),
    .io_alu_op      (io_deio_alu_op),
    .io_wb_type     (io_deio_wb_type),
    .io_sd_type     (_cu_io_sd_type),
    .io_ld_type     (_cu_io_ld_type),
    .io_csr_type    (_cu_io_csr_type)
  );
  Eximm eximm (	// Decode.scala:52:23
    .io_inst     (inst),	// Decode.scala:59:20
    .io_imm_type (_cu_io_imm_type),	// Decode.scala:51:20
    .io_eximm    (_eximm_io_eximm)
  );
  assign io_rfio_reg1_raddr = inst[19:15];	// <stdin>:948:10, Decode.scala:59:20, :60:16
  assign io_rfio_reg2_raddr = inst[24:20];	// <stdin>:948:10, Decode.scala:59:20, :61:16
  assign io_deio_op_a = _GEN[_cu_io_opa_type];	// <stdin>:948:10, Decode.scala:51:20, :75:34, Mux.scala:81:{58,61}
  assign io_deio_op_b = _cu_io_opb_type == 3'h4 ? _io_deio_csr_t_T : _cu_io_opb_type == 3'h3 ? 64'h4 :
                _io_deio_op_b_T_6 ? _io_deio_reg2_rdata_T : _cu_io_opb_type == 3'h1 ? _eximm_io_eximm :
                64'h0;	// <stdin>:948:10, Decode.scala:51:20, :52:23, :75:95, :106:38, :108:37, Mux.scala:81:{58,61}
  assign io_deio_reg_waddr = inst[11:7];	// <stdin>:948:10, Decode.scala:59:20, :62:15
  assign io_deio_branch_addr = io_fdio_pc + {{52{inst[31]}}, inst[7], inst[30:25], inst[11:8], 1'h0};	// <stdin>:948:10, Cat.scala:33:92, Decode.scala:59:20, :73:17, :114:{39,58,79,88,101}
  assign io_deio_shamt = inst[25:20];	// <stdin>:948:10, Decode.scala:59:20, :63:18
  assign io_deio_sd_type = _cu_io_sd_type;	// <stdin>:948:10, Decode.scala:51:20
  assign io_deio_reg2_rdata = _io_deio_reg2_rdata_T;	// <stdin>:948:10, Decode.scala:106:38
  assign io_deio_ld_type = _cu_io_ld_type;	// <stdin>:948:10, Decode.scala:51:20
  assign io_deio_csr_t = _io_deio_csr_t_T;	// <stdin>:948:10, Decode.scala:108:37
  assign io_deio_csr_waddr = (|_cu_io_csr_type) ? inst[31:20] : 12'h0;	// <stdin>:948:10, Decode.scala:51:20, :59:20, :122:{29,45}
  assign io_deio_csr_wen = |_cu_io_csr_type;	// <stdin>:948:10, Decode.scala:51:20, :122:45
  assign io_deio_has_inst = inst != 32'h13;	// <stdin>:948:10, Decode.scala:58:16, :59:20, :125:35
  assign io_jump_flag = _io_jump_pc_T | _io_jump_pc_T_3;	// <stdin>:948:10, Decode.scala:76:65, :128:{38,63}
  assign io_jump_pc = _io_jump_pc_T ? io_fdio_pc + _eximm_io_eximm : _io_jump_pc_T_3 ? _io_jump_pc_T_4 +
                _eximm_io_eximm & 64'hFFFFFFFFFFFFFFFE : 64'h80000000;	// <stdin>:948:10, Decode.scala:52:23, :76:65, :96:38, :128:38, :132:71, :133:{121,139,142}, Mux.scala:101:16
  assign io_load_use = _load_use_T_16;	// <stdin>:948:10, Decode.scala:77:7
  assign io_fwde_reg1_raddr = inst[19:15];	// <stdin>:948:10, Decode.scala:59:20, :60:16
  assign io_fwde_reg2_raddr = inst[24:20];	// <stdin>:948:10, Decode.scala:59:20, :61:16
  assign io_fwde_csr_raddr = inst[31:20];	// <stdin>:948:10, Decode.scala:59:20
  assign io_csrs_csr_raddr = inst[31:20];	// <stdin>:948:10, Decode.scala:59:20
endmodule

module Alu(	// <stdin>:1085:10
  input  [63:0] io_op_a,
                io_op_b,
  input  [5:0]  io_alu_op,
                io_shamt,
  output [63:0] io_result);

  wire [64:0]  _GEN = {io_op_a[63], io_op_a};	// Alu.scala:78:13, :88:40
  wire [64:0]  _GEN_0 = {io_op_b[63], io_op_b};	// Alu.scala:79:13, :88:40
  wire [126:0] _GEN_1 = {63'h0, io_op_a};	// Alu.scala:98:33
  wire [126:0] _GEN_2 = {121'h0, io_op_b[5:0]};	// Alu.scala:98:{33,43}
  wire [63:0]  _GEN_3 = {58'h0, io_op_b[5:0]};	// Alu.scala:98:43, :99:33
  wire [63:0]  _res_T_34 = io_op_a >> _GEN_3;	// Alu.scala:99:33
  wire [63:0]  _res_T_38 = $signed($signed(io_op_a) >>> _GEN_3);	// Alu.scala:99:33, :100:40
  wire [126:0] _res_T_80 = _GEN_1 << io_shamt;	// Alu.scala:98:33, :101:34
  wire [63:0]  _GEN_4 = {58'h0, io_shamt};	// Alu.scala:99:33, :102:34
  wire [63:0]  _res_T_41 = io_op_a >> _GEN_4;	// Alu.scala:102:34
  wire [63:0]  _res_T_44 = $signed($signed(io_op_a) >>> _GEN_4);	// Alu.scala:102:34, :103:41
  wire [63:0]  _res_T_47 = io_op_a & io_op_b;	// Alu.scala:104:33
  wire [63:0]  _res_T_49 = ~_res_T_47;	// Alu.scala:104:33, :105:25
  wire [127:0] _GEN_5 = {{64{io_op_a[63]}}, io_op_a};	// Alu.scala:78:13, :106:34
  wire [127:0] _GEN_6 = _GEN_5 * {{64{io_op_b[63]}}, io_op_b};	// Alu.scala:79:13, :106:34
  wire [127:0] _GEN_7 = {64'h0, io_op_b};	// Alu.scala:108:37, Mux.scala:81:58
  wire [127:0] _GEN_8 = _GEN_5 * _GEN_7;	// Alu.scala:106:34, :108:37
  wire [127:0] _GEN_9 = {64'h0, io_op_a} * _GEN_7;	// Alu.scala:108:37, :109:36, Mux.scala:81:58
  wire [64:0]  _res_T_68 = $signed(_GEN) / $signed(_GEN_0);	// Alu.scala:88:40, :110:40
  wire [63:0]  _res_T_123 = io_op_a / io_op_b;	// Alu.scala:111:34
  wire [63:0]  _res_T_131 = io_op_a % io_op_b;	// Alu.scala:113:34
  wire [31:0]  _res_T_78 = io_op_a[31:0] + io_op_b[31:0];	// Alu.scala:114:36
  wire [31:0]  _GEN_10 = {26'h0, io_shamt};	// Alu.scala:116:42
  wire [31:0]  _res_T_85 = io_op_a[31:0] >> _GEN_10;	// Alu.scala:116:{35,42}
  wire [31:0]  _res_T_89 = $signed($signed(io_op_a[31:0]) >>> _GEN_10);	// Alu.scala:116:{35,42}, :117:49
  wire [31:0]  _res_T_98 = io_op_a[31:0] - io_op_b[31:0];	// Alu.scala:114:36, :119:35
  wire [126:0] _res_T_101 = _GEN_1 << _GEN_2;	// Alu.scala:98:33, :120:35
  wire [31:0]  _GEN_11 = {26'h0, io_op_b[5:0]};	// Alu.scala:98:43, :116:42, :121:41
  wire [31:0]  _res_T_107 = io_op_a[31:0] >> _GEN_11;	// Alu.scala:116:35, :121:41
  wire [31:0]  _res_T_112 = $signed($signed(io_op_a[31:0]) >>> _GEN_11);	// Alu.scala:116:35, :121:41, :122:48
  wire [64:0]  _res_T_120 = $signed(_GEN) / $signed(_GEN_0);	// Alu.scala:88:40, :124:42
  wire [63:0]  _res_T_128 = $signed(io_op_a) % $signed(io_op_b);	// Alu.scala:126:42
  wire [63:0]  _res_T_157 = io_alu_op == 6'h9 ? io_op_a | io_op_b : io_alu_op == 6'h8 ? io_op_a ^ io_op_b : io_alu_op
                == 6'h7 ? {63'h0, io_op_a >= io_op_b} : io_alu_op == 6'h6 ? {63'h0, io_op_a < io_op_b} :
                io_alu_op == 6'h5 ? {63'h0, $signed(io_op_a) >= $signed(io_op_b)} : io_alu_op == 6'h4 ?
                {63'h0, $signed(io_op_a) < $signed(io_op_b)} : io_alu_op == 6'h3 ? {63'h0, io_op_a !=
                io_op_b} : io_alu_op == 6'h2 ? {63'h0, io_op_a == io_op_b} : io_alu_op == 6'h1 ? io_op_a -
                io_op_b : io_alu_op == 6'h0 ? io_op_a + io_op_b : 64'h0;	// Alu.scala:88:40, :89:40, :90:33, :91:33, :92:40, :93:40, :94:34, :95:34, :96:33, :97:32, :98:33, Mux.scala:81:{58,61}
  wire [126:0] _res_T_177 = io_alu_op == 6'h13 ? {{63{_GEN_6[127]}}, _GEN_6[127:64]} : io_alu_op == 6'h12 ?
                {{63{_GEN_6[63]}}, _GEN_6[63:0]} : io_alu_op == 6'h11 ? {{63{_res_T_49[63]}}, _res_T_49} :
                io_alu_op == 6'h10 ? {{63{_res_T_47[63]}}, _res_T_47} : io_alu_op == 6'hF ?
                {{63{_res_T_44[63]}}, _res_T_44} : io_alu_op == 6'hE ? {{63{_res_T_41[63]}}, _res_T_41} :
                io_alu_op == 6'hD ? _res_T_80 : io_alu_op == 6'hC ? {{63{_res_T_38[63]}}, _res_T_38} :
                io_alu_op == 6'hB ? {{63{_res_T_34[63]}}, _res_T_34} : io_alu_op == 6'hA ? _GEN_1 << _GEN_2
                : {{63{_res_T_157[63]}}, _res_T_157};	// Alu.scala:98:33, :99:33, :100:40, :101:34, :102:34, :103:41, :104:33, :105:25, :106:{34,44}, :107:45, Mux.scala:81:{58,61}
  wire [63:0]  _GEN_12 = {{32{_res_T_78[31]}}, _res_T_78};	// Alu.scala:114:36, Mux.scala:81:58
  assign io_result = (&io_alu_op) ? 64'h0 : io_alu_op == 6'h28 ? ~io_op_a & io_op_b : io_alu_op == 6'h27 ?
                {{32{_res_T_131[31]}}, _res_T_131[31:0]} : io_alu_op == 6'h26 ? {{32{_res_T_128[31]}},
                _res_T_128[31:0]} : io_alu_op == 6'h25 ? {{32{_res_T_123[31]}}, _res_T_123[31:0]} :
                io_alu_op == 6'h24 ? {{32{_res_T_120[31]}}, _res_T_120[31:0]} : io_alu_op == 6'h23 ?
                {{32{_GEN_6[31]}}, _GEN_6[31:0]} : io_alu_op == 6'h22 ? {{32{_res_T_112[31]}}, _res_T_112}
                : io_alu_op == 6'h21 ? {{32{_res_T_107[31]}}, _res_T_107} : io_alu_op == 6'h20 ?
                {{32{_res_T_101[31]}}, _res_T_101[31:0]} : io_alu_op == 6'h1F ? {{32{_res_T_98[31]}},
                _res_T_98} : io_alu_op == 6'h1E ? _GEN_12 : io_alu_op == 6'h1D ? {{32{_res_T_89[31]}},
                _res_T_89} : io_alu_op == 6'h1C ? {{32{_res_T_85[31]}}, _res_T_85} : io_alu_op == 6'h1B ?
                {{32{_res_T_80[31]}}, _res_T_80[31:0]} : io_alu_op == 6'h1A ? _GEN_12 : io_alu_op == 6'h19
                ? _res_T_131 : io_alu_op == 6'h18 ? $signed(io_op_a) % $signed(io_op_b) : io_alu_op ==
                6'h17 ? _res_T_123 : io_alu_op == 6'h16 ? _res_T_68[63:0] : io_alu_op == 6'h15 ?
                _GEN_9[127:64] : io_alu_op == 6'h14 ? _GEN_8[127:64] : _res_T_177[63:0];	// <stdin>:1085:10, Alu.scala:101:34, :106:34, :108:{37,47}, :109:{36,46}, :110:40, :111:34, :112:40, :113:34, :115:48, :116:42, :117:49, :119:35, :120:{35,51}, :121:41, :122:48, :123:45, :124:{42,59}, :125:46, :126:{42,59}, :127:46, :129:{27,36}, Mux.scala:81:{58,61}
endmodule

module Excute(	// <stdin>:1327:10
  input  [63:0] io_deio_op_a,
                io_deio_op_b,
  input  [4:0]  io_deio_reg_waddr,
  input         io_deio_branch_type,
  input  [63:0] io_deio_branch_addr,
  input  [5:0]  io_deio_alu_op,
                io_deio_shamt,
  input  [1:0]  io_deio_wb_type,
  input  [2:0]  io_deio_sd_type,
  input  [63:0] io_deio_reg2_rdata,
  input  [2:0]  io_deio_ld_type,
  input  [63:0] io_deio_csr_t,
  input  [11:0] io_deio_csr_waddr,
  input         io_deio_csr_wen,
                io_deio_has_inst,
  output [63:0] io_emio_reg_wdata,
  output [4:0]  io_emio_reg_waddr,
  output [1:0]  io_emio_wb_type,
  output [2:0]  io_emio_ld_type,
                io_emio_ld_addr_lowbit,
  output [63:0] io_emio_csr_wdata,
  output        io_emio_csr_wen,
  output [11:0] io_emio_csr_waddr,
  output        io_emio_has_inst,
                io_jump_flag,
  output [63:0] io_jump_pc,
                io_raddr,
                io_waddr,
                io_wdata,
  output [7:0]  io_wmask,
  output [4:0]  io_fwex_reg_waddr,
  output [63:0] io_fwex_reg_wdata,
  output        io_fwex_reg_we,
  output [63:0] io_fwex_csr_wdata,
  output        io_fwex_csr_wen,
  output [11:0] io_fwex_csr_waddr);

  wire [63:0] _io_raddr_T_1;	// Excute.scala:59:20
  wire [63:0] _alu_io_result;	// Excute.scala:32:21
  assign _io_raddr_T_1 = (|io_deio_ld_type) ? _alu_io_result : 64'h0;	// Excute.scala:32:21, :59:{20,37}
  wire        _io_fwex_reg_wdata_T = io_deio_wb_type == 2'h1;	// Excute.scala:74:40
  Alu alu (	// Excute.scala:32:21
    .io_op_a   (io_deio_op_a),
    .io_op_b   (io_deio_op_b),
    .io_alu_op (io_deio_alu_op),
    .io_shamt  (io_deio_shamt),
    .io_result (_alu_io_result)
  );
  assign io_emio_reg_wdata = io_deio_csr_wen ? io_deio_csr_t : _alu_io_result;	// <stdin>:1327:10, Excute.scala:32:21, :40:29
  assign io_emio_reg_waddr = io_deio_reg_waddr;	// <stdin>:1327:10
  assign io_emio_wb_type = io_deio_wb_type;	// <stdin>:1327:10
  assign io_emio_ld_type = io_deio_ld_type;	// <stdin>:1327:10
  assign io_emio_ld_addr_lowbit = _io_raddr_T_1[2:0];	// <stdin>:1327:10, Excute.scala:45:39, :59:20
  assign io_emio_csr_wdata = _alu_io_result;	// <stdin>:1327:10, Excute.scala:32:21
  assign io_emio_csr_wen = io_deio_csr_wen;	// <stdin>:1327:10
  assign io_emio_csr_waddr = io_deio_csr_waddr;	// <stdin>:1327:10
  assign io_emio_has_inst = io_deio_has_inst;	// <stdin>:1327:10
  assign io_jump_flag = io_deio_branch_type & (|_alu_io_result);	// <stdin>:1327:10, Excute.scala:32:21, :55:{50,69}
  assign io_jump_pc = io_deio_branch_addr;	// <stdin>:1327:10
  assign io_raddr = _io_raddr_T_1;	// <stdin>:1327:10, Excute.scala:59:20
  assign io_waddr = (|io_deio_sd_type) ? _alu_io_result : 64'h0;	// <stdin>:1327:10, Excute.scala:32:21, :59:20, :61:{20,37}
  assign io_wdata = io_deio_reg2_rdata;	// <stdin>:1327:10
  assign io_wmask = io_deio_sd_type == 3'h4 ? 8'hFF : {4'h0, io_deio_sd_type == 3'h3 ? 4'hF : {2'h0,
                io_deio_sd_type == 3'h2 ? 2'h3 : {1'h0, io_deio_sd_type == 3'h1}}};	// <stdin>:1327:10, Mux.scala:81:{58,61}
  assign io_fwex_reg_waddr = io_deio_reg_waddr;	// <stdin>:1327:10
  assign io_fwex_reg_wdata = _io_fwex_reg_wdata_T ? _alu_io_result : (&io_deio_wb_type) ? io_deio_csr_t : 64'h0;	// <stdin>:1327:10, Excute.scala:32:21, :59:20, :74:{40,70}, Mux.scala:101:16
  assign io_fwex_reg_we = _io_fwex_reg_wdata_T | (&io_deio_wb_type);	// <stdin>:1327:10, Excute.scala:74:{40,51,70}
  assign io_fwex_csr_wdata = _alu_io_result;	// <stdin>:1327:10, Excute.scala:32:21
  assign io_fwex_csr_wen = io_deio_csr_wen;	// <stdin>:1327:10
  assign io_fwex_csr_waddr = io_deio_csr_waddr;	// <stdin>:1327:10
endmodule

module Mem(	// <stdin>:1385:10
  input  [63:0] io_emio_reg_wdata,
  input  [4:0]  io_emio_reg_waddr,
  input  [1:0]  io_emio_wb_type,
  input  [2:0]  io_emio_ld_type,
                io_emio_ld_addr_lowbit,
  input  [63:0] io_emio_csr_wdata,
  input         io_emio_csr_wen,
  input  [11:0] io_emio_csr_waddr,
  input         io_emio_has_inst,
  input  [63:0] io_rdata,
  output [63:0] io_mwio_reg_wdata,
  output [4:0]  io_mwio_reg_waddr,
  output [1:0]  io_mwio_wb_type,
  output [63:0] io_mwio_csr_wdata,
  output        io_mwio_csr_wen,
  output [11:0] io_mwio_csr_waddr,
  output        io_mwio_has_inst,
  output [4:0]  io_fwmem_reg_waddr,
  output [63:0] io_fwmem_reg_wdata,
  output        io_fwmem_reg_we,
  output [63:0] io_fwmem_csr_wdata,
  output        io_fwmem_csr_wen,
  output [11:0] io_fwmem_csr_waddr);

  wire [63:0]      rvalue;	// Mem.scala:24:22
  wire             _rvalue_T_148 = io_emio_ld_addr_lowbit == 3'h2;	// Mux.scala:81:61
  wire             _rvalue_T_162 = io_emio_ld_addr_lowbit == 3'h4;	// Mux.scala:81:61
  wire             _rvalue_T_152 = io_emio_ld_addr_lowbit == 3'h6;	// Mux.scala:81:61
  wire [7:0][63:0] _GEN = {{{{56{io_rdata[63]}}, io_rdata[63:56]}}, {{{56{io_rdata[55]}}, io_rdata[55:48]}},
                {{{56{io_rdata[47]}}, io_rdata[47:40]}}, {{{56{io_rdata[39]}}, io_rdata[39:32]}},
                {{{56{io_rdata[31]}}, io_rdata[31:24]}}, {{{56{io_rdata[23]}}, io_rdata[23:16]}},
                {{{56{io_rdata[15]}}, io_rdata[15:8]}}, {{{56{io_rdata[7]}}, io_rdata[7:0]}}};	// Bitwise.scala:77:12, Cat.scala:33:92, Mem.scala:30:{49,63}, :31:{49,64}, :32:{49,64}, :33:{49,64}, :34:{49,64}, :35:{49,64}, :36:{49,64}, :37:{49,64}, Mux.scala:81:{58,61}
  wire             _rvalue_T_160 = io_emio_ld_addr_lowbit == 3'h0;	// Mux.scala:81:61
  wire [7:0][7:0]  _GEN_0 = {{io_rdata[7:0]}, {io_rdata[7:0]}, {io_rdata[47:40]}, {io_rdata[39:32]}, {io_rdata[31:24]},
                {io_rdata[23:16]}, {io_rdata[15:8]}, {io_rdata[7:0]}};	// Mem.scala:30:63, :31:64, :32:64, :33:64, :34:64, :35:64, Mux.scala:81:{58,61}
  wire [7:0][63:0] _GEN_1 = {{_rvalue_T_162 ? {32'h0, io_rdata[63:32]} : _rvalue_T_160 ? {32'h0, io_rdata[31:0]} :
                64'h0}, {_rvalue_T_152 ? {48'h0, io_rdata[63:48]} : _rvalue_T_162 ? {48'h0,
                io_rdata[47:32]} : _rvalue_T_148 ? {48'h0, io_rdata[31:16]} : _rvalue_T_160 ? {48'h0,
                io_rdata[15:0]} : 64'h0}, {{56'h0, (&io_emio_ld_addr_lowbit) ? io_rdata[63:56] :
                _rvalue_T_152 ? io_rdata[55:48] : _GEN_0[io_emio_ld_addr_lowbit]}}, {io_rdata},
                {_rvalue_T_162 ? {{32{io_rdata[63]}}, io_rdata[63:32]} : _rvalue_T_160 ?
                {{32{io_rdata[31]}}, io_rdata[31:0]} : 64'h0}, {_rvalue_T_152 ? {{48{io_rdata[63]}},
                io_rdata[63:48]} : _rvalue_T_162 ? {{48{io_rdata[47]}}, io_rdata[47:32]} : _rvalue_T_148 ?
                {{48{io_rdata[31]}}, io_rdata[31:16]} : _rvalue_T_160 ? {{48{io_rdata[15]}},
                io_rdata[15:0]} : 64'h0}, {_GEN[io_emio_ld_addr_lowbit]}, {64'h0}};	// Bitwise.scala:77:12, Cat.scala:33:92, Mem.scala:31:49, :33:49, :35:49, :36:64, :37:{49,64}, :42:64, :43:64, :44:64, :45:64, :50:64, :51:64, Mux.scala:81:{58,61}
  assign rvalue = _GEN_1[io_emio_ld_type];	// Mem.scala:26:12, Mux.scala:81:{58,61}
  wire             _io_fwmem_reg_wdata_T = io_emio_wb_type == 2'h1;	// Mem.scala:90:30
  wire             _io_fwmem_reg_wdata_T_3 = io_emio_wb_type == 2'h2;	// Mem.scala:91:30, Mux.scala:81:61
  assign io_mwio_reg_wdata = _io_fwmem_reg_wdata_T | (&io_emio_wb_type) ? io_emio_reg_wdata : _io_fwmem_reg_wdata_T_3 ?
                rvalue : 64'h0;	// <stdin>:1385:10, Mem.scala:90:{30,41,60}, :91:30, Mux.scala:81:58, :101:16
  assign io_mwio_reg_waddr = io_emio_reg_waddr;	// <stdin>:1385:10
  assign io_mwio_wb_type = io_emio_wb_type;	// <stdin>:1385:10
  assign io_mwio_csr_wdata = io_emio_csr_wdata;	// <stdin>:1385:10
  assign io_mwio_csr_wen = io_emio_csr_wen;	// <stdin>:1385:10
  assign io_mwio_csr_waddr = io_emio_csr_waddr;	// <stdin>:1385:10
  assign io_mwio_has_inst = io_emio_has_inst;	// <stdin>:1385:10
  assign io_fwmem_reg_waddr = io_emio_reg_waddr;	// <stdin>:1385:10
  assign io_fwmem_reg_wdata = _io_fwmem_reg_wdata_T | (&io_emio_wb_type) ? io_emio_reg_wdata : _io_fwmem_reg_wdata_T_3 ?
                rvalue : 64'h0;	// <stdin>:1385:10, Mem.scala:90:{30,60}, :91:30, :105:41, Mux.scala:81:58, :101:16
  assign io_fwmem_reg_we = |io_emio_wb_type;	// <stdin>:1385:10, Mem.scala:102:40
  assign io_fwmem_csr_wdata = io_emio_csr_wdata;	// <stdin>:1385:10
  assign io_fwmem_csr_wen = io_emio_csr_wen;	// <stdin>:1385:10
  assign io_fwmem_csr_waddr = io_emio_csr_waddr;	// <stdin>:1385:10
endmodule

module Wb(	// <stdin>:1597:10
  input  [63:0] io_mwio_reg_wdata,
  input  [4:0]  io_mwio_reg_waddr,
  input  [1:0]  io_mwio_wb_type,
  input  [63:0] io_mwio_csr_wdata,
  input         io_mwio_csr_wen,
  input  [11:0] io_mwio_csr_waddr,
  input         io_mwio_has_inst,
  output [4:0]  io_rfio_rd,
  output        io_rfio_reg_wen,
  output [63:0] io_rfio_reg_wdata,
  output [4:0]  io_fwwb_reg_waddr,
  output [63:0] io_fwwb_reg_wdata,
  output        io_fwwb_reg_we,
  output [63:0] io_fwwb_csr_wdata,
  output        io_fwwb_csr_wen,
  output [11:0] io_fwwb_csr_waddr,
                io_csrs_rd,
  output        io_csrs_csr_wen,
  output [63:0] io_csrs_csr_wdata);

  assign io_rfio_rd = io_mwio_reg_waddr;	// <stdin>:1597:10
  assign io_rfio_reg_wen = |io_mwio_wb_type;	// <stdin>:1597:10, Wb.scala:30:40
  assign io_rfio_reg_wdata = io_mwio_reg_wdata;	// <stdin>:1597:10
  assign io_fwwb_reg_waddr = io_mwio_reg_waddr;	// <stdin>:1597:10
  assign io_fwwb_reg_wdata = io_mwio_reg_wdata;	// <stdin>:1597:10
  assign io_fwwb_reg_we = |io_mwio_wb_type;	// <stdin>:1597:10, Wb.scala:30:40
  assign io_fwwb_csr_wdata = io_mwio_csr_wdata;	// <stdin>:1597:10
  assign io_fwwb_csr_wen = io_mwio_csr_wen;	// <stdin>:1597:10
  assign io_fwwb_csr_waddr = io_mwio_csr_waddr;	// <stdin>:1597:10
  assign io_csrs_rd = io_mwio_csr_waddr;	// <stdin>:1597:10
  assign io_csrs_csr_wen = io_mwio_csr_wen;	// <stdin>:1597:10
  assign io_csrs_csr_wdata = io_mwio_csr_wdata;	// <stdin>:1597:10
endmodule

module Regfile(	// <stdin>:1619:10
  input         clock,
  input  [4:0]  io_RfDe_reg1_raddr,
                io_RfDe_reg2_raddr,
                io_RfWb_rd,
  input         io_RfWb_reg_wen,
  input  [63:0] io_RfWb_reg_wdata,
  output [63:0] io_RfDe_reg1_rdata,
                io_RfDe_reg2_rdata);

  wire [63:0] _regs_ext_R0_data;	// Regfile.scala:32:19
  wire [63:0] _regs_ext_R1_data;	// Regfile.scala:32:19
  wire [63:0] _regs_ext_R2_data;	// Regfile.scala:32:19
  regs_combMem regs_ext (	// Regfile.scala:32:19
    .R0_addr (io_RfWb_rd),
    .R0_en   (1'h1),	// <stdin>:1619:10
    .R0_clk  (clock),
    .R1_addr (io_RfDe_reg1_raddr),
    .R1_en   (1'h1),	// <stdin>:1619:10
    .R1_clk  (clock),
    .R2_addr (io_RfDe_reg2_raddr),
    .R2_en   (1'h1),	// <stdin>:1619:10
    .R2_clk  (clock),
    .W0_addr (5'h0),	// Regfile.scala:37:9
    .W0_en   (1'h1),	// <stdin>:1619:10
    .W0_clk  (clock),
    .W0_data (64'h0),	// Regfile.scala:37:13
    .W1_addr (io_RfWb_rd),
    .W1_en   (1'h1),	// <stdin>:1619:10
    .W1_clk  (clock),
    .W1_data (io_RfWb_reg_wen & (|io_RfWb_rd) ? io_RfWb_reg_wdata : _regs_ext_R0_data),	// Regfile.scala:32:19, :39:{28,45,60}
    .R0_data (_regs_ext_R0_data),
    .R1_data (_regs_ext_R1_data),
    .R2_data (_regs_ext_R2_data)
  );
  assign io_RfDe_reg1_rdata = (|io_RfDe_reg1_raddr) ? _regs_ext_R1_data : 64'h0;	// <stdin>:1619:10, Regfile.scala:32:19, :37:13, :48:{30,50}
  assign io_RfDe_reg2_rdata = (|io_RfDe_reg2_raddr) ? _regs_ext_R2_data : 64'h0;	// <stdin>:1619:10, Regfile.scala:32:19, :37:13, :49:{30,50}
endmodule

module FlowControl(	// <stdin>:1642:10
  input         io_fcde_jump_flag,
  input  [63:0] io_fcde_jump_pc,
  input         io_fcde_load_use,
                io_fcex_jump_flag,
  input  [63:0] io_fcex_jump_pc,
  input         io_fctr_pop_NOP,
  input  [1:0]  io_fctr_trap_state,
  input         io_fctr_jump_flag,
  input  [63:0] io_fctr_jump_pc,
  output        io_fcfe_jump_flag,
  output [63:0] io_fcfe_jump_pc,
  output        io_fcfe_flush,
                io_fcfe_stall,
                io_fcde_flush);

  wire _SFBundle_T_3 = io_fctr_pop_NOP | io_fctr_trap_state == 2'h1;	// FlowControl.scala:95:{38,60}
  assign io_fcfe_jump_flag = io_fcde_jump_flag | io_fcex_jump_flag | io_fctr_jump_flag;	// <stdin>:1642:10, FlowControl.scala:115:65
  assign io_fcfe_jump_pc = io_fctr_jump_flag ? io_fctr_jump_pc : io_fcex_jump_flag ? io_fcex_jump_pc :
                io_fcde_jump_flag ? io_fcde_jump_pc : 64'h80000000;	// <stdin>:1642:10, Mux.scala:101:16
  assign io_fcfe_flush = ~io_fcde_load_use & ~_SFBundle_T_3 & (io_fctr_jump_flag | io_fcex_jump_flag |
                io_fcde_jump_flag);	// <stdin>:1642:10, FlowControl.scala:95:38, Mux.scala:101:16
  assign io_fcfe_stall = io_fcde_load_use | _SFBundle_T_3;	// <stdin>:1642:10, FlowControl.scala:95:38, Mux.scala:101:16
  assign io_fcde_flush = io_fcde_load_use | _SFBundle_T_3 | ~io_fctr_jump_flag & io_fcex_jump_flag;	// <stdin>:1642:10, FlowControl.scala:95:38, Mux.scala:101:16
endmodule

module CSRs(	// <stdin>:1734:10
  input         clock,
                reset,
  input  [11:0] io_CSRDe_csr_raddr,
                io_CSRWb_rd,
  input         io_CSRWb_csr_wen,
  input  [63:0] io_CSRWb_csr_wdata,
  input  [11:0] io_CSRTr_rd,
  input         io_CSRTr_csr_wen,
  input  [63:0] io_CSRTr_csr_wdata,
  output [63:0] io_CSRDe_csr_rdata,
                io_CSRTr_MTVEC,
                io_CSRTr_MEPC,
                io_CSRTr_MSTATUS);

  reg [63:0] MTVEC;	// CSRs.scala:39:24
  reg [63:0] MCAUSE;	// CSRs.scala:40:25
  reg [63:0] MEPC;	// CSRs.scala:41:23
  reg [63:0] MIE;	// CSRs.scala:42:22
  reg [63:0] MSTATUS;	// CSRs.scala:43:26
  reg [63:0] MSCRATCH;	// CSRs.scala:44:27
  always @(posedge clock) begin
    if (reset) begin
      MTVEC <= 64'h0;	// CSRs.scala:39:24
      MCAUSE <= 64'h0;	// CSRs.scala:39:24, :40:25
      MEPC <= 64'h0;	// CSRs.scala:39:24, :41:23
      MIE <= 64'h0;	// CSRs.scala:39:24, :42:22
      MSTATUS <= 64'h0;	// CSRs.scala:39:24, :43:26
      MSCRATCH <= 64'h0;	// CSRs.scala:39:24, :44:27
    end
    else begin
      automatic logic [11:0] _T = io_CSRWb_rd | io_CSRTr_rd;	// CSRs.scala:47:24
      automatic logic        _T_1 = _T == 12'h305;	// CSRs.scala:47:{24,38}
      automatic logic        _T_2 = _T == 12'h342;	// CSRs.scala:47:{24,38}
      automatic logic        _T_3 = _T == 12'h341;	// CSRs.scala:47:{24,38}
      automatic logic        _T_4 = _T == 12'h304;	// CSRs.scala:47:{24,38}
      automatic logic        _T_5 = _T == 12'h300;	// CSRs.scala:47:{24,38}
      if (_T_1) begin	// CSRs.scala:47:38
        if (io_CSRWb_csr_wen)
          MTVEC <= io_CSRWb_csr_wdata;	// CSRs.scala:39:24
        else if (io_CSRTr_csr_wen)
          MTVEC <= io_CSRTr_csr_wdata;	// CSRs.scala:39:24
        else
          MTVEC <= 64'h0;	// CSRs.scala:39:24
      end
      if (_T_1 | ~_T_2) begin	// CSRs.scala:40:25, :47:38
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:40:25, :47:38
        MCAUSE <= io_CSRWb_csr_wdata;	// CSRs.scala:40:25
      else if (io_CSRTr_csr_wen)	// CSRs.scala:40:25, :47:38
        MCAUSE <= io_CSRTr_csr_wdata;	// CSRs.scala:40:25
      else	// CSRs.scala:40:25, :47:38
        MCAUSE <= 64'h0;	// CSRs.scala:39:24, :40:25
      if (_T_1 | _T_2 | ~_T_3) begin	// CSRs.scala:41:23, :47:38
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:41:23, :47:38
        MEPC <= io_CSRWb_csr_wdata;	// CSRs.scala:41:23
      else if (io_CSRTr_csr_wen)	// CSRs.scala:41:23, :47:38
        MEPC <= io_CSRTr_csr_wdata;	// CSRs.scala:41:23
      else	// CSRs.scala:41:23, :47:38
        MEPC <= 64'h0;	// CSRs.scala:39:24, :41:23
      if (_T_1 | _T_2 | _T_3 | ~_T_4) begin	// CSRs.scala:42:22, :47:38
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:42:22, :47:38
        MIE <= io_CSRWb_csr_wdata;	// CSRs.scala:42:22
      else if (io_CSRTr_csr_wen)	// CSRs.scala:42:22, :47:38
        MIE <= io_CSRTr_csr_wdata;	// CSRs.scala:42:22
      else	// CSRs.scala:42:22, :47:38
        MIE <= 64'h0;	// CSRs.scala:39:24, :42:22
      if (_T_1 | _T_2 | _T_3 | _T_4 | ~_T_5) begin	// CSRs.scala:43:26, :47:38
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:43:26, :47:38
        MSTATUS <= io_CSRWb_csr_wdata;	// CSRs.scala:43:26
      else if (io_CSRTr_csr_wen)	// CSRs.scala:43:26, :47:38
        MSTATUS <= io_CSRTr_csr_wdata;	// CSRs.scala:43:26
      else	// CSRs.scala:43:26, :47:38
        MSTATUS <= 64'h0;	// CSRs.scala:39:24, :43:26
      if (_T_1 | _T_2 | _T_3 | _T_4 | _T_5 | _T != 12'h340) begin	// CSRs.scala:44:27, :47:{24,38}
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:44:27, :47:{24,38}
        MSCRATCH <= io_CSRWb_csr_wdata;	// CSRs.scala:44:27
      else if (io_CSRTr_csr_wen)	// CSRs.scala:44:27, :47:{24,38}
        MSCRATCH <= io_CSRTr_csr_wdata;	// CSRs.scala:44:27
      else	// CSRs.scala:44:27, :47:{24,38}
        MSCRATCH <= 64'h0;	// CSRs.scala:39:24, :44:27
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1734:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1734:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1734:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1734:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1734:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1734:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1734:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:1734:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:1734:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:1734:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:1734:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:1734:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:1734:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:1734:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:1734:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:1734:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1734:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1734:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1734:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1734:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1734:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1734:10
        _RANDOM_3 = `RANDOM;	// <stdin>:1734:10
        _RANDOM_4 = `RANDOM;	// <stdin>:1734:10
        _RANDOM_5 = `RANDOM;	// <stdin>:1734:10
        _RANDOM_6 = `RANDOM;	// <stdin>:1734:10
        _RANDOM_7 = `RANDOM;	// <stdin>:1734:10
        _RANDOM_8 = `RANDOM;	// <stdin>:1734:10
        _RANDOM_9 = `RANDOM;	// <stdin>:1734:10
        _RANDOM_10 = `RANDOM;	// <stdin>:1734:10
        _RANDOM_11 = `RANDOM;	// <stdin>:1734:10
        MTVEC = {_RANDOM_0, _RANDOM_1};	// CSRs.scala:39:24
        MCAUSE = {_RANDOM_2, _RANDOM_3};	// CSRs.scala:40:25
        MEPC = {_RANDOM_4, _RANDOM_5};	// CSRs.scala:41:23
        MIE = {_RANDOM_6, _RANDOM_7};	// CSRs.scala:42:22
        MSTATUS = {_RANDOM_8, _RANDOM_9};	// CSRs.scala:43:26
        MSCRATCH = {_RANDOM_10, _RANDOM_11};	// CSRs.scala:44:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1734:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1734:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_CSRDe_csr_rdata = io_CSRDe_csr_raddr == 12'h340 ? MSCRATCH : io_CSRDe_csr_raddr == 12'h300 ? MSTATUS :
                io_CSRDe_csr_raddr == 12'h304 ? MIE : io_CSRDe_csr_raddr == 12'h341 ? MEPC :
                io_CSRDe_csr_raddr == 12'h342 ? MCAUSE : io_CSRDe_csr_raddr == 12'h305 ? MTVEC : 64'h0;	// <stdin>:1734:10, CSRs.scala:39:24, :40:25, :41:23, :42:22, :43:26, :44:27, :47:38, Mux.scala:81:{58,61}
  assign io_CSRTr_MTVEC = MTVEC;	// <stdin>:1734:10, CSRs.scala:39:24
  assign io_CSRTr_MEPC = MEPC;	// <stdin>:1734:10, CSRs.scala:41:23
  assign io_CSRTr_MSTATUS = MSTATUS;	// <stdin>:1734:10, CSRs.scala:43:26
endmodule

module Trap(	// <stdin>:1805:10
  input         clock,
                reset,
                io_ex_hasinst,
                io_mem_hasinst,
                io_wb_hasinst,
  input  [63:0] io_csrtr_MTVEC,
                io_csrtr_MEPC,
                io_csrtr_MSTATUS,
  input  [31:0] io_inst,
  input  [63:0] io_pc,
  output [11:0] io_csrtr_rd,
  output        io_csrtr_csr_wen,
  output [63:0] io_csrtr_csr_wdata,
  output        io_fctr_pop_NOP,
  output [1:0]  io_fctr_trap_state,
  output        io_fctr_jump_flag,
  output [63:0] io_fctr_jump_pc);

  reg  [63:0]      cause;	// Trap.scala:44:24
  reg  [63:0]      pc;	// Trap.scala:45:21
  reg  [2:0]       state;	// Trap.scala:48:24
  wire             _T = state == 3'h0;	// Trap.scala:48:24, :62:18
  wire             _T_1 = io_inst == 32'h73;	// Trap.scala:69:26
  wire             _T_2 = io_inst == 32'h30200073;	// Trap.scala:77:32
  wire [7:0][63:0] _GEN = {{64'h0}, {64'h0}, {64'h0}, {{io_csrtr_MSTATUS[63:8], io_csrtr_MSTATUS[3],
                io_csrtr_MSTATUS[6:4], 1'h0, io_csrtr_MSTATUS[2:0]}}, {cause}, {pc}, {64'h0}, {64'h0}};	// Cat.scala:33:92, Trap.scala:44:24, :45:21, :54:24, :62:18, :65:32, :90:32, :97:32, :105:{32,55,79,100,133}
  wire [7:0][11:0] _GEN_0 = {{12'h0}, {12'h0}, {12'h0}, {12'h300}, {12'h342}, {12'h341}, {12'h0}, {12'h0}};	// Trap.scala:59:17, :62:18, :67:25, :92:25, :99:25, :107:25
  wire             _T_19 = state == 3'h4;	// Trap.scala:48:24, :71:29, :124:18
  wire             _T_20 = state == 3'h6;	// Trap.scala:48:24, :113:23, :124:18
  always @(posedge clock) begin
    if (reset) begin
      cause <= 64'h0;	// Trap.scala:44:24
      pc <= 64'h0;	// Trap.scala:44:24, :45:21
      state <= 3'h0;	// Trap.scala:48:24
    end
    else begin
      automatic logic            _GEN_1 = io_ex_hasinst | io_mem_hasinst | io_wb_hasinst;	// Trap.scala:48:24, :85:70, :86:23
      automatic logic [7:0][2:0] _GEN_2;	// Trap.scala:48:24, :62:18, :69:57, :85:70, :94:19, :101:19, :109:19, :112:70, :117:19
      if (_T & _T_1) begin	// Trap.scala:45:21, :62:18, :69:{26,57}
        cause <= 64'hB;	// Trap.scala:44:24, :72:23
        pc <= io_pc + 64'h4;	// Trap.scala:45:21, :71:29
      end
      _GEN_2 = {{state}, {3'h0}, {_GEN_1 ? state : 3'h6}, {3'h0}, {3'h4}, {3'h3}, {_GEN_1 ? state : 3'h2},
                                                {_T_1 ? 3'h1 : _T_2 ? 3'h5 : state}};	// Trap.scala:48:24, :62:18, :69:{26,57}, :71:29, :76:23, :77:{32,62}, :80:23, :85:70, :86:23, :94:19, :101:19, :109:19, :112:70, :113:23, :117:19
      state <= _GEN_2[state];	// Trap.scala:48:24, :62:18, :69:57, :85:70, :94:19, :101:19, :109:19, :112:70, :117:19
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1805:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1805:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1805:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1805:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1805:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1805:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1805:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:1805:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:1805:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1805:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1805:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1805:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1805:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1805:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1805:10
        _RANDOM_3 = `RANDOM;	// <stdin>:1805:10
        _RANDOM_4 = `RANDOM;	// <stdin>:1805:10
        cause = {_RANDOM_0, _RANDOM_1};	// Trap.scala:44:24
        pc = {_RANDOM_2, _RANDOM_3};	// Trap.scala:45:21
        state = _RANDOM_4[2:0];	// Trap.scala:48:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1805:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1805:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_csrtr_rd = _GEN_0[state];	// <stdin>:1805:10, Trap.scala:48:24, :59:17, :62:18, :67:25, :92:25, :99:25, :107:25
  assign io_csrtr_csr_wen = ~_T & state != 3'h1 & (state == 3'h2 | state == 3'h3 | state == 3'h4);	// <stdin>:1805:10, Trap.scala:48:24, :62:18, :66:30, :71:29, :76:23, :86:23, :91:30, :94:19
  assign io_csrtr_csr_wdata = _GEN[state];	// <stdin>:1805:10, Trap.scala:48:24, :54:24, :62:18, :65:32, :90:32, :97:32, :105:32
  assign io_fctr_pop_NOP = _T & (_T_1 | _T_2);	// <stdin>:1805:10, Trap.scala:60:21, :62:18, :69:{26,57}, :75:33, :77:{32,62}
  assign io_fctr_trap_state = state[1:0];	// <stdin>:1805:10, Trap.scala:48:24, :51:24
  assign io_fctr_jump_flag = _T_19 | _T_20;	// <stdin>:1805:10, Trap.scala:124:18, :126:31
  assign io_fctr_jump_pc = _T_19 ? io_csrtr_MTVEC : _T_20 ? io_csrtr_MEPC : 64'h0;	// <stdin>:1805:10, Trap.scala:44:24, :123:21, :124:18, :127:29, :131:29
endmodule

module Forward(	// <stdin>:1904:10
  input  [4:0]  io_fwde_reg1_raddr,
                io_fwde_reg2_raddr,
  input  [11:0] io_fwde_csr_raddr,
  input  [4:0]  io_fwex_reg_waddr,
  input  [63:0] io_fwex_reg_wdata,
  input         io_fwex_reg_we,
  input  [63:0] io_fwex_csr_wdata,
  input         io_fwex_csr_wen,
  input  [11:0] io_fwex_csr_waddr,
  input  [4:0]  io_fwmem_reg_waddr,
  input  [63:0] io_fwmem_reg_wdata,
  input         io_fwmem_reg_we,
  input  [63:0] io_fwmem_csr_wdata,
  input         io_fwmem_csr_wen,
  input  [11:0] io_fwmem_csr_waddr,
  input  [4:0]  io_fwwb_reg_waddr,
  input  [63:0] io_fwwb_reg_wdata,
  input         io_fwwb_reg_we,
  input  [63:0] io_fwwb_csr_wdata,
  input         io_fwwb_csr_wen,
  input  [11:0] io_fwwb_csr_waddr,
  output        io_fwde_fw_sel1,
                io_fwde_fw_sel2,
  output [63:0] io_fwde_fw_data1,
                io_fwde_fw_data2,
  output        io_fwde_csr_fw_sel,
  output [63:0] io_fwde_csr_fw_data);

  wire reg1_ex_hazard = (|io_fwde_reg1_raddr) & io_fwex_reg_we & io_fwex_reg_waddr == io_fwde_reg1_raddr;	// Forward.scala:46:{46,73,95}
  wire reg2_ex_hazard = (|io_fwde_reg2_raddr) & io_fwex_reg_we & io_fwex_reg_waddr == io_fwde_reg2_raddr;	// Forward.scala:47:{46,73,95}
  wire reg1_mem_hazard = (|io_fwde_reg1_raddr) & io_fwmem_reg_we & io_fwmem_reg_waddr == io_fwde_reg1_raddr;	// Forward.scala:46:46, :49:{75,98}
  wire reg2_mem_hazard = (|io_fwde_reg2_raddr) & io_fwmem_reg_we & io_fwmem_reg_waddr == io_fwde_reg2_raddr;	// Forward.scala:47:46, :50:{75,98}
  wire reg1_wb_hazard = (|io_fwde_reg1_raddr) & io_fwwb_reg_we & io_fwwb_reg_waddr == io_fwde_reg1_raddr;	// Forward.scala:46:46, :52:{73,95}
  wire reg2_wb_hazard = (|io_fwde_reg2_raddr) & io_fwwb_reg_we & io_fwwb_reg_waddr == io_fwde_reg2_raddr;	// Forward.scala:47:46, :53:{73,95}
  wire csr_ex_harzard = io_fwex_csr_wen & io_fwex_csr_waddr == io_fwde_csr_raddr;	// Forward.scala:74:{42,64}
  wire csr_mem_harzard = io_fwmem_csr_wen & io_fwmem_csr_waddr == io_fwde_csr_raddr;	// Forward.scala:75:{44,67}
  wire csr_wb_harzard = io_fwwb_csr_wen & io_fwwb_csr_waddr == io_fwde_csr_raddr;	// Forward.scala:76:{42,64}
  assign io_fwde_fw_sel1 = reg1_ex_hazard | reg1_mem_hazard | reg1_wb_hazard;	// <stdin>:1904:10, Forward.scala:46:73, :49:75, :52:73, :55:57
  assign io_fwde_fw_sel2 = reg2_ex_hazard | reg2_mem_hazard | reg2_wb_hazard;	// <stdin>:1904:10, Forward.scala:47:73, :50:75, :53:73, :56:57
  assign io_fwde_fw_data1 = reg1_ex_hazard ? io_fwex_reg_wdata : reg1_mem_hazard ? io_fwmem_reg_wdata : reg1_wb_hazard
                ? io_fwwb_reg_wdata : 64'h0;	// <stdin>:1904:10, Forward.scala:46:73, :49:75, :52:73, Mux.scala:101:16
  assign io_fwde_fw_data2 = reg2_ex_hazard ? io_fwex_reg_wdata : reg2_mem_hazard ? io_fwmem_reg_wdata : reg2_wb_hazard
                ? io_fwwb_reg_wdata : 64'h0;	// <stdin>:1904:10, Forward.scala:47:73, :50:75, :53:73, Mux.scala:101:16
  assign io_fwde_csr_fw_sel = csr_ex_harzard | csr_mem_harzard | csr_wb_harzard;	// <stdin>:1904:10, Forward.scala:74:42, :75:44, :76:42, :78:60
  assign io_fwde_csr_fw_data = csr_ex_harzard ? io_fwex_csr_wdata : csr_mem_harzard ? io_fwmem_csr_wdata : csr_wb_harzard
                ? io_fwwb_csr_wdata : 64'h0;	// <stdin>:1904:10, Forward.scala:74:42, :75:44, :76:42, Mux.scala:101:16
endmodule

// external module DebugInterface

// external module Interact

module Core(	// <stdin>:1989:10
  input         clock,
                reset,
  input  [63:0] io_inst,
                io_rdata,
  output [63:0] io_pc,
  output        io_valid,
                io_load_use,
  output [63:0] io_raddr,
                io_waddr,
                io_wdata,
  output [7:0]  io_wmask,
  output [63:0] io_next_pc);

  wire        _fw_io_fwde_fw_sel1;	// Core.scala:411:20
  wire        _fw_io_fwde_fw_sel2;	// Core.scala:411:20
  wire [63:0] _fw_io_fwde_fw_data1;	// Core.scala:411:20
  wire [63:0] _fw_io_fwde_fw_data2;	// Core.scala:411:20
  wire        _fw_io_fwde_csr_fw_sel;	// Core.scala:411:20
  wire [63:0] _fw_io_fwde_csr_fw_data;	// Core.scala:411:20
  wire [11:0] _trap_io_csrtr_rd;	// Core.scala:105:22
  wire        _trap_io_csrtr_csr_wen;	// Core.scala:105:22
  wire [63:0] _trap_io_csrtr_csr_wdata;	// Core.scala:105:22
  wire        _trap_io_fctr_pop_NOP;	// Core.scala:105:22
  wire [1:0]  _trap_io_fctr_trap_state;	// Core.scala:105:22
  wire        _trap_io_fctr_jump_flag;	// Core.scala:105:22
  wire [63:0] _trap_io_fctr_jump_pc;	// Core.scala:105:22
  wire [63:0] _csrs_io_CSRDe_csr_rdata;	// Core.scala:102:22
  wire [63:0] _csrs_io_CSRTr_MTVEC;	// Core.scala:102:22
  wire [63:0] _csrs_io_CSRTr_MEPC;	// Core.scala:102:22
  wire [63:0] _csrs_io_CSRTr_MSTATUS;	// Core.scala:102:22
  wire        _fc_io_fcfe_jump_flag;	// Core.scala:99:20
  wire [63:0] _fc_io_fcfe_jump_pc;	// Core.scala:99:20
  wire        _fc_io_fcfe_flush;	// Core.scala:99:20
  wire        _fc_io_fcfe_stall;	// Core.scala:99:20
  wire        _fc_io_fcde_flush;	// Core.scala:99:20
  wire [63:0] _regfile_io_RfDe_reg1_rdata;	// Core.scala:96:25
  wire [63:0] _regfile_io_RfDe_reg2_rdata;	// Core.scala:96:25
  wire [4:0]  _wb_io_rfio_rd;	// Core.scala:41:20
  wire        _wb_io_rfio_reg_wen;	// Core.scala:41:20
  wire [63:0] _wb_io_rfio_reg_wdata;	// Core.scala:41:20
  wire [4:0]  _wb_io_fwwb_reg_waddr;	// Core.scala:41:20
  wire [63:0] _wb_io_fwwb_reg_wdata;	// Core.scala:41:20
  wire        _wb_io_fwwb_reg_we;	// Core.scala:41:20
  wire [63:0] _wb_io_fwwb_csr_wdata;	// Core.scala:41:20
  wire        _wb_io_fwwb_csr_wen;	// Core.scala:41:20
  wire [11:0] _wb_io_fwwb_csr_waddr;	// Core.scala:41:20
  wire [11:0] _wb_io_csrs_rd;	// Core.scala:41:20
  wire        _wb_io_csrs_csr_wen;	// Core.scala:41:20
  wire [63:0] _wb_io_csrs_csr_wdata;	// Core.scala:41:20
  wire [63:0] _mem_io_mwio_reg_wdata;	// Core.scala:40:21
  wire [4:0]  _mem_io_mwio_reg_waddr;	// Core.scala:40:21
  wire [1:0]  _mem_io_mwio_wb_type;	// Core.scala:40:21
  wire [63:0] _mem_io_mwio_csr_wdata;	// Core.scala:40:21
  wire        _mem_io_mwio_csr_wen;	// Core.scala:40:21
  wire [11:0] _mem_io_mwio_csr_waddr;	// Core.scala:40:21
  wire        _mem_io_mwio_has_inst;	// Core.scala:40:21
  wire [4:0]  _mem_io_fwmem_reg_waddr;	// Core.scala:40:21
  wire [63:0] _mem_io_fwmem_reg_wdata;	// Core.scala:40:21
  wire        _mem_io_fwmem_reg_we;	// Core.scala:40:21
  wire [63:0] _mem_io_fwmem_csr_wdata;	// Core.scala:40:21
  wire        _mem_io_fwmem_csr_wen;	// Core.scala:40:21
  wire [11:0] _mem_io_fwmem_csr_waddr;	// Core.scala:40:21
  wire [63:0] _excute_io_emio_reg_wdata;	// Core.scala:38:24
  wire [4:0]  _excute_io_emio_reg_waddr;	// Core.scala:38:24
  wire [1:0]  _excute_io_emio_wb_type;	// Core.scala:38:24
  wire [2:0]  _excute_io_emio_ld_type;	// Core.scala:38:24
  wire [2:0]  _excute_io_emio_ld_addr_lowbit;	// Core.scala:38:24
  wire [63:0] _excute_io_emio_csr_wdata;	// Core.scala:38:24
  wire        _excute_io_emio_csr_wen;	// Core.scala:38:24
  wire [11:0] _excute_io_emio_csr_waddr;	// Core.scala:38:24
  wire        _excute_io_emio_has_inst;	// Core.scala:38:24
  wire        _excute_io_jump_flag;	// Core.scala:38:24
  wire [63:0] _excute_io_jump_pc;	// Core.scala:38:24
  wire [63:0] _excute_io_raddr;	// Core.scala:38:24
  wire [63:0] _excute_io_waddr;	// Core.scala:38:24
  wire [4:0]  _excute_io_fwex_reg_waddr;	// Core.scala:38:24
  wire [63:0] _excute_io_fwex_reg_wdata;	// Core.scala:38:24
  wire        _excute_io_fwex_reg_we;	// Core.scala:38:24
  wire [63:0] _excute_io_fwex_csr_wdata;	// Core.scala:38:24
  wire        _excute_io_fwex_csr_wen;	// Core.scala:38:24
  wire [11:0] _excute_io_fwex_csr_waddr;	// Core.scala:38:24
  wire [4:0]  _decode_io_rfio_reg1_raddr;	// Core.scala:37:24
  wire [4:0]  _decode_io_rfio_reg2_raddr;	// Core.scala:37:24
  wire [63:0] _decode_io_deio_op_a;	// Core.scala:37:24
  wire [63:0] _decode_io_deio_op_b;	// Core.scala:37:24
  wire [4:0]  _decode_io_deio_reg_waddr;	// Core.scala:37:24
  wire        _decode_io_deio_branch_type;	// Core.scala:37:24
  wire [63:0] _decode_io_deio_branch_addr;	// Core.scala:37:24
  wire [5:0]  _decode_io_deio_alu_op;	// Core.scala:37:24
  wire [5:0]  _decode_io_deio_shamt;	// Core.scala:37:24
  wire [1:0]  _decode_io_deio_wb_type;	// Core.scala:37:24
  wire [2:0]  _decode_io_deio_sd_type;	// Core.scala:37:24
  wire [63:0] _decode_io_deio_reg2_rdata;	// Core.scala:37:24
  wire [2:0]  _decode_io_deio_ld_type;	// Core.scala:37:24
  wire [63:0] _decode_io_deio_csr_t;	// Core.scala:37:24
  wire [11:0] _decode_io_deio_csr_waddr;	// Core.scala:37:24
  wire        _decode_io_deio_csr_wen;	// Core.scala:37:24
  wire        _decode_io_deio_has_inst;	// Core.scala:37:24
  wire        _decode_io_jump_flag;	// Core.scala:37:24
  wire [63:0] _decode_io_jump_pc;	// Core.scala:37:24
  wire        _decode_io_load_use;	// Core.scala:37:24
  wire [4:0]  _decode_io_fwde_reg1_raddr;	// Core.scala:37:24
  wire [4:0]  _decode_io_fwde_reg2_raddr;	// Core.scala:37:24
  wire [11:0] _decode_io_fwde_csr_raddr;	// Core.scala:37:24
  wire [11:0] _decode_io_csrs_csr_raddr;	// Core.scala:37:24
  wire [63:0] _fetch_io_fdio_pc;	// Core.scala:36:23
  wire        _fetch_io_pc_valid;	// Core.scala:36:23
  wire [63:0] _fetch_io_pc_bits;	// Core.scala:36:23
  reg  [63:0] fdreg_pc;	// Core.scala:46:24
  reg  [63:0] dereg_op_a;	// Core.scala:51:24
  reg  [63:0] dereg_op_b;	// Core.scala:51:24
  reg  [4:0]  dereg_reg_waddr;	// Core.scala:51:24
  reg         dereg_branch_type;	// Core.scala:51:24
  reg  [63:0] dereg_branch_addr;	// Core.scala:51:24
  reg  [5:0]  dereg_alu_op;	// Core.scala:51:24
  reg  [5:0]  dereg_shamt;	// Core.scala:51:24
  reg  [1:0]  dereg_wb_type;	// Core.scala:51:24
  reg  [2:0]  dereg_sd_type;	// Core.scala:51:24
  reg  [63:0] dereg_reg2_rdata;	// Core.scala:51:24
  reg  [2:0]  dereg_ld_type;	// Core.scala:51:24
  reg  [63:0] dereg_csr_t;	// Core.scala:51:24
  reg  [11:0] dereg_csr_waddr;	// Core.scala:51:24
  reg         dereg_csr_wen;	// Core.scala:51:24
  reg         dereg_has_inst;	// Core.scala:51:24
  reg  [63:0] emreg_reg_wdata;	// Core.scala:69:24
  reg  [4:0]  emreg_reg_waddr;	// Core.scala:69:24
  reg  [1:0]  emreg_wb_type;	// Core.scala:69:24
  reg  [2:0]  emreg_ld_type;	// Core.scala:69:24
  reg  [2:0]  emreg_ld_addr_lowbit;	// Core.scala:69:24
  reg  [63:0] emreg_csr_wdata;	// Core.scala:69:24
  reg         emreg_csr_wen;	// Core.scala:69:24
  reg  [11:0] emreg_csr_waddr;	// Core.scala:69:24
  reg         emreg_has_inst;	// Core.scala:69:24
  reg  [63:0] mwreg_reg_wdata;	// Core.scala:83:24
  reg  [4:0]  mwreg_reg_waddr;	// Core.scala:83:24
  reg  [1:0]  mwreg_wb_type;	// Core.scala:83:24
  reg  [63:0] mwreg_csr_wdata;	// Core.scala:83:24
  reg         mwreg_csr_wen;	// Core.scala:83:24
  reg  [11:0] mwreg_csr_waddr;	// Core.scala:83:24
  reg         mwreg_has_inst;	// Core.scala:83:24
  wire [31:0] _decode_io_inst_bits_T_4 = fdreg_pc[2] ? io_inst[63:32] : io_inst[31:0];	// Core.scala:46:24, :127:{31,40,60,76}
  always @(posedge clock) begin
    if (reset) begin
      fdreg_pc <= 64'h80000000;	// <stdin>:2011:20, Core.scala:46:24
      dereg_op_a <= 64'h0;	// <stdin>:2018:23, Core.scala:51:24
      dereg_op_b <= 64'h0;	// <stdin>:2018:23, Core.scala:51:24
      dereg_reg_waddr <= 5'h0;	// <stdin>:2027:27, Core.scala:51:24
      dereg_branch_type <= 1'h0;	// Core.scala:51:24, :431:19
      dereg_branch_addr <= 64'h0;	// <stdin>:2018:23, Core.scala:51:24
      dereg_alu_op <= 6'h3F;	// <stdin>:2024:27, Core.scala:51:24
      dereg_shamt <= 6'h0;	// <stdin>:2023:23, Core.scala:51:24
      dereg_wb_type <= 2'h0;	// <stdin>:2022:25, Core.scala:51:24
      dereg_sd_type <= 3'h0;	// <stdin>:2019:25, Core.scala:51:24
      dereg_reg2_rdata <= 64'h0;	// <stdin>:2018:23, Core.scala:51:24
      dereg_ld_type <= 3'h0;	// <stdin>:2019:25, Core.scala:51:24
      dereg_csr_t <= 64'h0;	// <stdin>:2018:23, Core.scala:51:24
      dereg_csr_waddr <= 12'h0;	// <stdin>:2017:27, Core.scala:51:24
      dereg_csr_wen <= 1'h0;	// Core.scala:51:24, :431:19
      emreg_reg_wdata <= 64'h0;	// <stdin>:2018:23, Core.scala:69:24
      emreg_reg_waddr <= 5'h0;	// <stdin>:2027:27, Core.scala:69:24
      emreg_wb_type <= 2'h0;	// <stdin>:2022:25, Core.scala:69:24
      emreg_ld_type <= 3'h0;	// <stdin>:2019:25, Core.scala:69:24
      emreg_ld_addr_lowbit <= 3'h0;	// <stdin>:2019:25, Core.scala:69:24
      emreg_csr_wdata <= 64'h0;	// <stdin>:2018:23, Core.scala:69:24
      emreg_csr_wen <= 1'h0;	// Core.scala:69:24, :431:19
      emreg_csr_waddr <= 12'h0;	// <stdin>:2017:27, Core.scala:69:24
      mwreg_reg_wdata <= 64'h0;	// <stdin>:2018:23, Core.scala:83:24
      mwreg_reg_waddr <= 5'h0;	// <stdin>:2027:27, Core.scala:83:24
      mwreg_wb_type <= 2'h0;	// <stdin>:2022:25, Core.scala:83:24
      mwreg_csr_wdata <= 64'h0;	// <stdin>:2018:23, Core.scala:83:24
      mwreg_csr_wen <= 1'h0;	// Core.scala:83:24, :431:19
      mwreg_csr_waddr <= 12'h0;	// <stdin>:2017:27, Core.scala:83:24
    end
    else begin
      fdreg_pc <= _fetch_io_fdio_pc;	// Core.scala:36:23, :46:24
      if (_fc_io_fcde_flush) begin	// Core.scala:99:20
        dereg_op_a <= 64'h0;	// <stdin>:2018:23, Core.scala:51:24
        dereg_op_b <= 64'h0;	// <stdin>:2018:23, Core.scala:51:24
        dereg_reg_waddr <= 5'h0;	// <stdin>:2027:27, Core.scala:51:24
        dereg_branch_addr <= 64'h0;	// <stdin>:2018:23, Core.scala:51:24
        dereg_alu_op <= 6'h0;	// <stdin>:2023:23, Core.scala:51:24
        dereg_shamt <= 6'h0;	// <stdin>:2023:23, Core.scala:51:24
        dereg_wb_type <= 2'h0;	// <stdin>:2022:25, Core.scala:51:24
        dereg_sd_type <= 3'h0;	// <stdin>:2019:25, Core.scala:51:24
        dereg_reg2_rdata <= 64'h0;	// <stdin>:2018:23, Core.scala:51:24
        dereg_ld_type <= 3'h0;	// <stdin>:2019:25, Core.scala:51:24
        dereg_csr_t <= 64'h0;	// <stdin>:2018:23, Core.scala:51:24
        dereg_csr_waddr <= 12'h0;	// <stdin>:2017:27, Core.scala:51:24
      end
      else begin	// Core.scala:99:20
        dereg_op_a <= _decode_io_deio_op_a;	// Core.scala:37:24, :51:24
        dereg_op_b <= _decode_io_deio_op_b;	// Core.scala:37:24, :51:24
        dereg_reg_waddr <= _decode_io_deio_reg_waddr;	// Core.scala:37:24, :51:24
        dereg_branch_addr <= _decode_io_deio_branch_addr;	// Core.scala:37:24, :51:24
        dereg_alu_op <= _decode_io_deio_alu_op;	// Core.scala:37:24, :51:24
        dereg_shamt <= _decode_io_deio_shamt;	// Core.scala:37:24, :51:24
        dereg_wb_type <= _decode_io_deio_wb_type;	// Core.scala:37:24, :51:24
        dereg_sd_type <= _decode_io_deio_sd_type;	// Core.scala:37:24, :51:24
        dereg_reg2_rdata <= _decode_io_deio_reg2_rdata;	// Core.scala:37:24, :51:24
        dereg_ld_type <= _decode_io_deio_ld_type;	// Core.scala:37:24, :51:24
        dereg_csr_t <= _decode_io_deio_csr_t;	// Core.scala:37:24, :51:24
        dereg_csr_waddr <= _decode_io_deio_csr_waddr;	// Core.scala:37:24, :51:24
      end
      dereg_branch_type <= ~_fc_io_fcde_flush & _decode_io_deio_branch_type;	// Core.scala:37:24, :51:24, :99:20, Mux.scala:101:16
      dereg_csr_wen <= ~_fc_io_fcde_flush & _decode_io_deio_csr_wen;	// Core.scala:37:24, :51:24, :99:20, Mux.scala:101:16
      emreg_reg_wdata <= _excute_io_emio_reg_wdata;	// Core.scala:38:24, :69:24
      emreg_reg_waddr <= _excute_io_emio_reg_waddr;	// Core.scala:38:24, :69:24
      emreg_wb_type <= _excute_io_emio_wb_type;	// Core.scala:38:24, :69:24
      emreg_ld_type <= _excute_io_emio_ld_type;	// Core.scala:38:24, :69:24
      emreg_ld_addr_lowbit <= _excute_io_emio_ld_addr_lowbit;	// Core.scala:38:24, :69:24
      emreg_csr_wdata <= _excute_io_emio_csr_wdata;	// Core.scala:38:24, :69:24
      emreg_csr_wen <= _excute_io_emio_csr_wen;	// Core.scala:38:24, :69:24
      emreg_csr_waddr <= _excute_io_emio_csr_waddr;	// Core.scala:38:24, :69:24
      mwreg_reg_wdata <= _mem_io_mwio_reg_wdata;	// Core.scala:40:21, :83:24
      mwreg_reg_waddr <= _mem_io_mwio_reg_waddr;	// Core.scala:40:21, :83:24
      mwreg_wb_type <= _mem_io_mwio_wb_type;	// Core.scala:40:21, :83:24
      mwreg_csr_wdata <= _mem_io_mwio_csr_wdata;	// Core.scala:40:21, :83:24
      mwreg_csr_wen <= _mem_io_mwio_csr_wen;	// Core.scala:40:21, :83:24
      mwreg_csr_waddr <= _mem_io_mwio_csr_waddr;	// Core.scala:40:21, :83:24
    end
    dereg_has_inst <= ~_fc_io_fcde_flush & _decode_io_deio_has_inst;	// Core.scala:37:24, :51:24, :99:20, Mux.scala:101:16
    emreg_has_inst <= _excute_io_emio_has_inst;	// Core.scala:38:24, :69:24
    mwreg_has_inst <= _mem_io_mwio_has_inst;	// Core.scala:40:21, :83:24
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1989:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1989:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1989:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_14;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_15;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_16;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_17;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_18;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_19;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_20;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_21;	// <stdin>:1989:10
      automatic logic [31:0] _RANDOM_22;	// <stdin>:1989:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1989:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1989:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1989:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_3 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_4 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_5 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_6 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_7 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_8 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_9 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_10 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_11 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_12 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_13 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_14 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_15 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_16 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_17 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_18 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_19 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_20 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_21 = `RANDOM;	// <stdin>:1989:10
        _RANDOM_22 = `RANDOM;	// <stdin>:1989:10
        fdreg_pc = {_RANDOM_0, _RANDOM_1};	// Core.scala:46:24
        dereg_op_a = {_RANDOM_2, _RANDOM_3};	// Core.scala:51:24
        dereg_op_b = {_RANDOM_4, _RANDOM_5};	// Core.scala:51:24
        dereg_reg_waddr = _RANDOM_6[4:0];	// Core.scala:51:24
        dereg_branch_type = _RANDOM_6[5];	// Core.scala:51:24
        dereg_branch_addr = {_RANDOM_6[31:6], _RANDOM_7, _RANDOM_8[5:0]};	// Core.scala:51:24
        dereg_alu_op = _RANDOM_8[11:6];	// Core.scala:51:24
        dereg_shamt = _RANDOM_8[17:12];	// Core.scala:51:24
        dereg_wb_type = _RANDOM_8[19:18];	// Core.scala:51:24
        dereg_sd_type = _RANDOM_8[22:20];	// Core.scala:51:24
        dereg_reg2_rdata = {_RANDOM_8[31:23], _RANDOM_9, _RANDOM_10[22:0]};	// Core.scala:51:24
        dereg_ld_type = _RANDOM_10[25:23];	// Core.scala:51:24
        dereg_csr_t = {_RANDOM_10[31:26], _RANDOM_11, _RANDOM_12[25:0]};	// Core.scala:51:24
        dereg_csr_waddr = {_RANDOM_12[31:26], _RANDOM_13[5:0]};	// Core.scala:51:24
        dereg_csr_wen = _RANDOM_13[6];	// Core.scala:51:24
        dereg_has_inst = _RANDOM_13[7];	// Core.scala:51:24
        emreg_reg_wdata = {_RANDOM_13[31:8], _RANDOM_14, _RANDOM_15[7:0]};	// Core.scala:51:24, :69:24
        emreg_reg_waddr = _RANDOM_15[12:8];	// Core.scala:69:24
        emreg_wb_type = _RANDOM_15[14:13];	// Core.scala:69:24
        emreg_ld_type = _RANDOM_15[17:15];	// Core.scala:69:24
        emreg_ld_addr_lowbit = _RANDOM_15[20:18];	// Core.scala:69:24
        emreg_csr_wdata = {_RANDOM_15[31:21], _RANDOM_16, _RANDOM_17[20:0]};	// Core.scala:69:24
        emreg_csr_wen = _RANDOM_17[21];	// Core.scala:69:24
        emreg_csr_waddr = {_RANDOM_17[31:22], _RANDOM_18[1:0]};	// Core.scala:69:24
        emreg_has_inst = _RANDOM_18[2];	// Core.scala:69:24
        mwreg_reg_wdata = {_RANDOM_18[31:3], _RANDOM_19, _RANDOM_20[2:0]};	// Core.scala:69:24, :83:24
        mwreg_reg_waddr = _RANDOM_20[7:3];	// Core.scala:83:24
        mwreg_wb_type = _RANDOM_20[9:8];	// Core.scala:83:24
        mwreg_csr_wdata = {_RANDOM_20[31:10], _RANDOM_21, _RANDOM_22[9:0]};	// Core.scala:83:24
        mwreg_csr_wen = _RANDOM_22[10];	// Core.scala:83:24
        mwreg_csr_waddr = _RANDOM_22[22:11];	// Core.scala:83:24
        mwreg_has_inst = _RANDOM_22[23];	// Core.scala:83:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1989:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1989:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Fetch fetch (	// Core.scala:36:23
    .clock             (clock),
    .reset             (reset),
    .io_fcfe_jump_flag (_fc_io_fcfe_jump_flag),	// Core.scala:99:20
    .io_fcfe_jump_pc   (_fc_io_fcfe_jump_pc),	// Core.scala:99:20
    .io_fcfe_flush     (_fc_io_fcfe_flush),	// Core.scala:99:20
    .io_fcfe_stall     (_fc_io_fcfe_stall),	// Core.scala:99:20
    .io_fdio_pc        (_fetch_io_fdio_pc),
    .io_pc_valid       (_fetch_io_pc_valid),
    .io_pc_bits        (_fetch_io_pc_bits),
    .io_next_pc        (io_next_pc)
  );
  Decode decode (	// Core.scala:37:24
    .clock               (clock),
    .reset               (reset),
    .io_inst_bits        (_decode_io_inst_bits_T_4),	// Core.scala:127:31
    .io_fdio_pc          (fdreg_pc),	// Core.scala:46:24
    .io_rfio_reg1_rdata  (_regfile_io_RfDe_reg1_rdata),	// Core.scala:96:25
    .io_rfio_reg2_rdata  (_regfile_io_RfDe_reg2_rdata),	// Core.scala:96:25
    .io_branch           (_excute_io_jump_flag),	// Core.scala:38:24
    .io_fwde_fw_sel1     (_fw_io_fwde_fw_sel1),	// Core.scala:411:20
    .io_fwde_fw_sel2     (_fw_io_fwde_fw_sel2),	// Core.scala:411:20
    .io_fwde_fw_data1    (_fw_io_fwde_fw_data1),	// Core.scala:411:20
    .io_fwde_fw_data2    (_fw_io_fwde_fw_data2),	// Core.scala:411:20
    .io_fwde_csr_fw_sel  (_fw_io_fwde_csr_fw_sel),	// Core.scala:411:20
    .io_fwde_csr_fw_data (_fw_io_fwde_csr_fw_data),	// Core.scala:411:20
    .io_csrs_csr_rdata   (_csrs_io_CSRDe_csr_rdata),	// Core.scala:102:22
    .io_rfio_reg1_raddr  (_decode_io_rfio_reg1_raddr),
    .io_rfio_reg2_raddr  (_decode_io_rfio_reg2_raddr),
    .io_deio_op_a        (_decode_io_deio_op_a),
    .io_deio_op_b        (_decode_io_deio_op_b),
    .io_deio_reg_waddr   (_decode_io_deio_reg_waddr),
    .io_deio_branch_type (_decode_io_deio_branch_type),
    .io_deio_branch_addr (_decode_io_deio_branch_addr),
    .io_deio_alu_op      (_decode_io_deio_alu_op),
    .io_deio_shamt       (_decode_io_deio_shamt),
    .io_deio_wb_type     (_decode_io_deio_wb_type),
    .io_deio_sd_type     (_decode_io_deio_sd_type),
    .io_deio_reg2_rdata  (_decode_io_deio_reg2_rdata),
    .io_deio_ld_type     (_decode_io_deio_ld_type),
    .io_deio_csr_t       (_decode_io_deio_csr_t),
    .io_deio_csr_waddr   (_decode_io_deio_csr_waddr),
    .io_deio_csr_wen     (_decode_io_deio_csr_wen),
    .io_deio_has_inst    (_decode_io_deio_has_inst),
    .io_jump_flag        (_decode_io_jump_flag),
    .io_jump_pc          (_decode_io_jump_pc),
    .io_load_use         (_decode_io_load_use),
    .io_fwde_reg1_raddr  (_decode_io_fwde_reg1_raddr),
    .io_fwde_reg2_raddr  (_decode_io_fwde_reg2_raddr),
    .io_fwde_csr_raddr   (_decode_io_fwde_csr_raddr),
    .io_csrs_csr_raddr   (_decode_io_csrs_csr_raddr)
  );
  Excute excute (	// Core.scala:38:24
    .io_deio_op_a           (dereg_op_a),	// Core.scala:51:24
    .io_deio_op_b           (dereg_op_b),	// Core.scala:51:24
    .io_deio_reg_waddr      (dereg_reg_waddr),	// Core.scala:51:24
    .io_deio_branch_type    (dereg_branch_type),	// Core.scala:51:24
    .io_deio_branch_addr    (dereg_branch_addr),	// Core.scala:51:24
    .io_deio_alu_op         (dereg_alu_op),	// Core.scala:51:24
    .io_deio_shamt          (dereg_shamt),	// Core.scala:51:24
    .io_deio_wb_type        (dereg_wb_type),	// Core.scala:51:24
    .io_deio_sd_type        (dereg_sd_type),	// Core.scala:51:24
    .io_deio_reg2_rdata     (dereg_reg2_rdata),	// Core.scala:51:24
    .io_deio_ld_type        (dereg_ld_type),	// Core.scala:51:24
    .io_deio_csr_t          (dereg_csr_t),	// Core.scala:51:24
    .io_deio_csr_waddr      (dereg_csr_waddr),	// Core.scala:51:24
    .io_deio_csr_wen        (dereg_csr_wen),	// Core.scala:51:24
    .io_deio_has_inst       (dereg_has_inst),	// Core.scala:51:24
    .io_emio_reg_wdata      (_excute_io_emio_reg_wdata),
    .io_emio_reg_waddr      (_excute_io_emio_reg_waddr),
    .io_emio_wb_type        (_excute_io_emio_wb_type),
    .io_emio_ld_type        (_excute_io_emio_ld_type),
    .io_emio_ld_addr_lowbit (_excute_io_emio_ld_addr_lowbit),
    .io_emio_csr_wdata      (_excute_io_emio_csr_wdata),
    .io_emio_csr_wen        (_excute_io_emio_csr_wen),
    .io_emio_csr_waddr      (_excute_io_emio_csr_waddr),
    .io_emio_has_inst       (_excute_io_emio_has_inst),
    .io_jump_flag           (_excute_io_jump_flag),
    .io_jump_pc             (_excute_io_jump_pc),
    .io_raddr               (_excute_io_raddr),
    .io_waddr               (_excute_io_waddr),
    .io_wdata               (io_wdata),
    .io_wmask               (io_wmask),
    .io_fwex_reg_waddr      (_excute_io_fwex_reg_waddr),
    .io_fwex_reg_wdata      (_excute_io_fwex_reg_wdata),
    .io_fwex_reg_we         (_excute_io_fwex_reg_we),
    .io_fwex_csr_wdata      (_excute_io_fwex_csr_wdata),
    .io_fwex_csr_wen        (_excute_io_fwex_csr_wen),
    .io_fwex_csr_waddr      (_excute_io_fwex_csr_waddr)
  );
  Mem mem (	// Core.scala:40:21
    .io_emio_reg_wdata      (emreg_reg_wdata),	// Core.scala:69:24
    .io_emio_reg_waddr      (emreg_reg_waddr),	// Core.scala:69:24
    .io_emio_wb_type        (emreg_wb_type),	// Core.scala:69:24
    .io_emio_ld_type        (emreg_ld_type),	// Core.scala:69:24
    .io_emio_ld_addr_lowbit (emreg_ld_addr_lowbit),	// Core.scala:69:24
    .io_emio_csr_wdata      (emreg_csr_wdata),	// Core.scala:69:24
    .io_emio_csr_wen        (emreg_csr_wen),	// Core.scala:69:24
    .io_emio_csr_waddr      (emreg_csr_waddr),	// Core.scala:69:24
    .io_emio_has_inst       (emreg_has_inst),	// Core.scala:69:24
    .io_rdata               (io_rdata),
    .io_mwio_reg_wdata      (_mem_io_mwio_reg_wdata),
    .io_mwio_reg_waddr      (_mem_io_mwio_reg_waddr),
    .io_mwio_wb_type        (_mem_io_mwio_wb_type),
    .io_mwio_csr_wdata      (_mem_io_mwio_csr_wdata),
    .io_mwio_csr_wen        (_mem_io_mwio_csr_wen),
    .io_mwio_csr_waddr      (_mem_io_mwio_csr_waddr),
    .io_mwio_has_inst       (_mem_io_mwio_has_inst),
    .io_fwmem_reg_waddr     (_mem_io_fwmem_reg_waddr),
    .io_fwmem_reg_wdata     (_mem_io_fwmem_reg_wdata),
    .io_fwmem_reg_we        (_mem_io_fwmem_reg_we),
    .io_fwmem_csr_wdata     (_mem_io_fwmem_csr_wdata),
    .io_fwmem_csr_wen       (_mem_io_fwmem_csr_wen),
    .io_fwmem_csr_waddr     (_mem_io_fwmem_csr_waddr)
  );
  Wb wb (	// Core.scala:41:20
    .io_mwio_reg_wdata (mwreg_reg_wdata),	// Core.scala:83:24
    .io_mwio_reg_waddr (mwreg_reg_waddr),	// Core.scala:83:24
    .io_mwio_wb_type   (mwreg_wb_type),	// Core.scala:83:24
    .io_mwio_csr_wdata (mwreg_csr_wdata),	// Core.scala:83:24
    .io_mwio_csr_wen   (mwreg_csr_wen),	// Core.scala:83:24
    .io_mwio_csr_waddr (mwreg_csr_waddr),	// Core.scala:83:24
    .io_mwio_has_inst  (mwreg_has_inst),	// Core.scala:83:24
    .io_rfio_rd        (_wb_io_rfio_rd),
    .io_rfio_reg_wen   (_wb_io_rfio_reg_wen),
    .io_rfio_reg_wdata (_wb_io_rfio_reg_wdata),
    .io_fwwb_reg_waddr (_wb_io_fwwb_reg_waddr),
    .io_fwwb_reg_wdata (_wb_io_fwwb_reg_wdata),
    .io_fwwb_reg_we    (_wb_io_fwwb_reg_we),
    .io_fwwb_csr_wdata (_wb_io_fwwb_csr_wdata),
    .io_fwwb_csr_wen   (_wb_io_fwwb_csr_wen),
    .io_fwwb_csr_waddr (_wb_io_fwwb_csr_waddr),
    .io_csrs_rd        (_wb_io_csrs_rd),
    .io_csrs_csr_wen   (_wb_io_csrs_csr_wen),
    .io_csrs_csr_wdata (_wb_io_csrs_csr_wdata)
  );
  Regfile regfile (	// Core.scala:96:25
    .clock              (clock),
    .io_RfDe_reg1_raddr (_decode_io_rfio_reg1_raddr),	// Core.scala:37:24
    .io_RfDe_reg2_raddr (_decode_io_rfio_reg2_raddr),	// Core.scala:37:24
    .io_RfWb_rd         (_wb_io_rfio_rd),	// Core.scala:41:20
    .io_RfWb_reg_wen    (_wb_io_rfio_reg_wen),	// Core.scala:41:20
    .io_RfWb_reg_wdata  (_wb_io_rfio_reg_wdata),	// Core.scala:41:20
    .io_RfDe_reg1_rdata (_regfile_io_RfDe_reg1_rdata),
    .io_RfDe_reg2_rdata (_regfile_io_RfDe_reg2_rdata)
  );
  FlowControl fc (	// Core.scala:99:20
    .io_fcde_jump_flag  (_decode_io_jump_flag),	// Core.scala:37:24
    .io_fcde_jump_pc    (_decode_io_jump_pc),	// Core.scala:37:24
    .io_fcde_load_use   (_decode_io_load_use),	// Core.scala:37:24
    .io_fcex_jump_flag  (_excute_io_jump_flag),	// Core.scala:38:24
    .io_fcex_jump_pc    (_excute_io_jump_pc),	// Core.scala:38:24
    .io_fctr_pop_NOP    (_trap_io_fctr_pop_NOP),	// Core.scala:105:22
    .io_fctr_trap_state (_trap_io_fctr_trap_state),	// Core.scala:105:22
    .io_fctr_jump_flag  (_trap_io_fctr_jump_flag),	// Core.scala:105:22
    .io_fctr_jump_pc    (_trap_io_fctr_jump_pc),	// Core.scala:105:22
    .io_fcfe_jump_flag  (_fc_io_fcfe_jump_flag),
    .io_fcfe_jump_pc    (_fc_io_fcfe_jump_pc),
    .io_fcfe_flush      (_fc_io_fcfe_flush),
    .io_fcfe_stall      (_fc_io_fcfe_stall),
    .io_fcde_flush      (_fc_io_fcde_flush)
  );
  CSRs csrs (	// Core.scala:102:22
    .clock              (clock),
    .reset              (reset),
    .io_CSRDe_csr_raddr (_decode_io_csrs_csr_raddr),	// Core.scala:37:24
    .io_CSRWb_rd        (_wb_io_csrs_rd),	// Core.scala:41:20
    .io_CSRWb_csr_wen   (_wb_io_csrs_csr_wen),	// Core.scala:41:20
    .io_CSRWb_csr_wdata (_wb_io_csrs_csr_wdata),	// Core.scala:41:20
    .io_CSRTr_rd        (_trap_io_csrtr_rd),	// Core.scala:105:22
    .io_CSRTr_csr_wen   (_trap_io_csrtr_csr_wen),	// Core.scala:105:22
    .io_CSRTr_csr_wdata (_trap_io_csrtr_csr_wdata),	// Core.scala:105:22
    .io_CSRDe_csr_rdata (_csrs_io_CSRDe_csr_rdata),
    .io_CSRTr_MTVEC     (_csrs_io_CSRTr_MTVEC),
    .io_CSRTr_MEPC      (_csrs_io_CSRTr_MEPC),
    .io_CSRTr_MSTATUS   (_csrs_io_CSRTr_MSTATUS)
  );
  Trap trap (	// Core.scala:105:22
    .clock              (clock),
    .reset              (reset),
    .io_ex_hasinst      (dereg_has_inst),	// Core.scala:51:24
    .io_mem_hasinst     (emreg_has_inst),	// Core.scala:69:24
    .io_wb_hasinst      (mwreg_has_inst),	// Core.scala:83:24
    .io_csrtr_MTVEC     (_csrs_io_CSRTr_MTVEC),	// Core.scala:102:22
    .io_csrtr_MEPC      (_csrs_io_CSRTr_MEPC),	// Core.scala:102:22
    .io_csrtr_MSTATUS   (_csrs_io_CSRTr_MSTATUS),	// Core.scala:102:22
    .io_inst            (_decode_io_inst_bits_T_4),	// Core.scala:127:31
    .io_pc              (_fetch_io_pc_bits),	// Core.scala:36:23
    .io_csrtr_rd        (_trap_io_csrtr_rd),
    .io_csrtr_csr_wen   (_trap_io_csrtr_csr_wen),
    .io_csrtr_csr_wdata (_trap_io_csrtr_csr_wdata),
    .io_fctr_pop_NOP    (_trap_io_fctr_pop_NOP),
    .io_fctr_trap_state (_trap_io_fctr_trap_state),
    .io_fctr_jump_flag  (_trap_io_fctr_jump_flag),
    .io_fctr_jump_pc    (_trap_io_fctr_jump_pc)
  );
  Forward fw (	// Core.scala:411:20
    .io_fwde_reg1_raddr  (_decode_io_fwde_reg1_raddr),	// Core.scala:37:24
    .io_fwde_reg2_raddr  (_decode_io_fwde_reg2_raddr),	// Core.scala:37:24
    .io_fwde_csr_raddr   (_decode_io_fwde_csr_raddr),	// Core.scala:37:24
    .io_fwex_reg_waddr   (_excute_io_fwex_reg_waddr),	// Core.scala:38:24
    .io_fwex_reg_wdata   (_excute_io_fwex_reg_wdata),	// Core.scala:38:24
    .io_fwex_reg_we      (_excute_io_fwex_reg_we),	// Core.scala:38:24
    .io_fwex_csr_wdata   (_excute_io_fwex_csr_wdata),	// Core.scala:38:24
    .io_fwex_csr_wen     (_excute_io_fwex_csr_wen),	// Core.scala:38:24
    .io_fwex_csr_waddr   (_excute_io_fwex_csr_waddr),	// Core.scala:38:24
    .io_fwmem_reg_waddr  (_mem_io_fwmem_reg_waddr),	// Core.scala:40:21
    .io_fwmem_reg_wdata  (_mem_io_fwmem_reg_wdata),	// Core.scala:40:21
    .io_fwmem_reg_we     (_mem_io_fwmem_reg_we),	// Core.scala:40:21
    .io_fwmem_csr_wdata  (_mem_io_fwmem_csr_wdata),	// Core.scala:40:21
    .io_fwmem_csr_wen    (_mem_io_fwmem_csr_wen),	// Core.scala:40:21
    .io_fwmem_csr_waddr  (_mem_io_fwmem_csr_waddr),	// Core.scala:40:21
    .io_fwwb_reg_waddr   (_wb_io_fwwb_reg_waddr),	// Core.scala:41:20
    .io_fwwb_reg_wdata   (_wb_io_fwwb_reg_wdata),	// Core.scala:41:20
    .io_fwwb_reg_we      (_wb_io_fwwb_reg_we),	// Core.scala:41:20
    .io_fwwb_csr_wdata   (_wb_io_fwwb_csr_wdata),	// Core.scala:41:20
    .io_fwwb_csr_wen     (_wb_io_fwwb_csr_wen),	// Core.scala:41:20
    .io_fwwb_csr_waddr   (_wb_io_fwwb_csr_waddr),	// Core.scala:41:20
    .io_fwde_fw_sel1     (_fw_io_fwde_fw_sel1),
    .io_fwde_fw_sel2     (_fw_io_fwde_fw_sel2),
    .io_fwde_fw_data1    (_fw_io_fwde_fw_data1),
    .io_fwde_fw_data2    (_fw_io_fwde_fw_data2),
    .io_fwde_csr_fw_sel  (_fw_io_fwde_csr_fw_sel),
    .io_fwde_csr_fw_data (_fw_io_fwde_csr_fw_data)
  );
  DebugInterface DI (	// Core.scala:431:19
    .clk        (clock),
    .rst        (reset),
    .pc         (_fetch_io_pc_bits),	// Core.scala:36:23
    .pc_req     (_fetch_io_pc_valid),	// Core.scala:36:23
    .inst       (fdreg_pc[2] ? io_inst[63:32] : io_inst[31:0]),	// Core.scala:46:24, :127:{40,60,76}, :436:22
    .inst_valid (1'h0),	// Core.scala:431:19
    .load_use   (_decode_io_load_use),	// Core.scala:37:24
    .op_a       (dereg_op_a),	// Core.scala:51:24
    .op_b       (dereg_op_b),	// Core.scala:51:24
    .result     (_excute_io_emio_reg_wdata),	// Core.scala:38:24
    .br_yes     (_excute_io_jump_flag),	// Core.scala:38:24
    .mem_access ((|dereg_ld_type) | (|dereg_sd_type)),	// Core.scala:51:24, :443:{48,52,77}
    .mem_addr   (_excute_io_raddr | _excute_io_waddr),	// Core.scala:38:24, :444:39
    .rd         (_wb_io_rfio_rd),	// Core.scala:41:20
    .reg_wen    (_wb_io_rfio_reg_wen),	// Core.scala:41:20
    .reg_wdata  (_wb_io_rfio_reg_wdata),	// Core.scala:41:20
    .csr_wen    (_wb_io_csrs_csr_wen),	// Core.scala:41:20
    .csr_wdata  (_wb_io_csrs_csr_wdata),	// Core.scala:41:20
    .csr_waddr  (_wb_io_csrs_rd)	// Core.scala:41:20
  );
  Interact interact (	// Core.scala:453:26
    .inst (fdreg_pc[2] ? io_inst[63:32] : io_inst[31:0]),	// Core.scala:46:24, :127:{40,60,76}, :454:28
    .clk  (clock),
    .rst  (reset)
  );
  assign io_pc = _fetch_io_pc_bits;	// <stdin>:1989:10, Core.scala:36:23
  assign io_valid = _fetch_io_pc_valid;	// <stdin>:1989:10, Core.scala:36:23
  assign io_load_use = _decode_io_load_use;	// <stdin>:1989:10, Core.scala:37:24
  assign io_raddr = _excute_io_raddr;	// <stdin>:1989:10, Core.scala:38:24
  assign io_waddr = _excute_io_waddr;	// <stdin>:1989:10, Core.scala:38:24
endmodule

// external module TempMem

module Soc(	// <stdin>:2332:10
  input         clock,
                reset,
  output [63:0] io_next_pc);

  wire [63:0] _tm_inst;	// Soc.scala:15:20
  wire [63:0] _tm_rdata;	// Soc.scala:15:20
  wire [63:0] _core_io_pc;	// Soc.scala:12:22
  wire        _core_io_valid;	// Soc.scala:12:22
  wire        _core_io_load_use;	// Soc.scala:12:22
  wire [63:0] _core_io_raddr;	// Soc.scala:12:22
  wire [63:0] _core_io_waddr;	// Soc.scala:12:22
  wire [63:0] _core_io_wdata;	// Soc.scala:12:22
  wire [7:0]  _core_io_wmask;	// Soc.scala:12:22
  Core core (	// Soc.scala:12:22
    .clock       (clock),
    .reset       (reset),
    .io_inst     (_tm_inst),	// Soc.scala:15:20
    .io_rdata    (_tm_rdata),	// Soc.scala:15:20
    .io_pc       (_core_io_pc),
    .io_valid    (_core_io_valid),
    .io_load_use (_core_io_load_use),
    .io_raddr    (_core_io_raddr),
    .io_waddr    (_core_io_waddr),
    .io_wdata    (_core_io_wdata),
    .io_wmask    (_core_io_wmask),
    .io_next_pc  (io_next_pc)
  );
  TempMem tm (	// Soc.scala:15:20
    .clk      (clock),
    .load_use (_core_io_load_use),	// Soc.scala:12:22
    .pc       (_core_io_pc),	// Soc.scala:12:22
    .valid    (_core_io_valid),	// Soc.scala:12:22
    .raddr    (_core_io_raddr),	// Soc.scala:12:22
    .waddr    (_core_io_waddr),	// Soc.scala:12:22
    .wdata    (_core_io_wdata),	// Soc.scala:12:22
    .wmask    (_core_io_wmask),	// Soc.scala:12:22
    .inst     (_tm_inst),
    .rdata    (_tm_rdata)
  );
endmodule


// ----- 8< ----- FILE "rv64/./build/DebugInterface.v" ----- 8< -----



import "DPI-C" function void update_debuginfo(input reg[63:0] pc, input pc_req, input reg[31:0] inst, 
  input inst_valid, input load_use, input reg[63:0] op_a, input reg[63:0] op_b, input reg[63:0] result, 
   input br_yes, input reg mem_access, input [63:0] mem_addr,
   input reg[4:0] rd, input reg[63:0] reg_wdata,
  input reg_wen, input csr_wen, input [63:0] csr_wdata, input [11:0] csr_waddr);

module DebugInterface(
                   input        clk,
                   input        rst,            
                   //fetch
                   input [63:0] pc,
                   input        pc_req,

                   input [31:0] inst,
                   input        inst_valid,
                   input        load_use,
                   
                   //decode
                   input [63:0] op_a,
                   input [63:0] op_b,
                   input [63:0] result,

                   //execute
                   input        br_yes,

                   input        mem_access,
                   input [63:0] mem_addr,
       

                   //wb
                   input [4:0] rd,
                   input [63:0] reg_wdata,
                   input        reg_wen,

                   input       csr_wen,
                   input [63:0] csr_wdata,
                   input [11:0]    csr_waddr
);




always@(posedge clk)begin
   if(rst != 'd1)
       update_debuginfo(pc,pc_req,inst,inst_valid,load_use,op_a,op_b,result,br_yes, mem_access, mem_addr, rd,reg_wdata,reg_wen,
       csr_wen,csr_wdata,csr_waddr);
end



endmodule


    

// ----- 8< ----- FILE "rv64/./build/Interact.v" ----- 8< -----


module Interact(input [31:0] inst,
                input  clk,
                input  rst
);
   
   reg ebreak_flag;
   reg [2:0] over_count;

   always@(posedge clk)begin
       if(rst)
           ebreak_flag <= 1'b0;
       else
       if(inst == 32'b00000000000100000000000001110011)begin
           ebreak_flag <= 1'b1;
       end
   end

   always@(posedge clk)begin  //需要等前面指令执行结束，再停止程序
       if(rst)
           over_count <= 'd0;
       else begin
           if(ebreak_flag)begin
               over_count <= over_count + 1'b1;
               if(over_count == 3'd2)begin          
                   $display("ebreak!");
                   $finish;
               end
                   
           end
       end 
           
   end

   
endmodule
        

// ----- 8< ----- FILE "rv64/./build/TempMem.v" ----- 8< -----


import "DPI-C" function longint pmem_read(
   input reg[63:0] raddr);

import "DPI-C" function void pmem_write(
   input reg[63:0] waddr, input reg[63:0] wdata, input byte wmask);

module TempMem(
   input           clk,

   input           load_use,

   output  reg [63:0]  inst,
   input   [63:0]  pc,
   input           valid,

   input   [63:0]  raddr,
   output  reg [63:0]  rdata,

   input   [63:0]  wdata,
   input   [63:0]  waddr,
   input   [7:0]   wmask
);

   reg [63:0]  old_inst;

   always@(posedge clk)begin

       old_inst <= inst;

       if(load_use == 'd1)
           inst <= inst;         //不变,给decode再一次的use指令  
       else if(valid == 'd1)
           inst <= pmem_read(pc);
       

       if(raddr != 'd0)
           rdata <= pmem_read(raddr);
       if(waddr != 'd0)
           pmem_write(waddr, wdata, wmask);
       
   end

endmodule


    

// ----- 8< ----- FILE "firrtl_black_box_resource_files.f" ----- 8< -----
