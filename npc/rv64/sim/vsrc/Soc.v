// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_REG_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_REG_INIT
`ifdef RANDOMIZE_MEM_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_MEM_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

// VCS coverage exclude_file
module DataArray_combMem(	// Cache.scala:77:32
  input  [4:0]    R0_addr,
  input           R0_en,
                  R0_clk,
  input  [4:0]    W0_addr,
  input           W0_en,
                  W0_clk,
  input  [1023:0] W0_data,
  input  [4:0]    W1_addr,
  input           W1_en,
                  W1_clk,
  input  [1023:0] W1_data,
  input  [4:0]    W2_addr,
  input           W2_en,
                  W2_clk,
  input  [1023:0] W2_data,
  input  [4:0]    W3_addr,
  input           W3_en,
                  W3_clk,
  input  [1023:0] W3_data,
  input  [4:0]    W4_addr,
  input           W4_en,
                  W4_clk,
  input  [1023:0] W4_data,
  input  [4:0]    W5_addr,
  input           W5_en,
                  W5_clk,
  input  [1023:0] W5_data,
  output [1023:0] R0_data);

  reg [1023:0] Memory[0:31];	// Cache.scala:77:32
  reg          _GEN;	// Cache.scala:77:32
  reg [4:0]    _GEN_0;	// Cache.scala:77:32
  always @(posedge R0_clk) begin	// Cache.scala:77:32
    _GEN <= R0_en;	// Cache.scala:77:32
    _GEN_0 <= R0_addr;	// Cache.scala:77:32
  end // always @(posedge)
  always @(posedge W0_clk) begin	// Cache.scala:77:32
    if (W0_en)	// Cache.scala:77:32
      Memory[W0_addr] <= W0_data;	// Cache.scala:77:32
    if (W1_en)	// Cache.scala:77:32
      Memory[W1_addr] <= W1_data;	// Cache.scala:77:32
    if (W2_en)	// Cache.scala:77:32
      Memory[W2_addr] <= W2_data;	// Cache.scala:77:32
    if (W3_en)	// Cache.scala:77:32
      Memory[W3_addr] <= W3_data;	// Cache.scala:77:32
    if (W4_en)	// Cache.scala:77:32
      Memory[W4_addr] <= W4_data;	// Cache.scala:77:32
    if (W5_en)	// Cache.scala:77:32
      Memory[W5_addr] <= W5_data;	// Cache.scala:77:32
  end // always @(posedge)
  `ifndef SYNTHESIS	// Cache.scala:77:32
    `ifdef RANDOMIZE_MEM_INIT	// Cache.scala:77:32
      integer initvar;	// Cache.scala:77:32
      reg [1023:0] _RANDOM_MEM;	// Cache.scala:77:32
    `endif // RANDOMIZE_MEM_INIT
    `ifdef RANDOMIZE_REG_INIT	// Cache.scala:77:32
      reg [31:0] _RANDOM;	// Cache.scala:77:32
    `endif // RANDOMIZE_REG_INIT
    initial begin	// Cache.scala:77:32
      `INIT_RANDOM_PROLOG_	// Cache.scala:77:32
      `ifdef RANDOMIZE_MEM_INIT	// Cache.scala:77:32
        for (initvar = 0; initvar < 32; initvar = initvar + 1) begin
          _RANDOM_MEM = {{`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}, {`RANDOM}};
          Memory[initvar] = _RANDOM_MEM[1023:0];
        end	// Cache.scala:77:32
      `endif // RANDOMIZE_MEM_INIT
      `ifdef RANDOMIZE_REG_INIT	// Cache.scala:77:32
        _RANDOM = {`RANDOM};	// Cache.scala:77:32
        _GEN = _RANDOM[0];	// Cache.scala:77:32
        _GEN_0 = _RANDOM[5:1];	// Cache.scala:77:32
      `endif // RANDOMIZE_REG_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign R0_data = _GEN ? Memory[_GEN_0] : 1024'bx;	// Cache.scala:77:32
endmodule

// VCS coverage exclude_file
module regs_combMem(	// Regfile.scala:32:19
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [4:0]  R2_addr,
  input         R2_en,
                R2_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [63:0] W0_data,
  input  [4:0]  W1_addr,
  input         W1_en,
                W1_clk,
  input  [63:0] W1_data,
  output [63:0] R0_data,
                R1_data,
                R2_data);

  reg [63:0] Memory[0:31];	// Regfile.scala:32:19
  always @(posedge W0_clk) begin	// Regfile.scala:32:19
    if (W0_en)	// Regfile.scala:32:19
      Memory[W0_addr] <= W0_data;	// Regfile.scala:32:19
    if (W1_en)	// Regfile.scala:32:19
      Memory[W1_addr] <= W1_data;	// Regfile.scala:32:19
  end // always @(posedge)
  `ifndef SYNTHESIS	// Regfile.scala:32:19
    `ifdef RANDOMIZE_MEM_INIT	// Regfile.scala:32:19
      integer initvar;	// Regfile.scala:32:19
      reg [63:0] _RANDOM_MEM;	// Regfile.scala:32:19
    `endif // RANDOMIZE_MEM_INIT
    initial begin	// Regfile.scala:32:19
      `INIT_RANDOM_PROLOG_	// Regfile.scala:32:19
      `ifdef RANDOMIZE_MEM_INIT	// Regfile.scala:32:19
        for (initvar = 0; initvar < 32; initvar = initvar + 1) begin
          _RANDOM_MEM = {{`RANDOM}, {`RANDOM}};
          Memory[initvar] = _RANDOM_MEM[63:0];
        end	// Regfile.scala:32:19
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign R0_data = R0_en ? Memory[R0_addr] : 64'bx;	// Regfile.scala:32:19
  assign R1_data = R1_en ? Memory[R1_addr] : 64'bx;	// Regfile.scala:32:19
  assign R2_data = R2_en ? Memory[R2_addr] : 64'bx;	// Regfile.scala:32:19
endmodule

// VCS coverage exclude_file
module TagArray_combMem(	// Cache.scala:75:23
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [4:0]  R2_addr,
  input         R2_en,
                R2_clk,
  input  [4:0]  R3_addr,
  input         R3_en,
                R3_clk,
  input  [4:0]  R4_addr,
  input         R4_en,
                R4_clk,
  input  [4:0]  R5_addr,
  input         R5_en,
                R5_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [20:0] W0_data,
  input  [4:0]  W1_addr,
  input         W1_en,
                W1_clk,
  input  [20:0] W1_data,
  input  [4:0]  W2_addr,
  input         W2_en,
                W2_clk,
  input  [20:0] W2_data,
  input  [4:0]  W3_addr,
  input         W3_en,
                W3_clk,
  input  [20:0] W3_data,
  output [20:0] R0_data,
                R1_data,
                R2_data,
                R3_data,
                R4_data,
                R5_data);

  reg [20:0] Memory[0:31];	// Cache.scala:75:23
  always @(posedge W0_clk) begin	// Cache.scala:75:23
    if (W0_en)	// Cache.scala:75:23
      Memory[W0_addr] <= W0_data;	// Cache.scala:75:23
    if (W1_en)	// Cache.scala:75:23
      Memory[W1_addr] <= W1_data;	// Cache.scala:75:23
    if (W2_en)	// Cache.scala:75:23
      Memory[W2_addr] <= W2_data;	// Cache.scala:75:23
    if (W3_en)	// Cache.scala:75:23
      Memory[W3_addr] <= W3_data;	// Cache.scala:75:23
  end // always @(posedge)
  `ifndef SYNTHESIS	// Cache.scala:75:23
    `ifdef RANDOMIZE_MEM_INIT	// Cache.scala:75:23
      integer initvar;	// Cache.scala:75:23
      reg [31:0] _RANDOM_MEM;	// Cache.scala:75:23
    `endif // RANDOMIZE_MEM_INIT
    initial begin	// Cache.scala:75:23
      `INIT_RANDOM_PROLOG_	// Cache.scala:75:23
      `ifdef RANDOMIZE_MEM_INIT	// Cache.scala:75:23
        for (initvar = 0; initvar < 32; initvar = initvar + 1) begin
          _RANDOM_MEM = {`RANDOM};
          Memory[initvar] = _RANDOM_MEM[20:0];
        end	// Cache.scala:75:23
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign R0_data = R0_en ? Memory[R0_addr] : 21'bx;	// Cache.scala:75:23
  assign R1_data = R1_en ? Memory[R1_addr] : 21'bx;	// Cache.scala:75:23
  assign R2_data = R2_en ? Memory[R2_addr] : 21'bx;	// Cache.scala:75:23
  assign R3_data = R3_en ? Memory[R3_addr] : 21'bx;	// Cache.scala:75:23
  assign R4_data = R4_en ? Memory[R4_addr] : 21'bx;	// Cache.scala:75:23
  assign R5_data = R5_en ? Memory[R5_addr] : 21'bx;	// Cache.scala:75:23
endmodule

module Fetch(	// <stdin>:2:10
  input         clock,
                reset,
                io_fcfe_jump_flag,
  input  [31:0] io_fcfe_jump_pc,
  input         io_fcfe_flush,
                io_fcfe_stall,
  output [31:0] io_fdio_pc,
  output        io_pc_valid,
  output [31:0] io_pc_bits);

  reg         started;	// Fetch.scala:25:26
  reg  [31:0] pc;	// Fetch.scala:28:21
  reg  [31:0] old_pc;	// Fetch.scala:29:25
  wire        _next_pc_T_2 = io_fcfe_flush & io_fcfe_jump_flag;	// Fetch.scala:36:36
  wire [31:0] _next_pc_T_4 = io_fcfe_jump_pc + 32'h4;	// Fetch.scala:36:85
  wire [31:0] _next_pc_T_7 = pc + 32'h4;	// Fetch.scala:28:21, :36:85, :37:37
  wire [31:0] next_pc = _next_pc_T_2 ? _next_pc_T_4 : started ? _next_pc_T_7 : pc;	// Fetch.scala:25:26, :28:21, :36:{36,85}, :37:37, Mux.scala:101:16
  wire        _io_fdio_pc_T_2 = io_fcfe_flush & io_fcfe_jump_flag;	// Fetch.scala:53:36
  wire        _io_pc_bits_T_3 = pc == old_pc;	// Fetch.scala:28:21, :29:25, :54:17
  always @(posedge clock) begin
    if (reset) begin
      started <= 1'h0;	// Fetch.scala:25:26
      pc <= 32'h80000000;	// Fetch.scala:28:21
      old_pc <= 32'h0;	// Fetch.scala:29:25
    end
    else begin
      started <= 1'h1;	// Fetch.scala:25:26, :26:13
      if (io_fcfe_stall)
        pc <= old_pc;	// Fetch.scala:28:21, :29:25
      else begin
        if (_next_pc_T_2)	// Fetch.scala:36:36
          pc <= _next_pc_T_4;	// Fetch.scala:28:21, :36:85
        else if (started)	// Fetch.scala:25:26, :36:36
          pc <= _next_pc_T_7;	// Fetch.scala:28:21, :37:37
        if (_io_fdio_pc_T_2)	// Fetch.scala:53:36
          old_pc <= io_fcfe_jump_pc;	// Fetch.scala:29:25
        else if (_io_pc_bits_T_3) begin	// Fetch.scala:53:36, :54:17
          if (_next_pc_T_2)	// Fetch.scala:36:36
            old_pc <= _next_pc_T_4;	// Fetch.scala:29:25, :36:85
          else if (started)	// Fetch.scala:25:26, :36:36
            old_pc <= _next_pc_T_7;	// Fetch.scala:29:25, :37:37
          else	// Fetch.scala:25:26, :36:36
            old_pc <= pc;	// Fetch.scala:28:21, :29:25
        end
        else	// Fetch.scala:53:36, :54:17
          old_pc <= pc;	// Fetch.scala:28:21, :29:25
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2:10
        started = _RANDOM_0[0];	// Fetch.scala:25:26
        pc = {_RANDOM_0[31:1], _RANDOM_1[0]};	// Fetch.scala:25:26, :28:21
        old_pc = {_RANDOM_1[31:1], _RANDOM_2[0]};	// Fetch.scala:28:21, :29:25
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_fdio_pc = io_fcfe_stall ? old_pc : _io_fdio_pc_T_2 ? io_fcfe_jump_pc : _io_pc_bits_T_3 ? next_pc : pc;	// <stdin>:2:10, Fetch.scala:28:21, :29:25, :53:36, :54:17, Mux.scala:101:16
  assign io_pc_valid = started;	// <stdin>:2:10, Fetch.scala:25:26
  assign io_pc_bits = io_fcfe_stall ? old_pc : io_fcfe_flush & io_fcfe_jump_flag ? io_fcfe_jump_pc :
                _io_pc_bits_T_3 ? next_pc : pc;	// <stdin>:2:10, Fetch.scala:28:21, :29:25, :54:17, :65:36, Mux.scala:101:16
endmodule

module ControlUnit(	// <stdin>:47:10
  input  [31:0] io_inst,
  output [1:0]  io_jump_type,
  output        io_branch_type,
  output [1:0]  io_opa_type,
  output [2:0]  io_opb_type,
                io_imm_type,
  output [5:0]  io_alu_op,
  output [1:0]  io_wb_type,
  output [2:0]  io_sd_type,
                io_ld_type,
  output [1:0]  io_csr_type);

  wire        _controlsig_T_1 = io_inst == 32'h13;	// Lookup.scala:31:38
  wire        _controlsig_T_3 = io_inst[6:0] == 7'h17;	// Lookup.scala:31:38
  wire        _controlsig_T_5 = io_inst[6:0] == 7'h37;	// Lookup.scala:31:38
  wire        _controlsig_T_7 = io_inst[6:0] == 7'h6F;	// Lookup.scala:31:38
  wire [9:0]  _GEN = {io_inst[14:12], io_inst[6:0]};	// Lookup.scala:31:38
  wire        _controlsig_T_9 = _GEN == 10'h67;	// Lookup.scala:31:38
  wire        _controlsig_T_11 = _GEN == 10'h63;	// Lookup.scala:31:38
  wire        _controlsig_T_13 = _GEN == 10'hE3;	// Lookup.scala:31:38
  wire        _controlsig_T_15 = _GEN == 10'h263;	// Lookup.scala:31:38
  wire        _controlsig_T_17 = _GEN == 10'h2E3;	// Lookup.scala:31:38
  wire        _controlsig_T_19 = _GEN == 10'h363;	// Lookup.scala:31:38
  wire        _controlsig_T_264 = _GEN == 10'h3E3;	// Lookup.scala:31:38
  wire        _controlsig_T_23 = _GEN == 10'h3;	// Lookup.scala:31:38
  wire        _controlsig_T_25 = _GEN == 10'h83;	// Lookup.scala:31:38
  wire        _controlsig_T_27 = _GEN == 10'h103;	// Lookup.scala:31:38
  wire        _controlsig_T_29 = _GEN == 10'h203;	// Lookup.scala:31:38
  wire        _controlsig_T_31 = _GEN == 10'h283;	// Lookup.scala:31:38
  wire        _controlsig_T_33 = _GEN == 10'h303;	// Lookup.scala:31:38
  wire        _controlsig_T_35 = _GEN == 10'h183;	// Lookup.scala:31:38
  wire        _controlsig_T_37 = _GEN == 10'h23;	// Lookup.scala:31:38
  wire        _controlsig_T_39 = _GEN == 10'hA3;	// Lookup.scala:31:38
  wire        _controlsig_T_41 = _GEN == 10'h123;	// Lookup.scala:31:38
  wire        _controlsig_T_43 = _GEN == 10'h1A3;	// Lookup.scala:31:38
  wire        _controlsig_T_45 = _GEN == 10'h13;	// Lookup.scala:31:38
  wire        _controlsig_T_47 = _GEN == 10'h113;	// Lookup.scala:31:38
  wire        _controlsig_T_49 = _GEN == 10'h193;	// Lookup.scala:31:38
  wire        _controlsig_T_51 = _GEN == 10'h213;	// Lookup.scala:31:38
  wire        _controlsig_T_53 = _GEN == 10'h313;	// Lookup.scala:31:38
  wire        _controlsig_T_55 = _GEN == 10'h393;	// Lookup.scala:31:38
  wire [15:0] _GEN_0 = {io_inst[31:26], io_inst[14:12], io_inst[6:0]};	// Lookup.scala:31:38
  wire        _controlsig_T_57 = _GEN_0 == 16'h93;	// Lookup.scala:31:38
  wire        _controlsig_T_59 = _GEN_0 == 16'h293;	// Lookup.scala:31:38
  wire        _controlsig_T_61 = _GEN_0 == 16'h4293;	// Lookup.scala:31:38
  wire [16:0] _GEN_1 = {io_inst[31:25], io_inst[14:12], io_inst[6:0]};	// Lookup.scala:31:38
  wire        _controlsig_T_63 = _GEN_1 == 17'h33;	// Lookup.scala:31:38
  wire        _controlsig_T_65 = _GEN_1 == 17'h8033;	// Lookup.scala:31:38
  wire        _controlsig_T_67 = _GEN_0 == 16'hB3;	// Lookup.scala:31:38
  wire        _controlsig_T_69 = _GEN_1 == 17'h133;	// Lookup.scala:31:38
  wire        _controlsig_T_71 = _GEN_1 == 17'h1B3;	// Lookup.scala:31:38
  wire        _controlsig_T_73 = _GEN_1 == 17'h233;	// Lookup.scala:31:38
  wire        _controlsig_T_75 = _GEN_1 == 17'h2B3;	// Lookup.scala:31:38
  wire        _controlsig_T_77 = _GEN_1 == 17'h82B3;	// Lookup.scala:31:38
  wire        _controlsig_T_79 = _GEN_1 == 17'h333;	// Lookup.scala:31:38
  wire        _controlsig_T_81 = _GEN_1 == 17'h3B3;	// Lookup.scala:31:38
  wire        _controlsig_T_83 = _GEN_1 == 17'h433;	// Lookup.scala:31:38
  wire        _controlsig_T_85 = _GEN_1 == 17'h4B3;	// Lookup.scala:31:38
  wire        _controlsig_T_87 = _GEN_1 == 17'h533;	// Lookup.scala:31:38
  wire        _controlsig_T_89 = _GEN_1 == 17'h5B3;	// Lookup.scala:31:38
  wire        _controlsig_T_91 = _GEN_1 == 17'h633;	// Lookup.scala:31:38
  wire        _controlsig_T_93 = _GEN_1 == 17'h6B3;	// Lookup.scala:31:38
  wire        _controlsig_T_95 = _GEN_1 == 17'h733;	// Lookup.scala:31:38
  wire        _controlsig_T_97 = _GEN_1 == 17'h7B3;	// Lookup.scala:31:38
  wire        _controlsig_T_99 = _GEN == 10'h1B;	// Lookup.scala:31:38
  wire        _controlsig_T_101 = _GEN_0 == 16'h9B;	// Lookup.scala:31:38
  wire        _controlsig_T_103 = _GEN_0 == 16'h29B;	// Lookup.scala:31:38
  wire        _controlsig_T_105 = _GEN_0 == 16'h429B;	// Lookup.scala:31:38
  wire        _controlsig_T_107 = _GEN_1 == 17'h3B;	// Lookup.scala:31:38
  wire        _controlsig_T_109 = _GEN_1 == 17'h803B;	// Lookup.scala:31:38
  wire        _controlsig_T_111 = _GEN_1 == 17'hBB;	// Lookup.scala:31:38
  wire        _controlsig_T_113 = _GEN_1 == 17'h2BB;	// Lookup.scala:31:38
  wire        _controlsig_T_115 = _GEN_1 == 17'h82BB;	// Lookup.scala:31:38
  wire        _controlsig_T_117 = _GEN_1 == 17'h43B;	// Lookup.scala:31:38
  wire        _controlsig_T_119 = _GEN_1 == 17'h63B;	// Lookup.scala:31:38
  wire        _controlsig_T_121 = _GEN_1 == 17'h6BB;	// Lookup.scala:31:38
  wire        _controlsig_T_123 = _GEN_1 == 17'h73B;	// Lookup.scala:31:38
  wire        _controlsig_T_125 = _GEN_1 == 17'h7BB;	// Lookup.scala:31:38
  wire        _controlsig_T_127 = _GEN == 10'hF3;	// Lookup.scala:31:38
  wire        _controlsig_T_129 = _GEN == 10'h173;	// Lookup.scala:31:38
  wire        _controlsig_T_131 = _GEN == 10'h1F3;	// Lookup.scala:31:38
  wire        _controlsig_T_133 = _GEN == 10'h2F3;	// Lookup.scala:31:38
  wire        _controlsig_T_135 = _GEN == 10'h373;	// Lookup.scala:31:38
  wire        _controlsig_T_137 = _GEN == 10'h3F3;	// Lookup.scala:31:38
  wire [1:0]  _controlsig_T_750 = {2{_controlsig_T_137}};	// Lookup.scala:31:38, :34:39
  wire        _GEN_2 = _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264 | _controlsig_T_23 | _controlsig_T_25 |
                _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 |
                _controlsig_T_35 | _controlsig_T_37 | _controlsig_T_39 | _controlsig_T_41 |
                _controlsig_T_43 | _controlsig_T_45 | _controlsig_T_47 | _controlsig_T_49 |
                _controlsig_T_51 | _controlsig_T_53 | _controlsig_T_55 | _controlsig_T_57 |
                _controlsig_T_59 | _controlsig_T_61 | _controlsig_T_63 | _controlsig_T_65 |
                _controlsig_T_67 | _controlsig_T_69;	// Lookup.scala:31:38, :34:39
  wire        _GEN_3 = _controlsig_T_71 | _controlsig_T_73 | _controlsig_T_75 | _controlsig_T_77 |
                _controlsig_T_79 | _controlsig_T_81 | _controlsig_T_83 | _controlsig_T_85 |
                _controlsig_T_87 | _controlsig_T_89 | _controlsig_T_91 | _controlsig_T_93 |
                _controlsig_T_95 | _controlsig_T_97 | _controlsig_T_99 | _controlsig_T_101 |
                _controlsig_T_103 | _controlsig_T_105 | _controlsig_T_107 | _controlsig_T_109 |
                _controlsig_T_111 | _controlsig_T_113 | _controlsig_T_115 | _controlsig_T_117 |
                _controlsig_T_119 | _controlsig_T_121 | _controlsig_T_123 | _controlsig_T_125 |
                _controlsig_T_127 | _controlsig_T_129 | _controlsig_T_131;	// Lookup.scala:31:38, :34:39
  wire        _GEN_4 = _controlsig_T_7 | _controlsig_T_9;	// Lookup.scala:31:38, :34:39
  wire        _GEN_5 = _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264;	// Lookup.scala:31:38, :34:39
  wire        _GEN_6 = _controlsig_T_3 | _controlsig_T_5;	// Lookup.scala:31:38, :34:39
  wire        _GEN_7 = _controlsig_T_45 | _controlsig_T_47 | _controlsig_T_49 | _controlsig_T_51 |
                _controlsig_T_53 | _controlsig_T_55 | _controlsig_T_57 | _controlsig_T_59 |
                _controlsig_T_61 | _controlsig_T_63 | _controlsig_T_65 | _controlsig_T_67 |
                _controlsig_T_69 | _controlsig_T_71 | _controlsig_T_73 | _controlsig_T_75 |
                _controlsig_T_77 | _controlsig_T_79 | _controlsig_T_81 | _controlsig_T_83 |
                _controlsig_T_85 | _controlsig_T_87;	// Lookup.scala:31:38, :34:39
  wire        _GEN_8 = _controlsig_T_89 | _controlsig_T_91 | _controlsig_T_93 | _controlsig_T_95 |
                _controlsig_T_97 | _controlsig_T_99 | _controlsig_T_101 | _controlsig_T_103 |
                _controlsig_T_105 | _controlsig_T_107 | _controlsig_T_109 | _controlsig_T_111 |
                _controlsig_T_113 | _controlsig_T_115 | _controlsig_T_117 | _controlsig_T_119 |
                _controlsig_T_121 | _controlsig_T_123 | _controlsig_T_125 | _controlsig_T_127 |
                _controlsig_T_129 | _controlsig_T_131 | ~(_controlsig_T_133 | _controlsig_T_135 |
                _controlsig_T_137);	// Lookup.scala:31:38, :34:39
  wire        _GEN_9 = _controlsig_T_37 | _controlsig_T_39 | _controlsig_T_41 | _controlsig_T_43;	// Lookup.scala:31:38, :34:39
  wire        _GEN_10 = _controlsig_T_3 | _controlsig_T_5 | _controlsig_T_7 | _controlsig_T_9;	// Lookup.scala:31:38, :34:39
  wire        _GEN_11 = _controlsig_T_45 | _controlsig_T_47 | _controlsig_T_49 | _controlsig_T_51 |
                _controlsig_T_53 | _controlsig_T_55 | _controlsig_T_57 | _controlsig_T_59 |
                _controlsig_T_61 | _controlsig_T_63 | _controlsig_T_65 | _controlsig_T_67 |
                _controlsig_T_69 | _controlsig_T_71 | _controlsig_T_73 | _controlsig_T_75 |
                _controlsig_T_77 | _controlsig_T_79 | _controlsig_T_81 | _controlsig_T_83;	// Lookup.scala:31:38, :34:39
  wire        _GEN_12 = _controlsig_T_85 | _controlsig_T_87 | _controlsig_T_89 | _controlsig_T_91 |
                _controlsig_T_93 | _controlsig_T_95 | _controlsig_T_97 | _controlsig_T_99 |
                _controlsig_T_101 | _controlsig_T_103 | _controlsig_T_105 | _controlsig_T_107 |
                _controlsig_T_109 | _controlsig_T_111 | _controlsig_T_113 | _controlsig_T_115 |
                _controlsig_T_117 | _controlsig_T_119 | _controlsig_T_121 | _controlsig_T_123 |
                _controlsig_T_125;	// Lookup.scala:31:38, :34:39
  wire        _GEN_13 = _controlsig_T_1 | _controlsig_T_3 | _controlsig_T_5 | _controlsig_T_7 | _controlsig_T_9 |
                _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264 | _controlsig_T_23 | _controlsig_T_25 |
                _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 |
                _controlsig_T_35 | _controlsig_T_37 | _controlsig_T_39 | _controlsig_T_41 |
                _controlsig_T_43 | _controlsig_T_45 | _controlsig_T_47 | _controlsig_T_49 |
                _controlsig_T_51 | _controlsig_T_53 | _controlsig_T_55 | _controlsig_T_57 |
                _controlsig_T_59 | _controlsig_T_61;	// Lookup.scala:31:38, :34:39
  wire        _GEN_14 = _controlsig_T_63 | _controlsig_T_65 | _controlsig_T_67 | _controlsig_T_69 |
                _controlsig_T_71 | _controlsig_T_73 | _controlsig_T_75 | _controlsig_T_77 |
                _controlsig_T_79 | _controlsig_T_81 | _controlsig_T_83 | _controlsig_T_85 |
                _controlsig_T_87 | _controlsig_T_89 | _controlsig_T_91 | _controlsig_T_93 |
                _controlsig_T_95 | _controlsig_T_97 | _controlsig_T_99 | _controlsig_T_101 |
                _controlsig_T_103 | _controlsig_T_105 | _controlsig_T_107 | _controlsig_T_109 |
                _controlsig_T_111 | _controlsig_T_113 | _controlsig_T_115 | _controlsig_T_117 |
                _controlsig_T_119 | _controlsig_T_121 | _controlsig_T_123 | _controlsig_T_125;	// Lookup.scala:31:38, :34:39
  assign io_jump_type = _controlsig_T_1 | _controlsig_T_3 | _controlsig_T_5 ? 2'h0 : _controlsig_T_7 ? 2'h1 :
                {_controlsig_T_9, 1'h0};	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_branch_type = ~_controlsig_T_1 & ~_controlsig_T_3 & ~_controlsig_T_5 & ~_controlsig_T_7 &
                ~_controlsig_T_9 & (_controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 |
                _controlsig_T_17 | _controlsig_T_19 | _controlsig_T_264);	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_opa_type = _controlsig_T_1 ? 2'h0 : _controlsig_T_3 ? 2'h1 : _controlsig_T_5 ? 2'h0 : _GEN_4 ? 2'h1 :
                _GEN_2 | _GEN_3 ? 2'h2 : _controlsig_T_133 | _controlsig_T_135 ? 2'h3 : _controlsig_T_750;	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_opb_type = _controlsig_T_1 ? 3'h0 : _GEN_6 ? 3'h1 : _GEN_4 ? 3'h3 : _GEN_5 ? 3'h2 : _controlsig_T_23 |
                _controlsig_T_25 | _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 |
                _controlsig_T_33 | _controlsig_T_35 | _controlsig_T_37 | _controlsig_T_39 |
                _controlsig_T_41 | _controlsig_T_43 | _controlsig_T_45 | _controlsig_T_47 |
                _controlsig_T_49 | _controlsig_T_51 | _controlsig_T_53 | _controlsig_T_55 |
                _controlsig_T_57 | _controlsig_T_59 | _controlsig_T_61 ? 3'h1 : _controlsig_T_63 |
                _controlsig_T_65 | _controlsig_T_67 | _controlsig_T_69 | _controlsig_T_71 |
                _controlsig_T_73 | _controlsig_T_75 | _controlsig_T_77 | _controlsig_T_79 |
                _controlsig_T_81 | _controlsig_T_83 | _controlsig_T_85 | _controlsig_T_87 |
                _controlsig_T_89 | _controlsig_T_91 | _controlsig_T_93 | _controlsig_T_95 |
                _controlsig_T_97 ? 3'h2 : _controlsig_T_99 | _controlsig_T_101 | _controlsig_T_103 |
                _controlsig_T_105 ? 3'h1 : _controlsig_T_107 | _controlsig_T_109 | _controlsig_T_111 |
                _controlsig_T_113 | _controlsig_T_115 | _controlsig_T_117 | _controlsig_T_119 |
                _controlsig_T_121 | _controlsig_T_123 | _controlsig_T_125 ? 3'h2 : _controlsig_T_127 ? 3'h0
                : _controlsig_T_129 | _controlsig_T_131 ? 3'h4 : _controlsig_T_133 ? 3'h0 :
                _controlsig_T_135 ? 3'h4 : {_controlsig_T_137, 2'h0};	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_imm_type = _controlsig_T_1 ? 3'h0 : _GEN_6 ? 3'h1 : _controlsig_T_7 ? 3'h2 : _controlsig_T_9 |
                _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264 | _controlsig_T_23 | _controlsig_T_25 |
                _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 |
                _controlsig_T_35 ? 3'h0 : _GEN_9 ? 3'h3 : _GEN_7 | _GEN_8 ? 3'h0 : 3'h5;	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_alu_op = _controlsig_T_1 ? 6'h3F : _GEN_10 ? 6'h0 : _controlsig_T_11 ? 6'h2 : _controlsig_T_13 ?
                6'h3 : _controlsig_T_15 ? 6'h4 : _controlsig_T_17 ? 6'h5 : _controlsig_T_19 ? 6'h6 :
                _controlsig_T_264 ? 6'h7 : _controlsig_T_23 | _controlsig_T_25 | _controlsig_T_27 |
                _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 | _controlsig_T_35 |
                _controlsig_T_37 | _controlsig_T_39 | _controlsig_T_41 | _controlsig_T_43 |
                _controlsig_T_45 ? 6'h0 : _controlsig_T_47 ? 6'h4 : _controlsig_T_49 ? 6'h6 :
                _controlsig_T_51 ? 6'h8 : _controlsig_T_53 ? 6'h9 : _controlsig_T_55 ? 6'h10 :
                _controlsig_T_57 ? 6'hD : _controlsig_T_59 ? 6'hE : _controlsig_T_61 ? 6'hF :
                _controlsig_T_63 ? 6'h0 : _controlsig_T_65 ? 6'h1 : _controlsig_T_67 ? 6'hA :
                _controlsig_T_69 ? 6'h4 : _controlsig_T_71 ? 6'h6 : _controlsig_T_73 ? 6'h8 :
                _controlsig_T_75 ? 6'hB : _controlsig_T_77 ? 6'hC : _controlsig_T_79 ? 6'h9 :
                _controlsig_T_81 ? 6'h10 : _controlsig_T_83 ? 6'h12 : _controlsig_T_85 ? 6'h13 :
                _controlsig_T_87 ? 6'h14 : _controlsig_T_89 ? 6'h15 : _controlsig_T_91 ? 6'h16 :
                _controlsig_T_93 ? 6'h17 : _controlsig_T_95 ? 6'h18 : _controlsig_T_97 ? 6'h19 :
                _controlsig_T_99 ? 6'h1A : _controlsig_T_101 ? 6'h1B : _controlsig_T_103 ? 6'h1C :
                _controlsig_T_105 ? 6'h1D : _controlsig_T_107 ? 6'h1E : _controlsig_T_109 ? 6'h1F :
                _controlsig_T_111 ? 6'h20 : _controlsig_T_113 ? 6'h21 : _controlsig_T_115 ? 6'h22 :
                _controlsig_T_117 ? 6'h23 : _controlsig_T_119 ? 6'h24 : _controlsig_T_121 ? 6'h25 :
                _controlsig_T_123 ? 6'h26 : _controlsig_T_125 ? 6'h27 : _controlsig_T_127 ? 6'h0 :
                _controlsig_T_129 ? 6'h9 : _controlsig_T_131 ? 6'h28 : _controlsig_T_133 ? 6'h0 :
                _controlsig_T_135 ? 6'h9 : _controlsig_T_137 ? 6'h28 : 6'h3F;	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_wb_type = _controlsig_T_1 ? 2'h0 : _GEN_10 ? 2'h1 : _GEN_5 ? 2'h0 : _controlsig_T_23 |
                _controlsig_T_25 | _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 |
                _controlsig_T_33 | _controlsig_T_35 ? 2'h2 : _GEN_9 ? 2'h0 : _GEN_11 | _GEN_12 ? 2'h1 :
                _controlsig_T_127 | _controlsig_T_129 | _controlsig_T_131 | _controlsig_T_133 |
                _controlsig_T_135 ? 2'h3 : _controlsig_T_750;	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_sd_type = _controlsig_T_1 | _controlsig_T_3 | _controlsig_T_5 | _controlsig_T_7 | _controlsig_T_9 |
                _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264 | _controlsig_T_23 | _controlsig_T_25 |
                _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 |
                _controlsig_T_35 ? 3'h0 : _controlsig_T_37 ? 3'h1 : _controlsig_T_39 ? 3'h2 :
                _controlsig_T_41 ? 3'h3 : {_controlsig_T_43, 2'h0};	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_ld_type = _controlsig_T_1 | _controlsig_T_3 | _controlsig_T_5 | _controlsig_T_7 | _controlsig_T_9 |
                _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264 ? 3'h0 : _controlsig_T_23 ? 3'h1 : _controlsig_T_25 ?
                3'h2 : _controlsig_T_27 ? 3'h3 : _controlsig_T_29 ? 3'h5 : _controlsig_T_31 ? 3'h6 :
                _controlsig_T_33 ? 3'h7 : {_controlsig_T_35, 2'h0};	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_csr_type = _GEN_13 | _GEN_14 ? 2'h0 : _controlsig_T_127 ? 2'h1 : _controlsig_T_129 ? 2'h2 :
                _controlsig_T_131 ? 2'h3 : _controlsig_T_133 ? 2'h1 : _controlsig_T_135 ? 2'h2 :
                _controlsig_T_750;	// <stdin>:47:10, Lookup.scala:31:38, :34:39
endmodule

module Eximm(	// <stdin>:891:10
  input  [31:0] io_inst,
  input  [2:0]  io_imm_type,
  output [63:0] io_eximm);

  wire [7:0][63:0] _GEN = {{64'h0}, {64'h0}, {{59'h0, io_inst[19:15]}}, {{{52{io_inst[31]}}, io_inst[7],
                io_inst[30:25], io_inst[11:8], 1'h0}}, {{{52{io_inst[31]}}, io_inst[31:25],
                io_inst[11:7]}}, {{{44{io_inst[31]}}, io_inst[19:12], io_inst[20], io_inst[30:21], 1'h0}},
                {{{32{io_inst[31]}}, io_inst[31:12], 12'h0}}, {{{52{io_inst[31]}}, io_inst[31:20]}}};	// Bitwise.scala:77:12, Cat.scala:33:92, Eximm.scala:30:{42,56}, :31:56, :32:{56,72,85}, :33:{56,72}, :34:{69,81,97}, :35:29, Mux.scala:81:{58,61}
  assign io_eximm = _GEN[io_imm_type];	// <stdin>:891:10, Mux.scala:81:{58,61}
endmodule

module Decode(	// <stdin>:952:10
  input         clock,
                reset,
                io_inst_valid,
  input  [63:0] io_inst_bits_data,
  input  [31:0] io_fdio_pc,
  input  [63:0] io_rfio_reg1_rdata,
                io_rfio_reg2_rdata,
  input         io_branch,
                io_stall,
                io_flush,
                io_fwde_fw_sel1,
                io_fwde_fw_sel2,
  input  [63:0] io_fwde_fw_data1,
                io_fwde_fw_data2,
  input         io_fwde_csr_fw_sel,
  input  [63:0] io_fwde_csr_fw_data,
                io_csrs_csr_rdata,
  output [4:0]  io_rfio_reg1_raddr,
                io_rfio_reg2_raddr,
  output [63:0] io_deio_op_a,
                io_deio_op_b,
  output [4:0]  io_deio_reg_waddr,
  output        io_deio_branch_type,
  output [63:0] io_deio_branch_addr,
  output [5:0]  io_deio_alu_op,
                io_deio_shamt,
  output [1:0]  io_deio_wb_type,
  output [2:0]  io_deio_sd_type,
  output [63:0] io_deio_reg2_rdata,
  output [2:0]  io_deio_ld_type,
  output [63:0] io_deio_csr_t,
  output [11:0] io_deio_csr_waddr,
  output        io_deio_csr_wen,
                io_deio_has_inst,
                io_jump_flag,
  output [31:0] io_jump_pc,
  output        io_load_use,
  output [4:0]  io_fwde_reg1_raddr,
                io_fwde_reg2_raddr,
  output [11:0] io_fwde_csr_raddr,
                io_csrs_csr_raddr);

  wire [63:0] _eximm_io_eximm;	// Decode.scala:55:23
  wire [1:0]  _cu_io_jump_type;	// Decode.scala:54:20
  wire [1:0]  _cu_io_opa_type;	// Decode.scala:54:20
  wire [2:0]  _cu_io_opb_type;	// Decode.scala:54:20
  wire [2:0]  _cu_io_imm_type;	// Decode.scala:54:20
  wire [2:0]  _cu_io_sd_type;	// Decode.scala:54:20
  wire [2:0]  _cu_io_ld_type;	// Decode.scala:54:20
  wire [1:0]  _cu_io_csr_type;	// Decode.scala:54:20
  wire [31:0] inst;	// Decode.scala:44:20
  assign inst = io_inst_valid ? io_inst_bits_data[31:0] : 32'h13;	// Decode.scala:63:{10,16}
  reg  [4:0]  lu_rd;	// Decode.scala:73:24
  wire        _io_deio_op_a_T_3 = _cu_io_opa_type == 2'h2;	// Decode.scala:54:20, :81:34
  wire        _load_use_T_12 = inst[19:15] == lu_rd;	// Decode.scala:64:20, :65:16, :73:24, :81:64
  wire        _io_deio_op_b_T_6 = _cu_io_opb_type == 3'h2;	// Decode.scala:54:20, :81:95
  wire        _load_use_T_8 = inst[24:20] == lu_rd;	// Decode.scala:64:20, :66:16, :73:24, :81:125
  wire        _io_jump_pc_T_3 = _cu_io_jump_type == 2'h2;	// Decode.scala:54:20, :81:34, :82:65
  wire        _load_use_T_16 = (_io_deio_op_a_T_3 & _load_use_T_12 | _io_deio_op_b_T_6 & _load_use_T_8 | (|_cu_io_sd_type)
                & _load_use_T_8 | _io_jump_pc_T_3 & _load_use_T_12) & (|lu_rd);	// Decode.scala:54:20, :73:24, :81:{34,57,64,95,118,125}, :82:{20,24,44,65,91}, :83:{7,17}
  wire [63:0] _io_jump_pc_T_4 = io_fwde_fw_sel1 ? io_fwde_fw_data1 : io_rfio_reg1_rdata;	// Decode.scala:102:38
  wire [63:0] _io_deio_reg2_rdata_T = io_fwde_fw_sel2 ? io_fwde_fw_data2 : io_rfio_reg2_rdata;	// Decode.scala:112:38
  wire [63:0] _io_deio_csr_t_T = io_fwde_csr_fw_sel ? io_fwde_csr_fw_data : io_csrs_csr_rdata;	// Decode.scala:114:37
  wire        _io_jump_pc_T = _cu_io_jump_type == 2'h1;	// Decode.scala:54:20, :134:38, Mux.scala:81:61
  wire [31:0] _GEN = _io_jump_pc_T_4[31:0] + _eximm_io_eximm[31:0];	// Decode.scala:55:23, :102:38, :139:121
  always @(posedge clock) begin
    if (reset)
      lu_rd <= 5'h0;	// Decode.scala:73:24
    else if (io_branch)
      lu_rd <= 5'h0;	// Decode.scala:73:24
    else if (io_stall) begin
    end
    else if (_load_use_T_16 | _cu_io_ld_type == 3'h0)	// Decode.scala:54:20, :78:17, :79:32, :83:7
      lu_rd <= 5'h0;	// Decode.scala:73:24
    else	// Decode.scala:54:20, :78:17, :79:32, :83:7
      lu_rd <= inst[11:7];	// Decode.scala:64:20, :67:15, :73:24
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:952:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:952:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:952:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:952:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:952:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:952:10
        `INIT_RANDOM_PROLOG_	// <stdin>:952:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:952:10
        _RANDOM_0 = `RANDOM;	// <stdin>:952:10
        lu_rd = _RANDOM_0[4:0];	// Decode.scala:73:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:952:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:952:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  ControlUnit cu (	// Decode.scala:54:20
    .io_inst        (inst),	// Decode.scala:64:20
    .io_jump_type   (_cu_io_jump_type),
    .io_branch_type (io_deio_branch_type),
    .io_opa_type    (_cu_io_opa_type),
    .io_opb_type    (_cu_io_opb_type),
    .io_imm_type    (_cu_io_imm_type),
    .io_alu_op      (io_deio_alu_op),
    .io_wb_type     (io_deio_wb_type),
    .io_sd_type     (_cu_io_sd_type),
    .io_ld_type     (_cu_io_ld_type),
    .io_csr_type    (_cu_io_csr_type)
  );
  Eximm eximm (	// Decode.scala:55:23
    .io_inst     (inst),	// Decode.scala:64:20
    .io_imm_type (_cu_io_imm_type),	// Decode.scala:54:20
    .io_eximm    (_eximm_io_eximm)
  );
  assign io_rfio_reg1_raddr = inst[19:15];	// <stdin>:952:10, Decode.scala:64:20, :65:16
  assign io_rfio_reg2_raddr = inst[24:20];	// <stdin>:952:10, Decode.scala:64:20, :66:16
  assign io_deio_op_a = (&_cu_io_opa_type) ? _eximm_io_eximm : _io_deio_op_a_T_3 ? _io_jump_pc_T_4 : {32'h0,
                _cu_io_opa_type == 2'h1 ? io_fdio_pc : 32'h0};	// <stdin>:952:10, Decode.scala:54:20, :55:23, :81:34, :102:38, Mux.scala:81:{58,61}
  assign io_deio_op_b = _cu_io_opb_type == 3'h4 ? _io_deio_csr_t_T : _cu_io_opb_type == 3'h3 ? 64'h4 :
                _io_deio_op_b_T_6 ? _io_deio_reg2_rdata_T : _cu_io_opb_type == 3'h1 ? _eximm_io_eximm :
                64'h0;	// <stdin>:952:10, Decode.scala:54:20, :55:23, :81:95, :112:38, :114:37, Mux.scala:81:{58,61}
  assign io_deio_reg_waddr = inst[11:7];	// <stdin>:952:10, Decode.scala:64:20, :67:15
  assign io_deio_branch_addr = {32'h0, io_fdio_pc} + {{52{inst[31]}}, inst[7], inst[30:25], inst[11:8], 1'h0};	// <stdin>:952:10, Cat.scala:33:92, Decode.scala:64:20, :79:17, :120:{39,58,79,88,101}, Mux.scala:81:58
  assign io_deio_shamt = inst[25:20];	// <stdin>:952:10, Decode.scala:64:20, :68:18
  assign io_deio_sd_type = _cu_io_sd_type;	// <stdin>:952:10, Decode.scala:54:20
  assign io_deio_reg2_rdata = _io_deio_reg2_rdata_T;	// <stdin>:952:10, Decode.scala:112:38
  assign io_deio_ld_type = _cu_io_ld_type;	// <stdin>:952:10, Decode.scala:54:20
  assign io_deio_csr_t = _io_deio_csr_t_T;	// <stdin>:952:10, Decode.scala:114:37
  assign io_deio_csr_waddr = (|_cu_io_csr_type) ? inst[31:20] : 12'h0;	// <stdin>:952:10, Decode.scala:54:20, :64:20, :128:{29,45}
  assign io_deio_csr_wen = |_cu_io_csr_type;	// <stdin>:952:10, Decode.scala:54:20, :128:45
  assign io_deio_has_inst = ~(inst == 32'h13 | io_flush);	// <stdin>:952:10, Decode.scala:63:16, :64:20, :131:{28,35,43}
  assign io_jump_flag = _io_jump_pc_T | _io_jump_pc_T_3;	// <stdin>:952:10, Decode.scala:82:65, :134:{38,63}
  assign io_jump_pc = _io_jump_pc_T ? io_fdio_pc + _eximm_io_eximm[31:0] : _io_jump_pc_T_3 ? {_GEN[31:1], 1'h0} :
                32'h80000000;	// <stdin>:952:10, Decode.scala:55:23, :79:17, :82:65, :134:38, :138:71, :139:{121,139}, Mux.scala:101:16
  assign io_load_use = _load_use_T_16;	// <stdin>:952:10, Decode.scala:83:7
  assign io_fwde_reg1_raddr = inst[19:15];	// <stdin>:952:10, Decode.scala:64:20, :65:16
  assign io_fwde_reg2_raddr = inst[24:20];	// <stdin>:952:10, Decode.scala:64:20, :66:16
  assign io_fwde_csr_raddr = inst[31:20];	// <stdin>:952:10, Decode.scala:64:20
  assign io_csrs_csr_raddr = inst[31:20];	// <stdin>:952:10, Decode.scala:64:20
endmodule

module BoothMul(	// <stdin>:1091:10
  input         clock,
                reset,
                io_mul_valid,
                io_mulw,
  input  [1:0]  io_mul_signed,
  input  [63:0] io_multiplicand,
                io_multiplier,
  output        io_out_valid,
  output [63:0] io_result_hi,
                io_result_lo);

  reg         out_valid;	// BoothMul.scala:30:28
  reg [63:0]  result_hi;	// BoothMul.scala:31:28
  reg [63:0]  result_lo;	// BoothMul.scala:32:28
  reg [66:0]  multiplierReg;	// BoothMul.scala:43:32
  reg [131:0] multiplicandReg;	// BoothMul.scala:44:34
  reg [131:0] resultReg;	// BoothMul.scala:45:28
  reg         state;	// BoothMul.scala:47:24
  reg [5:0]   shiftCounter;	// BoothMul.scala:52:31
  reg [5:0]   total;	// BoothMul.scala:53:24
  always @(posedge clock) begin
    if (reset) begin
      out_valid <= 1'h0;	// BoothMul.scala:29:28, :30:28
      result_hi <= 64'h0;	// BoothMul.scala:31:28
      result_lo <= 64'h0;	// BoothMul.scala:31:28, :32:28
      multiplierReg <= 67'h0;	// BoothMul.scala:43:32
      multiplicandReg <= 132'h0;	// BoothMul.scala:44:34
      resultReg <= 132'h0;	// BoothMul.scala:44:34, :45:28
      state <= 1'h0;	// BoothMul.scala:29:28, :47:24
      shiftCounter <= 6'h0;	// BoothMul.scala:52:31
      total <= 6'h0;	// BoothMul.scala:52:31, :53:24
    end
    else begin
      automatic logic _T_4;	// BoothMul.scala:114:31
      automatic logic _GEN;	// BoothMul.scala:30:28, :55:18, :114:41
      _T_4 = shiftCounter == total;	// BoothMul.scala:52:31, :53:24, :114:31
      _GEN = state & _T_4;	// BoothMul.scala:30:28, :47:24, :55:18, :114:{31,41}
      out_valid <= state & (_GEN | out_valid);	// BoothMul.scala:30:28, :47:24, :55:18, :57:23, :114:41
      if (state) begin	// BoothMul.scala:47:24
        automatic logic _GEN_0;	// BoothMul.scala:45:28, :55:18, :114:41
        _GEN_0 = ~state | _T_4;	// BoothMul.scala:45:28, :47:24, :55:18, :114:{31,41}
        if (_GEN) begin	// BoothMul.scala:30:28, :55:18, :114:41
          result_hi <= resultReg[127:64];	// BoothMul.scala:31:28, :45:28, :117:39
          result_lo <= resultReg[63:0];	// BoothMul.scala:32:28, :45:28, :118:39
        end
        if (_GEN_0) begin	// BoothMul.scala:45:28, :55:18, :114:41
        end
        else begin	// BoothMul.scala:45:28, :55:18, :114:41
          automatic logic [132:0]      _GEN_1;	// Mux.scala:81:58
          automatic logic [132:0]      _GEN_2;	// Mux.scala:81:58
          automatic logic [7:0][132:0] _GEN_3;	// Mux.scala:81:{58,61}
          _GEN_1 = {1'h0, multiplierReg[2:0] == 3'h2 | multiplierReg[2:0] == 3'h1 ? multiplicandReg : 132'h0};	// BoothMul.scala:29:28, :43:32, :44:34, :121:65, Mux.scala:81:{58,61}
          _GEN_2 = {1'h0, 132'h0 - multiplicandReg};	// BoothMul.scala:29:28, :44:34, :128:38, Mux.scala:81:58
          multiplierReg <= {2'h0, multiplierReg[66:2]};	// BoothMul.scala:43:32, :135:48, Cat.scala:33:92
          multiplicandReg <= {multiplicandReg[129:0], 2'h0};	// BoothMul.scala:44:34, :134:33, Cat.scala:33:92
          _GEN_3 = {{133'h0}, {_GEN_2}, {_GEN_2}, {133'h0 - {multiplicandReg, 1'h0}}, {{multiplicandReg,
                                                                                1'h0}}, {_GEN_1}, {_GEN_1}, {_GEN_1}};	// BoothMul.scala:29:28, :44:34, :126:54, :127:38, Mux.scala:81:{58,61}
          resultReg <= resultReg + _GEN_3[multiplierReg[2:0]][131:0];	// BoothMul.scala:43:32, :45:28, :121:{40,65}, Mux.scala:81:{58,61}
        end
        state <= (~state | ~_T_4) & state;	// BoothMul.scala:47:24, :55:18, :114:{31,41}, :115:23
        if (_GEN_0) begin	// BoothMul.scala:45:28, :55:18, :114:41
        end
        else	// BoothMul.scala:45:28, :55:18, :114:41
          shiftCounter <= shiftCounter + 6'h1;	// BoothMul.scala:52:31, :137:46
      end
      else begin	// BoothMul.scala:47:24
        automatic logic [2:0] _choose_T;	// Cat.scala:33:92
        automatic logic       _T_2;	// BoothMul.scala:64:31
        _choose_T = {io_mulw, io_mul_signed};	// Cat.scala:33:92
        _T_2 = io_mul_valid & ~out_valid;	// BoothMul.scala:30:28, :64:{31,34}
        result_hi <= 64'h0;	// BoothMul.scala:31:28
        result_lo <= 64'h0;	// BoothMul.scala:31:28, :32:28
        if (_T_2) begin	// BoothMul.scala:64:31
          automatic logic [7:0][66:0]  _GEN_4 = {{{32'h0, {2{io_multiplier[31]}}, io_multiplier[31:0], 1'h0}}, {{34'h0,
                                                                                io_multiplier[31:0], 1'h0}}, {67'h0}, {{34'h0, io_multiplier[31:0], 1'h0}},
                                                                                {{{2{io_multiplier[63]}}, io_multiplier, 1'h0}}, {{2'h0, io_multiplier, 1'h0}}, {67'h0},
                                                                                {{2'h0, io_multiplier, 1'h0}}};	// Bitwise.scala:77:12, BoothMul.scala:29:28, :43:32, :85:62, :87:65, :89:74, Cat.scala:33:92, Mux.scala:81:{58,61}
          automatic logic [7:0][131:0] _GEN_5 = {{{{100{io_multiplicand[31]}}, io_multiplicand[31:0]}}, {{{100{io_multiplicand[31]}},
                                                                                io_multiplicand[31:0]}}, {132'h0}, {{100'h0, io_multiplicand[31:0]}},
                                                                                {{{68{io_multiplicand[63]}}, io_multiplicand}}, {{{68{io_multiplicand[63]}},
                                                                                io_multiplicand}}, {132'h0}, {{68'h0, io_multiplicand}}};	// Bitwise.scala:77:12, BoothMul.scala:44:34, :97:65, :100:68, :101:66, Cat.scala:33:92, Mux.scala:81:{58,61}
          multiplierReg <= _GEN_4[_choose_T];	// BoothMul.scala:43:32, Cat.scala:33:92, Mux.scala:81:{58,61}
          multiplicandReg <= _GEN_5[_choose_T];	// BoothMul.scala:44:34, Cat.scala:33:92, Mux.scala:81:{58,61}
          resultReg <= 132'h0;	// BoothMul.scala:44:34, :45:28
        end
        state <= _T_2 | state;	// BoothMul.scala:47:24, :64:{31,45}, :65:23
        shiftCounter <= 6'h0;	// BoothMul.scala:52:31
        if (_T_2) begin	// BoothMul.scala:64:31
          automatic logic [7:0][5:0] _GEN_6 = {{6'h10}, {6'h11}, {6'h0}, {6'h11}, {6'h20}, {6'h21}, {6'h0}, {6'h21}};	// BoothMul.scala:52:31, Mux.scala:81:{58,61}
          total <= _GEN_6[_choose_T];	// BoothMul.scala:53:24, Cat.scala:33:92, Mux.scala:81:{58,61}
        end
        else	// BoothMul.scala:64:31
          total <= 6'h0;	// BoothMul.scala:52:31, :53:24
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1091:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1091:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1091:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1091:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1091:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1091:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1091:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:1091:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:1091:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:1091:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:1091:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:1091:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:1091:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:1091:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:1091:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:1091:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:1091:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:1091:10
      automatic logic [31:0] _RANDOM_14;	// <stdin>:1091:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1091:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1091:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1091:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1091:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1091:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1091:10
        _RANDOM_3 = `RANDOM;	// <stdin>:1091:10
        _RANDOM_4 = `RANDOM;	// <stdin>:1091:10
        _RANDOM_5 = `RANDOM;	// <stdin>:1091:10
        _RANDOM_6 = `RANDOM;	// <stdin>:1091:10
        _RANDOM_7 = `RANDOM;	// <stdin>:1091:10
        _RANDOM_8 = `RANDOM;	// <stdin>:1091:10
        _RANDOM_9 = `RANDOM;	// <stdin>:1091:10
        _RANDOM_10 = `RANDOM;	// <stdin>:1091:10
        _RANDOM_11 = `RANDOM;	// <stdin>:1091:10
        _RANDOM_12 = `RANDOM;	// <stdin>:1091:10
        _RANDOM_13 = `RANDOM;	// <stdin>:1091:10
        _RANDOM_14 = `RANDOM;	// <stdin>:1091:10
        out_valid = _RANDOM_0[1];	// BoothMul.scala:30:28
        result_hi = {_RANDOM_0[31:2], _RANDOM_1, _RANDOM_2[1:0]};	// BoothMul.scala:30:28, :31:28
        result_lo = {_RANDOM_2[31:2], _RANDOM_3, _RANDOM_4[1:0]};	// BoothMul.scala:31:28, :32:28
        multiplierReg = {_RANDOM_4[31:2], _RANDOM_5, _RANDOM_6[4:0]};	// BoothMul.scala:32:28, :43:32
        multiplicandReg = {_RANDOM_6[31:5], _RANDOM_7, _RANDOM_8, _RANDOM_9, _RANDOM_10[8:0]};	// BoothMul.scala:43:32, :44:34
        resultReg = {_RANDOM_10[31:9], _RANDOM_11, _RANDOM_12, _RANDOM_13, _RANDOM_14[12:0]};	// BoothMul.scala:44:34, :45:28
        state = _RANDOM_14[13];	// BoothMul.scala:45:28, :47:24
        shiftCounter = _RANDOM_14[19:14];	// BoothMul.scala:45:28, :52:31
        total = _RANDOM_14[25:20];	// BoothMul.scala:45:28, :53:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1091:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1091:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_out_valid = out_valid;	// <stdin>:1091:10, BoothMul.scala:30:28
  assign io_result_hi = result_hi;	// <stdin>:1091:10, BoothMul.scala:31:28
  assign io_result_lo = result_lo;	// <stdin>:1091:10, BoothMul.scala:32:28
endmodule

module Divider(	// <stdin>:1266:10
  input         clock,
                reset,
                io_div_valid,
                io_divw,
                io_div_signed,
  input  [63:0] io_dividend,
                io_divisor,
  output        io_out_valid,
  output [63:0] io_quotient);

  reg          out_valid;	// Divider.scala:33:28
  reg  [63:0]  quotient;	// Divider.scala:34:27
  reg  [127:0] partial_remainder;	// Divider.scala:43:36
  reg  [64:0]  sub65;	// Divider.scala:44:24
  reg  [32:0]  sub33;	// Divider.scala:45:24
  reg          sign_quo;	// Divider.scala:49:27
  reg          sign_rem;	// Divider.scala:50:27
  reg  [1:0]   state;	// Divider.scala:52:24
  reg  [6:0]   shiftCounter;	// Divider.scala:57:31
  wire [33:0]  temp_34;	// <stdin>:1307:5
  wire [65:0]  temp_66;	// <stdin>:1309:5
  wire         _T = state == 2'h0;	// Divider.scala:52:24, :68:18
  wire         _T_3 = state == 2'h1;	// Divider.scala:52:24, :68:18, :79:29
  wire         _T_4 = shiftCounter == 7'h20;	// Divider.scala:57:31, :161:31
  assign temp_34 = _T | ~_T_3 | _T_4 ? 34'h0 : {1'h0, partial_remainder[127:95]} + {1'h0, sub33};	// <stdin>:1308:{13,16}, Divider.scala:32:28, :43:36, :45:24, :68:18, :161:{31,40}, :174:{59,70}
  wire         _T_9 = state == 2'h2;	// Divider.scala:52:24, :68:18, :79:29
  wire         _T_10 = shiftCounter == 7'h40;	// Divider.scala:57:31, :188:31
  assign temp_66 = _T | _T_3 | ~_T_9 | _T_10 ? 66'h0 : {1'h0, partial_remainder[127:63]} + {1'h0, sub65};	// <stdin>:1310:{13,16}, Divider.scala:32:28, :43:36, :44:24, :68:18, :188:{31,40}, :199:{59,70}
  always @(posedge clock) begin
    if (reset) begin
      out_valid <= 1'h0;	// Divider.scala:32:28, :33:28
      quotient <= 64'h0;	// Divider.scala:34:27
      partial_remainder <= 128'h0;	// Divider.scala:43:36
      sub65 <= 65'h0;	// Divider.scala:44:24
      sub33 <= 33'h0;	// Divider.scala:45:24
      sign_quo <= 1'h0;	// Divider.scala:32:28, :49:27
      sign_rem <= 1'h0;	// Divider.scala:32:28, :50:27
      state <= 2'h0;	// Divider.scala:52:24
      shiftCounter <= 7'h0;	// Divider.scala:57:31
    end
    else begin
      automatic logic [1:0]       _choose_T;	// Cat.scala:33:92
      automatic logic             _T_2;	// Divider.scala:76:31
      automatic logic             _divisor_T_13;	// Mux.scala:81:61
      automatic logic             _divisor_T_15;	// Mux.scala:81:61
      automatic logic             _GEN;	// <stdin>:1292:14, Divider.scala:68:18, :76:45
      automatic logic             _T_7;	// Divider.scala:166:32
      automatic logic             _T_13;	// Divider.scala:191:32
      automatic logic [3:0][63:0] _GEN_0;	// Divider.scala:68:18, :71:22, :161:40, :188:40
      automatic logic [3:0][1:0]  _GEN_1;	// Divider.scala:52:24, :68:18, :76:45, :161:40, :188:40, :212:19
      _choose_T = {io_divw, io_div_signed};	// Cat.scala:33:92
      _T_2 = io_div_valid & ~out_valid;	// Divider.scala:33:28, :76:{31,34}
      _divisor_T_13 = _choose_T == 2'h1;	// Cat.scala:33:92, Divider.scala:79:29, Mux.scala:81:61
      _divisor_T_15 = _choose_T == 2'h2;	// Cat.scala:33:92, Divider.scala:79:29, Mux.scala:81:61
      _GEN = _T & _T_2;	// <stdin>:1292:14, Divider.scala:68:18, :76:{31,45}
      _T_7 = ~sign_quo & ~sign_rem;	// Divider.scala:49:27, :50:27, :166:{22,32,35}
      _T_13 = ~sign_quo & ~sign_rem;	// Divider.scala:49:27, :50:27, :191:{22,32,35}
      out_valid <= ~_T & (_T_3 ? _T_4 & _T_7 | out_valid : _T_9 ? _T_10 & _T_13 | out_valid : (&state) |
                                                out_valid);	// Divider.scala:33:28, :52:24, :68:18, :70:23, :161:{31,40}, :166:{32,45}, :188:{31,40}, :191:{32,45}, :213:23
      _GEN_0 = {{(&state) & sign_quo ? ~quotient + 64'h1 : quotient}, {_T_10 ? quotient : temp_66[65] ?
                                                {quotient[62:0], 1'h1} : {quotient[62:0], 1'h0}}, {_T_4 ? {{32{quotient[31]}},
                                                quotient[31:0]} : temp_34[33] ? {quotient[62:0], 1'h1} : {quotient[62:0], 1'h0}}, {64'h0}};	// Cat.scala:33:92, Divider.scala:32:28, :34:27, :49:27, :52:24, :68:18, :71:22, :73:23, :86:70, :161:{31,40}, :163:{26,37}, :175:{29,34}, :177:{30,45}, :180:{30,45}, :188:{31,40}, :200:{29,34}, :202:{30,45}, :205:{30,45}, :215:27, :216:{29,39}
      quotient <= _GEN_0[state];	// Divider.scala:34:27, :52:24, :68:18, :71:22, :161:40, :188:40
      if (_T) begin	// Divider.scala:68:18
        if (_T_2) begin	// Divider.scala:76:31
          automatic logic [63:0] _GEN_2;	// <stdin>:1292:14, Divider.scala:68:18, :76:45
          _GEN_2 = _GEN ? ((&_choose_T) ? {32'h0, io_dividend[31] ? ~(io_dividend[31:0]) + 32'h1 :
                                                                                io_dividend[31:0]} : _divisor_T_15 ? {32'h0, io_dividend[31:0]} : _divisor_T_13 &
                                                                                io_dividend[63] ? ~io_dividend + 64'h1 : io_dividend) : 64'h0;	// <stdin>:1292:14, Cat.scala:33:92, Divider.scala:34:27, :68:18, :76:45, :86:{51,57,70}, :88:47, :90:{39,51,57,76}, Mux.scala:81:{58,61}
          if (io_divw)
            partial_remainder <= {32'h0, _GEN_2[31:0], 64'h0};	// <stdin>:1292:14, Cat.scala:33:92, Divider.scala:34:27, :43:36, :68:18, :76:45, :95:44
          else
            partial_remainder <= {64'h0, _GEN_2};	// <stdin>:1292:14, Cat.scala:33:92, Divider.scala:34:27, :43:36, :68:18, :76:45
        end
        shiftCounter <= 7'h0;	// Divider.scala:57:31
      end
      else if (_T_3) begin	// Divider.scala:68:18
        if (~_T_4) begin	// Divider.scala:161:31
          partial_remainder <= {temp_34[33] ? {temp_34[31:0], partial_remainder[94:0]} : partial_remainder[126:0], 1'h0};	// Cat.scala:33:92, Divider.scala:32:28, :43:36, :175:{29,34}, :176:{39,53,78}, :179:{39,63}
          shiftCounter <= shiftCounter + 7'h1;	// Divider.scala:57:31, :183:46
        end
      end
      else if (~_T_9 | _T_10) begin	// <stdin>:1310:13, Divider.scala:43:36, :68:18, :188:{31,40}
      end
      else begin	// <stdin>:1310:13, Divider.scala:43:36, :68:18, :188:{31,40}
        partial_remainder <= {temp_66[65] ? {temp_66[63:0], partial_remainder[62:0]} : partial_remainder[126:0], 1'h0};	// Cat.scala:33:92, Divider.scala:32:28, :43:36, :200:{29,34}, :201:{39,53,78}, :204:{39,63}
        shiftCounter <= shiftCounter + 7'h1;	// Divider.scala:57:31, :183:46, :208:46
      end
      if (_GEN) begin	// <stdin>:1292:14, Divider.scala:68:18, :76:45
        automatic logic [63:0] _GEN_3;	// <stdin>:1294:13, Divider.scala:68:18, :76:45
        automatic logic [1:0]  _sign_quo_T_2 = {io_dividend[31], io_divisor[31]};	// Cat.scala:33:92, Divider.scala:90:51, :108:50
        automatic logic [1:0]  _sign_quo_T_11 = {io_dividend[63], io_divisor[63]};	// Cat.scala:33:92, Divider.scala:86:51, :104:50
        automatic logic [1:0]  _sign_rem_T_2 = {io_dividend[31], io_divisor[31]};	// Cat.scala:33:92, Divider.scala:90:51, :108:50
        automatic logic [1:0]  _sign_rem_T_11 = {io_dividend[63], io_divisor[63]};	// Cat.scala:33:92, Divider.scala:86:51, :104:50
        _GEN_3 = _GEN ? ((&_choose_T) ? {32'h0, io_divisor[31] ? ~(io_divisor[31:0]) + 32'h1 :
                                                                io_divisor[31:0]} : _divisor_T_15 ? {32'h0, io_divisor[31:0]} : _divisor_T_13 &
                                                                io_divisor[63] ? ~io_divisor + 64'h1 : io_divisor) : 64'h0;	// <stdin>:1292:14, :1294:13, Cat.scala:33:92, Divider.scala:34:27, :68:18, :76:45, :86:70, :90:76, :104:{50,56,68}, :106:46, :108:{39,50,56,74}, Mux.scala:81:{58,61}
        sub65 <= {1'h1, ~_GEN_3} + 65'h1;	// <stdin>:1294:13, Divider.scala:44:24, :68:18, :73:23, :76:45, :86:70, :113:{26,50}
        sub33 <= {1'h1, ~(_GEN_3[31:0])} + 33'h1;	// <stdin>:1294:13, Divider.scala:45:24, :68:18, :73:23, :76:45, :112:{26,48,56}
        sign_quo <= io_div_signed & (io_divw ? _sign_quo_T_2 != 2'h3 & (_sign_quo_T_2 == 2'h2 | _sign_quo_T_2
                                                                == 2'h1) : _sign_quo_T_11 != 2'h3 & (_sign_quo_T_11 == 2'h2 | _sign_quo_T_11 == 2'h1));	// Cat.scala:33:92, Divider.scala:49:27, :79:29, :115:32, :116:24, Mux.scala:81:{58,61}
        sign_rem <= io_div_signed & (io_divw ? _sign_rem_T_2 != 2'h3 & _sign_rem_T_2 != 2'h2 : _sign_rem_T_11
                                                                != 2'h3 & _sign_rem_T_11 != 2'h2);	// Cat.scala:33:92, Divider.scala:50:27, :79:29, :137:32, :138:24, Mux.scala:81:{58,61}
      end
      _GEN_1 = {{2'h0}, {_T_10 ? (_T_13 ? 2'h0 : 2'h3) : state}, {_T_4 ? (_T_7 ? 2'h0 : 2'h3) : state},
                                                {_T_2 ? (io_divw ? 2'h1 : 2'h2) : state}};	// Divider.scala:52:24, :68:18, :76:{31,45}, :79:{23,29}, :161:{31,40}, :166:{32,45}, :167:27, :170:27, :188:{31,40}, :191:{32,45}, :192:27, :195:27, :212:19, Mux.scala:81:61
      state <= _GEN_1[state];	// Divider.scala:52:24, :68:18, :76:45, :161:40, :188:40, :212:19
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1266:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1266:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1266:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1266:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1266:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1266:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1266:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:1266:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:1266:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:1266:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:1266:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:1266:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:1266:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:1266:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:1266:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:1266:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1266:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1266:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1266:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1266:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1266:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1266:10
        _RANDOM_3 = `RANDOM;	// <stdin>:1266:10
        _RANDOM_4 = `RANDOM;	// <stdin>:1266:10
        _RANDOM_5 = `RANDOM;	// <stdin>:1266:10
        _RANDOM_6 = `RANDOM;	// <stdin>:1266:10
        _RANDOM_7 = `RANDOM;	// <stdin>:1266:10
        _RANDOM_8 = `RANDOM;	// <stdin>:1266:10
        _RANDOM_9 = `RANDOM;	// <stdin>:1266:10
        _RANDOM_10 = `RANDOM;	// <stdin>:1266:10
        _RANDOM_11 = `RANDOM;	// <stdin>:1266:10
        out_valid = _RANDOM_0[1];	// Divider.scala:33:28
        quotient = {_RANDOM_0[31:2], _RANDOM_1, _RANDOM_2[1:0]};	// Divider.scala:33:28, :34:27
        partial_remainder = {_RANDOM_4[31:2], _RANDOM_5, _RANDOM_6, _RANDOM_7, _RANDOM_8[1:0]};	// Divider.scala:43:36
        sub65 = {_RANDOM_8[31:2], _RANDOM_9, _RANDOM_10[2:0]};	// Divider.scala:43:36, :44:24
        sub33 = {_RANDOM_10[31:3], _RANDOM_11[3:0]};	// Divider.scala:44:24, :45:24
        sign_quo = _RANDOM_11[4];	// Divider.scala:45:24, :49:27
        sign_rem = _RANDOM_11[5];	// Divider.scala:45:24, :50:27
        state = _RANDOM_11[7:6];	// Divider.scala:45:24, :52:24
        shiftCounter = _RANDOM_11[14:8];	// Divider.scala:45:24, :57:31
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1266:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1266:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_out_valid = out_valid;	// <stdin>:1266:10, Divider.scala:33:28
  assign io_quotient = quotient;	// <stdin>:1266:10, Divider.scala:34:27
endmodule

module Alu(	// <stdin>:1536:10
  input         clock,
                reset,
  input  [63:0] io_op_a,
                io_op_b,
  input  [5:0]  io_alu_op,
                io_shamt,
  output [63:0] io_result,
  output        io_mul_div_outvalid);

  wire         _DIV_io_out_valid;	// Alu.scala:75:21
  wire [63:0]  _DIV_io_quotient;	// Alu.scala:75:21
  wire         _BM_io_out_valid;	// Alu.scala:74:20
  wire [63:0]  _BM_io_result_hi;	// Alu.scala:74:20
  wire [63:0]  _BM_io_result_lo;	// Alu.scala:74:20
  wire         _bm_value_T = io_alu_op == 6'h12;	// Alu.scala:101:20
  wire         _bm_value_T_4 = io_alu_op == 6'h13;	// Alu.scala:101:45
  wire         _bm_value_T_5 = io_alu_op == 6'h14;	// Alu.scala:101:71
  wire         _bm_value_T_7 = io_alu_op == 6'h15;	// Alu.scala:102:19
  wire         _bm_value_T_1 = io_alu_op == 6'h23;	// Alu.scala:102:46
  wire         _T_8 = _bm_value_T | _bm_value_T_4 | _bm_value_T_5 | _bm_value_T_7 | _bm_value_T_1;	// Alu.scala:101:{20,45,71}, :102:{19,34,46}
  wire         _DIV_io_div_signed_T = io_alu_op == 6'h16;	// Alu.scala:128:20
  wire         _DIV_io_div_signed_T_1 = io_alu_op == 6'h24;	// Alu.scala:128:71
  wire         _DIV_io_divw_T_1 = io_alu_op == 6'h25;	// Alu.scala:129:19
  wire         _T_15 = _DIV_io_div_signed_T | io_alu_op == 6'h17 | _DIV_io_div_signed_T_1 | _DIV_io_divw_T_1;	// Alu.scala:128:{20,45,71,85}, :129:19
  wire [126:0] _GEN = {63'h0, io_op_a};	// Alu.scala:158:41
  wire [126:0] _GEN_0 = {121'h0, io_op_b[5:0]};	// Alu.scala:158:{41,51}
  wire [63:0]  _GEN_1 = {58'h0, io_op_b[5:0]};	// Alu.scala:158:51, :159:41
  wire [63:0]  _res_T_34 = io_op_a >> _GEN_1;	// Alu.scala:159:41
  wire [63:0]  _res_T_38 = $signed($signed(io_op_a) >>> _GEN_1);	// Alu.scala:159:41, :160:48
  wire [126:0] _res_T_60 = _GEN << io_shamt;	// Alu.scala:158:41, :161:42
  wire [63:0]  _GEN_2 = {58'h0, io_shamt};	// Alu.scala:159:41, :162:42
  wire [63:0]  _res_T_47 = io_op_a & io_op_b;	// Alu.scala:164:41
  wire [63:0]  _res_T_100 = io_op_a % io_op_b;	// Alu.scala:167:42
  wire [31:0]  _res_T_58 = io_op_a[31:0] + io_op_b[31:0];	// Alu.scala:168:44
  wire [31:0]  _GEN_3 = {26'h0, io_shamt};	// Alu.scala:170:50
  wire [31:0]  _res_T_65 = io_op_a[31:0] >> _GEN_3;	// Alu.scala:170:{43,50}
  wire [31:0]  _res_T_69 = $signed($signed(io_op_a[31:0]) >>> _GEN_3);	// Alu.scala:170:{43,50}, :171:57
  wire [31:0]  _res_T_78 = io_op_a[31:0] - io_op_b[31:0];	// Alu.scala:168:44, :173:43
  wire [126:0] _res_T_81 = _GEN << _GEN_0;	// Alu.scala:158:41, :174:43
  wire [31:0]  _GEN_4 = {26'h0, io_op_b[5:0]};	// Alu.scala:158:51, :170:50, :175:49
  wire [31:0]  _res_T_87 = io_op_a[31:0] >> _GEN_4;	// Alu.scala:170:43, :175:49
  wire [31:0]  _res_T_92 = $signed($signed(io_op_a[31:0]) >>> _GEN_4);	// Alu.scala:170:43, :175:49, :176:56
  wire [63:0]  _res_T_97 = $signed(io_op_a) % $signed(io_op_b);	// Alu.scala:177:50
  wire [63:0]  _res_T_126 = io_alu_op == 6'h9 ? io_op_a | io_op_b : io_alu_op == 6'h8 ? io_op_a ^ io_op_b : io_alu_op
                == 6'h7 ? {63'h0, io_op_a >= io_op_b} : io_alu_op == 6'h6 ? {63'h0, io_op_a < io_op_b} :
                io_alu_op == 6'h5 ? {63'h0, $signed(io_op_a) >= $signed(io_op_b)} : io_alu_op == 6'h4 ?
                {63'h0, $signed(io_op_a) < $signed(io_op_b)} : io_alu_op == 6'h3 ? {63'h0, io_op_a !=
                io_op_b} : io_alu_op == 6'h2 ? {63'h0, io_op_a == io_op_b} : io_alu_op == 6'h1 ? io_op_a -
                io_op_b : io_alu_op == 6'h0 ? io_op_a + io_op_b : 64'h0;	// Alu.scala:148:48, :149:48, :150:41, :151:41, :152:48, :153:48, :154:42, :155:42, :156:41, :157:40, :158:41, Mux.scala:81:{58,61}, :101:16
  wire [126:0] _res_T_132 = io_alu_op == 6'hC ? {{63{_res_T_38[63]}}, _res_T_38} : io_alu_op == 6'hB ?
                {{63{_res_T_34[63]}}, _res_T_34} : io_alu_op == 6'hA ? _GEN << _GEN_0 :
                {{63{_res_T_126[63]}}, _res_T_126};	// Alu.scala:158:41, :159:41, :160:48, Mux.scala:81:{58,61}
  wire [63:0]  _GEN_5 = {{32{_res_T_58[31]}}, _res_T_58};	// Alu.scala:168:44, Mux.scala:81:58
  BoothMul BM (	// Alu.scala:74:20
    .clock           (clock),
    .reset           (reset),
    .io_mul_valid    (_T_8),	// Alu.scala:102:34
    .io_mulw         (_T_8 & _bm_value_T_1),	// Alu.scala:88:16, :102:{34,46,61}, :105:24
    .io_mul_signed   (_T_8 ? (_bm_value_T | _bm_value_T_4 | _bm_value_T_1 ? 2'h3 : {_bm_value_T_5, 1'h0}) : 2'h0),	// <stdin>:1536:10, Alu.scala:89:22, :101:{20,45,71}, :102:{34,46,61}, :106:30, :109:21, Mux.scala:101:16
    .io_multiplicand (_T_8 ? io_op_a : 64'h0),	// Alu.scala:90:24, :102:{34,61}, :114:32, Mux.scala:101:16
    .io_multiplier   (_T_8 ? io_op_b : 64'h0),	// Alu.scala:91:22, :102:{34,61}, :115:30, Mux.scala:101:16
    .io_out_valid    (_BM_io_out_valid),
    .io_result_hi    (_BM_io_result_hi),
    .io_result_lo    (_BM_io_result_lo)
  );
  Divider DIV (	// Alu.scala:75:21
    .clock         (clock),
    .reset         (reset),
    .io_div_valid  (_T_15),	// Alu.scala:128:85
    .io_divw       (_T_15 & (_DIV_io_div_signed_T_1 | _DIV_io_divw_T_1)),	// Alu.scala:95:17, :128:{71,85}, :129:{19,35}, :132:{25,57}
    .io_div_signed (_T_15 & (_DIV_io_div_signed_T | _DIV_io_div_signed_T_1)),	// Alu.scala:96:23, :128:{20,71,85}, :129:35, :133:{31,62}
    .io_dividend   (_T_15 ? io_op_a : 64'h0),	// Alu.scala:97:21, :128:85, :129:35, :134:29, Mux.scala:101:16
    .io_divisor    (_T_15 ? io_op_b : 64'h0),	// Alu.scala:98:20, :128:85, :129:35, :135:28, Mux.scala:101:16
    .io_out_valid  (_DIV_io_out_valid),
    .io_quotient   (_DIV_io_quotient)
  );
  assign io_result = _BM_io_out_valid ? (_bm_value_T | _bm_value_T_1 ? _BM_io_result_lo : _bm_value_T_4 |
                _bm_value_T_5 | _bm_value_T_7 ? _BM_io_result_hi : 64'h0) : _DIV_io_out_valid ?
                _DIV_io_quotient : (&io_alu_op) ? 64'h0 : io_alu_op == 6'h28 ? ~io_op_a & io_op_b :
                io_alu_op == 6'h27 ? {{32{_res_T_100[31]}}, _res_T_100[31:0]} : io_alu_op == 6'h26 ?
                {{32{_res_T_97[31]}}, _res_T_97[31:0]} : io_alu_op == 6'h22 ? {{32{_res_T_92[31]}},
                _res_T_92} : io_alu_op == 6'h21 ? {{32{_res_T_87[31]}}, _res_T_87} : io_alu_op == 6'h20 ?
                {{32{_res_T_81[31]}}, _res_T_81[31:0]} : io_alu_op == 6'h1F ? {{32{_res_T_78[31]}},
                _res_T_78} : io_alu_op == 6'h1E ? _GEN_5 : io_alu_op == 6'h1D ? {{32{_res_T_69[31]}},
                _res_T_69} : io_alu_op == 6'h1C ? {{32{_res_T_65[31]}}, _res_T_65} : io_alu_op == 6'h1B ?
                {{32{_res_T_60[31]}}, _res_T_60[31:0]} : io_alu_op == 6'h1A ? _GEN_5 : io_alu_op == 6'h19 ?
                _res_T_100 : io_alu_op == 6'h18 ? $signed(io_op_a) % $signed(io_op_b) : io_alu_op == 6'h11
                ? ~_res_T_47 : io_alu_op == 6'h10 ? _res_T_47 : io_alu_op == 6'hF ?
                $signed($signed(io_op_a) >>> _GEN_2) : io_alu_op == 6'hE ? io_op_a >> _GEN_2 : io_alu_op ==
                6'hD ? _res_T_60[63:0] : _res_T_132[63:0];	// <stdin>:1536:10, Alu.scala:74:20, :75:21, :101:{20,45,71}, :102:{19,46}, :121:42, :122:73, :142:15, :143:12, :161:42, :162:42, :163:49, :164:41, :165:33, :166:48, :167:42, :169:56, :170:50, :171:57, :173:43, :174:{43,59}, :175:49, :176:56, :177:{50,67}, :178:54, :179:{35,44}, Mux.scala:81:{58,61}, :101:16
  assign io_mul_div_outvalid = _BM_io_out_valid | _DIV_io_out_valid;	// <stdin>:1536:10, Alu.scala:74:20, :75:21, :77:44
endmodule

module Excute(	// <stdin>:1814:10
  input         clock,
                reset,
  input  [63:0] io_deio_op_a,
                io_deio_op_b,
  input  [4:0]  io_deio_reg_waddr,
  input         io_deio_branch_type,
  input  [63:0] io_deio_branch_addr,
  input  [5:0]  io_deio_alu_op,
                io_deio_shamt,
  input  [1:0]  io_deio_wb_type,
  input  [2:0]  io_deio_sd_type,
  input  [63:0] io_deio_reg2_rdata,
  input  [2:0]  io_deio_ld_type,
  input  [63:0] io_deio_csr_t,
  input  [11:0] io_deio_csr_waddr,
  input         io_deio_csr_wen,
                io_deio_has_inst,
                io_fcex_stall,
  output [63:0] io_emio_reg_wdata,
  output [4:0]  io_emio_reg_waddr,
  output [1:0]  io_emio_wb_type,
  output [2:0]  io_emio_ld_type,
                io_emio_ld_addr_lowbit,
  output [63:0] io_emio_csr_wdata,
  output        io_emio_csr_wen,
  output [11:0] io_emio_csr_waddr,
  output        io_emio_has_inst,
                io_fcex_jump_flag,
  output [31:0] io_fcex_jump_pc,
  output        io_fcex_mul_div,
                io_fcex_mul_div_valid,
  output [63:0] io_raddr,
                io_waddr,
                io_wdata,
  output [7:0]  io_wmask,
  output        io_cl_type,
  output [4:0]  io_fwex_reg_waddr,
  output [63:0] io_fwex_reg_wdata,
  output        io_fwex_reg_we,
  output [63:0] io_fwex_csr_wdata,
  output        io_fwex_csr_wen,
  output [11:0] io_fwex_csr_waddr,
  output        io_clex_valid,
  output [2:0]  io_clex_ld_type,
  output [63:0] io_clex_raddr,
  output [2:0]  io_clex_sd_type,
  output [63:0] io_clex_waddr,
  output [7:0]  io_clex_wmask,
  output [63:0] io_clex_wdata);

  wire [63:0] _io_raddr_T_3;	// Excute.scala:103:20
  wire [63:0] _alu_io_result;	// Excute.scala:36:21
  wire        _alu_io_mul_div_outvalid;	// Excute.scala:36:21
  reg         aluvalid_buffer;	// Excute.scala:44:34
  reg  [63:0] alu_buffer;	// Excute.scala:45:29
  wire        _mul_div_type_T_16 = io_deio_alu_op == 6'h12 | io_deio_alu_op == 6'h13 | io_deio_alu_op == 6'h14 |
                io_deio_alu_op == 6'h15 | io_deio_alu_op == 6'h23 | io_deio_alu_op == 6'h16 |
                io_deio_alu_op == 6'h17 | io_deio_alu_op == 6'h24 | io_deio_alu_op == 6'h25;	// Excute.scala:61:{37,73,109}, :62:{25,62,98,133}, :63:{25,43,61}
  wire        _CLINT_type_T_6 = ((|io_deio_ld_type) | (|io_deio_sd_type)) & (|(_alu_io_result[63:25])) & _alu_io_result <
                64'h200C000;	// Excute.scala:36:21, :69:{36,44,63}, :70:{24,42,60}
  wire [63:0] _io_fwex_reg_wdata_T_1 = _alu_io_mul_div_outvalid | aluvalid_buffer ? (aluvalid_buffer ? alu_buffer :
                _alu_io_result) : 64'h0;	// Excute.scala:36:21, :44:34, :45:29, :58:42, :59:21, :77:32
  assign _io_raddr_T_3 = (|io_deio_ld_type) & ~_CLINT_type_T_6 ? _alu_io_result : 64'h0;	// Excute.scala:36:21, :45:29, :69:36, :70:42, :103:{20,48,63}
  wire        _io_clex_wmask_T_2 = io_deio_sd_type == 3'h2;	// Mux.scala:81:61
  wire [1:0]  _GEN = {1'h0, io_deio_sd_type == 3'h1};	// <stdin>:1814:10, Mux.scala:81:{58,61}
  wire        _io_clex_wmask_T_4 = io_deio_sd_type == 3'h3;	// Mux.scala:81:61
  wire        _io_clex_wmask_T_6 = io_deio_sd_type == 3'h4;	// Mux.scala:81:61
  wire        _io_fwex_reg_wdata_T = io_deio_wb_type == 2'h1;	// Excute.scala:137:40
  always @(posedge clock) begin
    if (reset) begin
      aluvalid_buffer <= 1'h0;	// <stdin>:1814:10, Excute.scala:44:34
      alu_buffer <= 64'h0;	// Excute.scala:45:29
    end
    else begin
      automatic logic _T_2;	// Excute.scala:50:51
      automatic logic _T_4;	// Excute.scala:53:31
      _T_2 = _alu_io_mul_div_outvalid & io_fcex_stall & ~aluvalid_buffer;	// Excute.scala:36:21, :44:34, :50:{51,54}
      _T_4 = ~io_fcex_stall & aluvalid_buffer;	// Excute.scala:44:34, :53:{16,31}
      aluvalid_buffer <= _T_2 | ~_T_4 & aluvalid_buffer;	// Excute.scala:44:34, :50:{51,71}, :51:25, :53:{31,50}, :54:25
      if (_T_2)	// Excute.scala:50:51
        alu_buffer <= _alu_io_result;	// Excute.scala:36:21, :45:29
      else if (_T_4)	// Excute.scala:50:51, :53:31
        alu_buffer <= 64'h0;	// Excute.scala:45:29
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1814:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1814:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1814:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1814:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1814:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1814:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1814:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1814:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1814:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1814:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1814:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1814:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1814:10
        aluvalid_buffer = _RANDOM_0[0];	// Excute.scala:44:34
        alu_buffer = {_RANDOM_0[31:1], _RANDOM_1, _RANDOM_2[0]};	// Excute.scala:44:34, :45:29
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1814:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1814:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Alu alu (	// Excute.scala:36:21
    .clock               (clock),
    .reset               (reset),
    .io_op_a             (io_deio_op_a),
    .io_op_b             (io_deio_op_b),
    .io_alu_op           (io_deio_alu_op),
    .io_shamt            (io_deio_shamt),
    .io_result           (_alu_io_result),
    .io_mul_div_outvalid (_alu_io_mul_div_outvalid)
  );
  assign io_emio_reg_wdata = io_deio_csr_wen ? io_deio_csr_t : _mul_div_type_T_16 ? _io_fwex_reg_wdata_T_1 :
                _alu_io_result;	// <stdin>:1814:10, Excute.scala:36:21, :63:43, :77:32, Mux.scala:101:16
  assign io_emio_reg_waddr = io_deio_reg_waddr;	// <stdin>:1814:10
  assign io_emio_wb_type = io_deio_wb_type;	// <stdin>:1814:10
  assign io_emio_ld_type = io_deio_ld_type;	// <stdin>:1814:10
  assign io_emio_ld_addr_lowbit = _io_raddr_T_3[2:0];	// <stdin>:1814:10, Excute.scala:86:39, :103:20
  assign io_emio_csr_wdata = _alu_io_result;	// <stdin>:1814:10, Excute.scala:36:21
  assign io_emio_csr_wen = io_deio_csr_wen;	// <stdin>:1814:10
  assign io_emio_csr_waddr = io_deio_csr_waddr;	// <stdin>:1814:10
  assign io_emio_has_inst = io_deio_has_inst;	// <stdin>:1814:10
  assign io_fcex_jump_flag = io_deio_branch_type & (|_alu_io_result);	// <stdin>:1814:10, Excute.scala:36:21, :96:{55,74}
  assign io_fcex_jump_pc = io_deio_branch_addr[31:0];	// <stdin>:1814:10, Excute.scala:97:21
  assign io_fcex_mul_div = _mul_div_type_T_16;	// <stdin>:1814:10, Excute.scala:63:43
  assign io_fcex_mul_div_valid = _alu_io_mul_div_outvalid;	// <stdin>:1814:10, Excute.scala:36:21
  assign io_raddr = _io_raddr_T_3;	// <stdin>:1814:10, Excute.scala:103:20
  assign io_waddr = (|io_deio_sd_type) & ~_CLINT_type_T_6 ? _alu_io_result : 64'h0;	// <stdin>:1814:10, Excute.scala:36:21, :45:29, :69:63, :70:42, :103:63, :105:{20,47}
  assign io_wdata = io_deio_reg2_rdata;	// <stdin>:1814:10
  assign io_wmask = _io_clex_wmask_T_6 ? 8'hFF : {4'h0, _io_clex_wmask_T_4 ? 4'hF : {2'h0, _io_clex_wmask_T_2 ?
                2'h3 : _GEN}};	// <stdin>:1814:10, Mux.scala:81:{58,61}
  assign io_cl_type = _CLINT_type_T_6;	// <stdin>:1814:10, Excute.scala:70:42
  assign io_fwex_reg_waddr = io_deio_reg_waddr;	// <stdin>:1814:10
  assign io_fwex_reg_wdata = _io_fwex_reg_wdata_T ? (_mul_div_type_T_16 ? _io_fwex_reg_wdata_T_1 : _alu_io_result) :
                (&io_deio_wb_type) ? io_deio_csr_t : 64'h0;	// <stdin>:1814:10, Excute.scala:36:21, :45:29, :63:43, :77:32, :137:{40,70}, Mux.scala:101:16
  assign io_fwex_reg_we = _io_fwex_reg_wdata_T | (&io_deio_wb_type);	// <stdin>:1814:10, Excute.scala:137:{40,51,70}
  assign io_fwex_csr_wdata = _alu_io_result;	// <stdin>:1814:10, Excute.scala:36:21
  assign io_fwex_csr_wen = io_deio_csr_wen;	// <stdin>:1814:10
  assign io_fwex_csr_waddr = io_deio_csr_waddr;	// <stdin>:1814:10
  assign io_clex_valid = _CLINT_type_T_6;	// <stdin>:1814:10, Excute.scala:70:42
  assign io_clex_ld_type = io_deio_ld_type;	// <stdin>:1814:10
  assign io_clex_raddr = _alu_io_result;	// <stdin>:1814:10, Excute.scala:36:21
  assign io_clex_sd_type = io_deio_sd_type;	// <stdin>:1814:10
  assign io_clex_waddr = _alu_io_result;	// <stdin>:1814:10, Excute.scala:36:21
  assign io_clex_wmask = _io_clex_wmask_T_6 ? 8'hFF : {4'h0, _io_clex_wmask_T_4 ? 4'hF : {2'h0, _io_clex_wmask_T_2 ?
                2'h3 : _GEN}};	// <stdin>:1814:10, Mux.scala:81:{58,61}
  assign io_clex_wdata = io_deio_reg2_rdata;	// <stdin>:1814:10
endmodule

module Mem(	// <stdin>:1952:10
  input         clock,
                reset,
  input  [63:0] io_emio_reg_wdata,
  input  [4:0]  io_emio_reg_waddr,
  input  [1:0]  io_emio_wb_type,
  input  [2:0]  io_emio_ld_type,
                io_emio_ld_addr_lowbit,
  input  [63:0] io_emio_csr_wdata,
  input         io_emio_csr_wen,
  input  [11:0] io_emio_csr_waddr,
  input         io_emio_has_inst,
                io_rdata_valid,
  input  [63:0] io_rdata_bits_data,
  input         io_rdata_io_data_valid,
  input  [63:0] io_rdata_io_data_bits,
  input         io_clmem_Clrvalue_valid,
  input  [63:0] io_clmem_Clrvalue_bits,
  input         io_stall,
  output [63:0] io_mwio_reg_wdata,
  output [4:0]  io_mwio_reg_waddr,
  output [1:0]  io_mwio_wb_type,
  output [63:0] io_mwio_csr_wdata,
  output        io_mwio_csr_wen,
  output [11:0] io_mwio_csr_waddr,
  output        io_mwio_has_inst,
  output [4:0]  io_fwmem_reg_waddr,
  output [63:0] io_fwmem_reg_wdata,
  output        io_fwmem_reg_we,
  output [63:0] io_fwmem_csr_wdata,
  output        io_fwmem_csr_wen,
  output [11:0] io_fwmem_csr_waddr);

  reg              clmemvalid_buffer;	// Mem.scala:30:36
  reg              rdatavalid_buffer;	// Mem.scala:31:36
  reg              rdataiovalid_buffer;	// Mem.scala:32:38
  reg  [63:0]      clmem_buffer;	// Mem.scala:33:31
  reg  [63:0]      rdata_buffer;	// Mem.scala:34:31
  reg  [63:0]      rdataio_buffer;	// Mem.scala:35:33
  wire [63:0]      get_value;	// Mem.scala:59:25
  assign get_value = clmemvalid_buffer ? clmem_buffer : rdatavalid_buffer ? rdata_buffer : rdataiovalid_buffer ?
                rdataio_buffer : io_clmem_Clrvalue_valid ? io_clmem_Clrvalue_bits : io_rdata_valid ?
                io_rdata_bits_data : io_rdata_io_data_valid ? io_rdata_io_data_bits : 64'h0;	// Mem.scala:30:36, :31:36, :32:38, :33:31, :34:31, :35:33, :66:15, Mux.scala:101:16
  wire [63:0]      rvalue;	// Mem.scala:83:22
  wire             _rvalue_T_148 = io_emio_ld_addr_lowbit == 3'h2;	// Mux.scala:81:61
  wire             _rvalue_T_162 = io_emio_ld_addr_lowbit == 3'h4;	// Mux.scala:81:61
  wire             _rvalue_T_152 = io_emio_ld_addr_lowbit == 3'h6;	// Mux.scala:81:61
  wire [7:0][63:0] _GEN = {{{{56{get_value[63]}}, get_value[63:56]}}, {{{56{get_value[55]}}, get_value[55:48]}},
                {{{56{get_value[47]}}, get_value[47:40]}}, {{{56{get_value[39]}}, get_value[39:32]}},
                {{{56{get_value[31]}}, get_value[31:24]}}, {{{56{get_value[23]}}, get_value[23:16]}},
                {{{56{get_value[15]}}, get_value[15:8]}}, {{{56{get_value[7]}}, get_value[7:0]}}};	// Bitwise.scala:77:12, Cat.scala:33:92, Mem.scala:89:{50,65}, :90:{50,66}, :91:{50,66}, :92:{50,66}, :93:{50,66}, :94:{50,66}, :95:{50,66}, :96:{50,66}, Mux.scala:81:{58,61}
  wire             _rvalue_T_160 = io_emio_ld_addr_lowbit == 3'h0;	// Mux.scala:81:61
  wire [7:0][7:0]  _GEN_0 = {{get_value[7:0]}, {get_value[7:0]}, {get_value[47:40]}, {get_value[39:32]},
                {get_value[31:24]}, {get_value[23:16]}, {get_value[15:8]}, {get_value[7:0]}};	// Mem.scala:89:{50,65}, :90:66, :91:66, :92:66, :93:66, :94:66, Mux.scala:81:{58,61}
  wire [7:0][63:0] _GEN_1 = {{_rvalue_T_162 ? {32'h0, get_value[63:32]} : _rvalue_T_160 ? {32'h0, get_value[31:0]} :
                64'h0}, {_rvalue_T_152 ? {48'h0, get_value[63:48]} : _rvalue_T_162 ? {48'h0,
                get_value[47:32]} : _rvalue_T_148 ? {48'h0, get_value[31:16]} : _rvalue_T_160 ? {48'h0,
                get_value[15:0]} : 64'h0}, {{56'h0, (&io_emio_ld_addr_lowbit) ? get_value[63:56] :
                _rvalue_T_152 ? get_value[55:48] : _GEN_0[io_emio_ld_addr_lowbit]}}, {get_value},
                {_rvalue_T_162 ? {{32{get_value[63]}}, get_value[63:32]} : _rvalue_T_160 ?
                {{32{get_value[31]}}, get_value[31:0]} : 64'h0}, {_rvalue_T_152 ? {{48{get_value[63]}},
                get_value[63:48]} : _rvalue_T_162 ? {{48{get_value[47]}}, get_value[47:32]} : _rvalue_T_148
                ? {{48{get_value[31]}}, get_value[31:16]} : _rvalue_T_160 ? {{48{get_value[15]}},
                get_value[15:0]} : 64'h0}, {_GEN[io_emio_ld_addr_lowbit]}, {64'h0}};	// Bitwise.scala:77:12, Cat.scala:33:92, Mem.scala:33:31, :89:50, :90:50, :92:50, :94:50, :95:66, :96:{50,66}, :101:66, :102:66, :103:66, :104:66, :109:66, :110:66, Mux.scala:81:{58,61}
  assign rvalue = _GEN_1[io_emio_ld_type];	// Mem.scala:85:12, Mux.scala:81:{58,61}
  wire             _io_fwmem_reg_wdata_T = io_emio_wb_type == 2'h1;	// Mem.scala:149:30
  wire             _io_fwmem_reg_wdata_T_3 = io_emio_wb_type == 2'h2;	// Mem.scala:150:30, Mux.scala:81:61
  always @(posedge clock) begin
    if (reset) begin
      clmemvalid_buffer <= 1'h0;	// Mem.scala:30:36
      rdatavalid_buffer <= 1'h0;	// Mem.scala:30:36, :31:36
      rdataiovalid_buffer <= 1'h0;	// Mem.scala:30:36, :32:38
      clmem_buffer <= 64'h0;	// Mem.scala:33:31
      rdata_buffer <= 64'h0;	// Mem.scala:33:31, :34:31
      rdataio_buffer <= 64'h0;	// Mem.scala:33:31, :35:33
    end
    else begin
      automatic logic _T_2;	// Mem.scala:37:46
      automatic logic _T_7;	// Mem.scala:44:37
      automatic logic _T_12;	// Mem.scala:51:45
      _T_2 = io_clmem_Clrvalue_valid & io_stall & ~clmemvalid_buffer;	// Mem.scala:30:36, :37:{46,49}
      _T_7 = io_rdata_valid & io_stall & ~rdatavalid_buffer;	// Mem.scala:31:36, :44:{37,40}
      _T_12 = io_rdata_io_data_valid & io_stall & ~rdataiovalid_buffer;	// Mem.scala:32:38, :51:{45,48}
      clmemvalid_buffer <= _T_2 | ~(~io_stall & clmemvalid_buffer) & clmemvalid_buffer;	// Mem.scala:30:36, :37:{46,68}, :38:27, :40:{16,26,47}, :41:27
      rdatavalid_buffer <= _T_7 | ~(~io_stall & rdatavalid_buffer) & rdatavalid_buffer;	// Mem.scala:31:36, :44:{37,59}, :45:27, :47:{16,26,47}, :48:27
      rdataiovalid_buffer <= _T_12 | ~(~io_stall & rdataiovalid_buffer) & rdataiovalid_buffer;	// Mem.scala:32:38, :51:{45,69}, :52:29, :54:{16,26,49}, :55:29
      if (_T_2)	// Mem.scala:37:46
        clmem_buffer <= io_clmem_Clrvalue_bits;	// Mem.scala:33:31
      if (_T_7)	// Mem.scala:44:37
        rdata_buffer <= io_rdata_bits_data;	// Mem.scala:34:31
      if (_T_12)	// Mem.scala:51:45
        rdataio_buffer <= io_rdata_io_data_bits;	// Mem.scala:35:33
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1952:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1952:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1952:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1952:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1952:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1952:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1952:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:1952:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:1952:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:1952:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:1952:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1952:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1952:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1952:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1952:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1952:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1952:10
        _RANDOM_3 = `RANDOM;	// <stdin>:1952:10
        _RANDOM_4 = `RANDOM;	// <stdin>:1952:10
        _RANDOM_5 = `RANDOM;	// <stdin>:1952:10
        _RANDOM_6 = `RANDOM;	// <stdin>:1952:10
        clmemvalid_buffer = _RANDOM_0[0];	// Mem.scala:30:36
        rdatavalid_buffer = _RANDOM_0[1];	// Mem.scala:30:36, :31:36
        rdataiovalid_buffer = _RANDOM_0[2];	// Mem.scala:30:36, :32:38
        clmem_buffer = {_RANDOM_0[31:3], _RANDOM_1, _RANDOM_2[2:0]};	// Mem.scala:30:36, :33:31
        rdata_buffer = {_RANDOM_2[31:3], _RANDOM_3, _RANDOM_4[2:0]};	// Mem.scala:33:31, :34:31
        rdataio_buffer = {_RANDOM_4[31:3], _RANDOM_5, _RANDOM_6[2:0]};	// Mem.scala:34:31, :35:33
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1952:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1952:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_mwio_reg_wdata = _io_fwmem_reg_wdata_T | (&io_emio_wb_type) ? io_emio_reg_wdata : _io_fwmem_reg_wdata_T_3 ?
                rvalue : 64'h0;	// <stdin>:1952:10, Mem.scala:33:31, :149:{30,41,60}, :150:30, Mux.scala:101:16
  assign io_mwio_reg_waddr = io_emio_reg_waddr;	// <stdin>:1952:10
  assign io_mwio_wb_type = io_emio_wb_type;	// <stdin>:1952:10
  assign io_mwio_csr_wdata = io_emio_csr_wdata;	// <stdin>:1952:10
  assign io_mwio_csr_wen = io_emio_csr_wen;	// <stdin>:1952:10
  assign io_mwio_csr_waddr = io_emio_csr_waddr;	// <stdin>:1952:10
  assign io_mwio_has_inst = io_emio_has_inst;	// <stdin>:1952:10
  assign io_fwmem_reg_waddr = io_emio_reg_waddr;	// <stdin>:1952:10
  assign io_fwmem_reg_wdata = _io_fwmem_reg_wdata_T | (&io_emio_wb_type) ? io_emio_reg_wdata : _io_fwmem_reg_wdata_T_3 ?
                rvalue : 64'h0;	// <stdin>:1952:10, Mem.scala:33:31, :149:{30,60}, :150:30, :164:41, Mux.scala:101:16
  assign io_fwmem_reg_we = |io_emio_wb_type;	// <stdin>:1952:10, Mem.scala:161:40
  assign io_fwmem_csr_wdata = io_emio_csr_wdata;	// <stdin>:1952:10
  assign io_fwmem_csr_wen = io_emio_csr_wen;	// <stdin>:1952:10
  assign io_fwmem_csr_waddr = io_emio_csr_waddr;	// <stdin>:1952:10
endmodule

module Wb(	// <stdin>:2217:10
  input  [63:0] io_mwio_reg_wdata,
  input  [4:0]  io_mwio_reg_waddr,
  input  [1:0]  io_mwio_wb_type,
  input  [63:0] io_mwio_csr_wdata,
  input         io_mwio_csr_wen,
  input  [11:0] io_mwio_csr_waddr,
  input         io_mwio_has_inst,
                io_stall,
  output [4:0]  io_rfio_rd,
  output        io_rfio_reg_wen,
  output [63:0] io_rfio_reg_wdata,
  output [4:0]  io_fwwb_reg_waddr,
  output [63:0] io_fwwb_reg_wdata,
  output        io_fwwb_reg_we,
  output [63:0] io_fwwb_csr_wdata,
  output        io_fwwb_csr_wen,
  output [11:0] io_fwwb_csr_waddr,
                io_csrs_rd,
  output        io_csrs_csr_wen,
  output [63:0] io_csrs_csr_wdata);

  assign io_rfio_rd = io_mwio_reg_waddr;	// <stdin>:2217:10
  assign io_rfio_reg_wen = ~io_stall & (|io_mwio_wb_type);	// <stdin>:2217:10, Wb.scala:32:{27,59}
  assign io_rfio_reg_wdata = io_mwio_reg_wdata;	// <stdin>:2217:10
  assign io_fwwb_reg_waddr = io_mwio_reg_waddr;	// <stdin>:2217:10
  assign io_fwwb_reg_wdata = io_mwio_reg_wdata;	// <stdin>:2217:10
  assign io_fwwb_reg_we = |io_mwio_wb_type;	// <stdin>:2217:10, Wb.scala:32:59
  assign io_fwwb_csr_wdata = io_mwio_csr_wdata;	// <stdin>:2217:10
  assign io_fwwb_csr_wen = io_mwio_csr_wen;	// <stdin>:2217:10
  assign io_fwwb_csr_waddr = io_mwio_csr_waddr;	// <stdin>:2217:10
  assign io_csrs_rd = io_mwio_csr_waddr;	// <stdin>:2217:10
  assign io_csrs_csr_wen = ~io_stall & io_mwio_csr_wen;	// <stdin>:2217:10, Wb.scala:32:27, :47:27
  assign io_csrs_csr_wdata = io_mwio_csr_wdata;	// <stdin>:2217:10
endmodule

module CLINT(	// <stdin>:2241:10
  input         clock,
                reset,
                io_clex_valid,
  input  [2:0]  io_clex_ld_type,
  input  [63:0] io_clex_raddr,
  input  [2:0]  io_clex_sd_type,
  input  [63:0] io_clex_waddr,
  input  [7:0]  io_clex_wmask,
  input  [63:0] io_clex_wdata,
  output        io_clmem_Clrvalue_valid,
  output [63:0] io_clmem_Clrvalue_bits,
  output        io_timer_int);

  reg [31:0] MSIP;	// CLINT.scala:33:23
  reg [63:0] MTIMECMP;	// CLINT.scala:34:27
  reg [63:0] MTIME;	// CLINT.scala:35:24
  reg [63:0] rvalue_buf;	// CLINT.scala:38:29
  reg        valid_buf;	// CLINT.scala:39:28
  always @(posedge clock) begin
    if (reset) begin
      MSIP <= 32'h0;	// CLINT.scala:33:23
      MTIMECMP <= 64'h0;	// CLINT.scala:34:27
      MTIME <= 64'h0;	// CLINT.scala:34:27, :35:24
      rvalue_buf <= 64'h0;	// CLINT.scala:34:27, :38:29
      valid_buf <= 1'h0;	// CLINT.scala:39:28
    end
    else begin
      automatic logic _T_1;	// CLINT.scala:58:34
      automatic logic _T_2;	// CLINT.scala:58:34
      automatic logic _T_3;	// CLINT.scala:58:34
      automatic logic _T_5 = io_clex_waddr == 64'h2000000;	// CLINT.scala:58:34, :76:34
      automatic logic _T_10 = io_clex_waddr == 64'h2004000;	// CLINT.scala:58:34, :76:34
      _T_1 = io_clex_raddr == 64'h2000000;	// CLINT.scala:58:34
      _T_2 = io_clex_raddr == 64'h2004000;	// CLINT.scala:58:34
      _T_3 = io_clex_raddr == 64'h200BFF8;	// CLINT.scala:58:34
      if (~io_clex_valid | (|io_clex_ld_type) | ~((|io_clex_sd_type) & _T_5)) begin	// CLINT.scala:47:10, :51:24, :56:{30,34}, :72:{36,40}, :76:34
      end
      else if (&io_clex_wmask)	// CLINT.scala:47:10, :51:24, :56:{30,34}, :72:{36,40}, :76:34, :80:42
        MSIP <= io_clex_wdata[31:0];	// CLINT.scala:33:23, :82:50
      else if (io_clex_wmask == 8'hF)	// CLINT.scala:47:10, :51:24, :56:{30,34}, :72:{36,40}, :76:34, :80:42
        MSIP <= io_clex_wdata[31:0];	// CLINT.scala:33:23, :85:50
      else if (io_clex_wmask == 8'h3)	// CLINT.scala:47:10, :51:24, :56:{30,34}, :72:{36,40}, :76:34, :80:42
        MSIP <= {MSIP[31:16], io_clex_wdata[15:0]};	// CLINT.scala:33:23, :88:{45,67}, Cat.scala:33:92
      else if (io_clex_wmask == 8'h1)	// CLINT.scala:47:10, :51:24, :56:{30,34}, :72:{36,40}, :76:34, :80:42
        MSIP <= {MSIP[31:8], io_clex_wdata[7:0]};	// CLINT.scala:33:23, :91:{45,66}, Cat.scala:33:92
      if (~io_clex_valid | (|io_clex_ld_type) | ~(|io_clex_sd_type) | _T_5 | ~_T_10) begin	// CLINT.scala:47:10, :48:14, :51:24, :56:{30,34}, :72:{36,40}, :76:34
      end
      else if (&io_clex_wmask)	// CLINT.scala:47:10, :48:14, :51:24, :56:{30,34}, :72:{36,40}, :76:34, :98:42
        MTIMECMP <= io_clex_wdata;	// CLINT.scala:34:27
      else if (io_clex_wmask == 8'hF)	// CLINT.scala:47:10, :48:14, :51:24, :56:{30,34}, :72:{36,40}, :76:34, :80:42, :98:42
        MTIMECMP <= {MTIMECMP[63:32], io_clex_wdata[31:0]};	// CLINT.scala:34:27, :103:{53,75}, Cat.scala:33:92
      else if (io_clex_wmask == 8'h3)	// CLINT.scala:47:10, :48:14, :51:24, :56:{30,34}, :72:{36,40}, :76:34, :80:42, :98:42
        MTIMECMP <= {MTIMECMP[63:16], io_clex_wdata[15:0]};	// CLINT.scala:34:27, :106:{53,75}, Cat.scala:33:92
      else if (io_clex_wmask == 8'h1)	// CLINT.scala:47:10, :48:14, :51:24, :56:{30,34}, :72:{36,40}, :76:34, :80:42, :98:42
        MTIMECMP <= {MTIMECMP[63:8], io_clex_wdata[7:0]};	// CLINT.scala:34:27, :109:{53,74}, Cat.scala:33:92
      if (~io_clex_valid | (|io_clex_ld_type) | ~(|io_clex_sd_type) | _T_5 | _T_10 | io_clex_waddr !=
                                                64'h200BFF8)	// CLINT.scala:47:10, :48:14, :49:11, :51:24, :56:{30,34}, :58:34, :72:{36,40}, :76:34
        MTIME <= MTIME + 64'h1;	// CLINT.scala:35:24, :49:20
      else if (&io_clex_wmask)	// CLINT.scala:47:10, :48:14, :49:11, :51:24, :56:{30,34}, :58:34, :72:{36,40}, :76:34, :116:42
        MTIME <= io_clex_wdata;	// CLINT.scala:35:24
      else if (io_clex_wmask == 8'hF)	// CLINT.scala:47:10, :48:14, :49:11, :51:24, :56:{30,34}, :58:34, :72:{36,40}, :76:34, :80:42, :116:42
        MTIME <= {MTIME[63:32], io_clex_wdata[31:0]};	// CLINT.scala:35:24, :121:{47,69}, Cat.scala:33:92
      else if (io_clex_wmask == 8'h3)	// CLINT.scala:47:10, :48:14, :49:11, :51:24, :56:{30,34}, :58:34, :72:{36,40}, :76:34, :80:42, :116:42
        MTIME <= {MTIME[63:16], io_clex_wdata[15:0]};	// CLINT.scala:35:24, :124:{47,69}, Cat.scala:33:92
      else if (io_clex_wmask == 8'h1)	// CLINT.scala:47:10, :48:14, :49:11, :51:24, :56:{30,34}, :58:34, :72:{36,40}, :76:34, :80:42, :116:42
        MTIME <= {MTIME[63:8], io_clex_wdata[7:0]};	// CLINT.scala:35:24, :127:{47,68}, Cat.scala:33:92
      if (io_clex_valid & (|io_clex_ld_type)) begin	// CLINT.scala:45:16, :51:24, :56:{30,34}
        if (_T_1)	// CLINT.scala:58:34
          rvalue_buf <= {32'h0, MSIP};	// CLINT.scala:33:23, :38:29, :61:32
        else if (_T_2)	// CLINT.scala:58:34
          rvalue_buf <= MTIMECMP;	// CLINT.scala:34:27, :38:29
        else if (_T_3)	// CLINT.scala:58:34
          rvalue_buf <= MTIME;	// CLINT.scala:35:24, :38:29
        else	// CLINT.scala:58:34
          rvalue_buf <= 64'h0;	// CLINT.scala:34:27, :38:29
      end
      else	// CLINT.scala:45:16, :51:24, :56:{30,34}
        rvalue_buf <= 64'h0;	// CLINT.scala:34:27, :38:29
      valid_buf <= io_clex_valid & (|io_clex_ld_type) & (_T_1 | _T_2 | _T_3);	// CLINT.scala:39:28, :44:15, :51:24, :56:{30,34}, :58:34, :60:31
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2241:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2241:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2241:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2241:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2241:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2241:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2241:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:2241:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:2241:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:2241:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:2241:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:2241:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2241:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2241:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2241:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2241:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2241:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2241:10
        _RANDOM_3 = `RANDOM;	// <stdin>:2241:10
        _RANDOM_4 = `RANDOM;	// <stdin>:2241:10
        _RANDOM_5 = `RANDOM;	// <stdin>:2241:10
        _RANDOM_6 = `RANDOM;	// <stdin>:2241:10
        _RANDOM_7 = `RANDOM;	// <stdin>:2241:10
        MSIP = _RANDOM_0;	// CLINT.scala:33:23
        MTIMECMP = {_RANDOM_1, _RANDOM_2};	// CLINT.scala:34:27
        MTIME = {_RANDOM_3, _RANDOM_4};	// CLINT.scala:35:24
        rvalue_buf = {_RANDOM_5, _RANDOM_6};	// CLINT.scala:38:29
        valid_buf = _RANDOM_7[0];	// CLINT.scala:39:28
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2241:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2241:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_clmem_Clrvalue_valid = valid_buf;	// <stdin>:2241:10, CLINT.scala:39:28
  assign io_clmem_Clrvalue_bits = rvalue_buf;	// <stdin>:2241:10, CLINT.scala:38:29
  assign io_timer_int = MTIME >= MTIMECMP;	// <stdin>:2241:10, CLINT.scala:34:27, :35:24, :140:28
endmodule

module Forward(	// <stdin>:2372:10
  input  [4:0]  io_fwde_reg1_raddr,
                io_fwde_reg2_raddr,
  input  [11:0] io_fwde_csr_raddr,
  input  [4:0]  io_fwex_reg_waddr,
  input  [63:0] io_fwex_reg_wdata,
  input         io_fwex_reg_we,
  input  [63:0] io_fwex_csr_wdata,
  input         io_fwex_csr_wen,
  input  [11:0] io_fwex_csr_waddr,
  input  [4:0]  io_fwmem_reg_waddr,
  input  [63:0] io_fwmem_reg_wdata,
  input         io_fwmem_reg_we,
  input  [63:0] io_fwmem_csr_wdata,
  input         io_fwmem_csr_wen,
  input  [11:0] io_fwmem_csr_waddr,
  input  [4:0]  io_fwwb_reg_waddr,
  input  [63:0] io_fwwb_reg_wdata,
  input         io_fwwb_reg_we,
  input  [63:0] io_fwwb_csr_wdata,
  input         io_fwwb_csr_wen,
  input  [11:0] io_fwwb_csr_waddr,
  output        io_fwde_fw_sel1,
                io_fwde_fw_sel2,
  output [63:0] io_fwde_fw_data1,
                io_fwde_fw_data2,
  output        io_fwde_csr_fw_sel,
  output [63:0] io_fwde_csr_fw_data);

  wire reg1_ex_hazard = (|io_fwde_reg1_raddr) & io_fwex_reg_we & io_fwex_reg_waddr == io_fwde_reg1_raddr;	// Forward.scala:46:{46,73,95}
  wire reg2_ex_hazard = (|io_fwde_reg2_raddr) & io_fwex_reg_we & io_fwex_reg_waddr == io_fwde_reg2_raddr;	// Forward.scala:47:{46,73,95}
  wire reg1_mem_hazard = (|io_fwde_reg1_raddr) & io_fwmem_reg_we & io_fwmem_reg_waddr == io_fwde_reg1_raddr;	// Forward.scala:46:46, :49:{75,98}
  wire reg2_mem_hazard = (|io_fwde_reg2_raddr) & io_fwmem_reg_we & io_fwmem_reg_waddr == io_fwde_reg2_raddr;	// Forward.scala:47:46, :50:{75,98}
  wire reg1_wb_hazard = (|io_fwde_reg1_raddr) & io_fwwb_reg_we & io_fwwb_reg_waddr == io_fwde_reg1_raddr;	// Forward.scala:46:46, :52:{73,95}
  wire reg2_wb_hazard = (|io_fwde_reg2_raddr) & io_fwwb_reg_we & io_fwwb_reg_waddr == io_fwde_reg2_raddr;	// Forward.scala:47:46, :53:{73,95}
  wire csr_ex_harzard = io_fwex_csr_wen & io_fwex_csr_waddr == io_fwde_csr_raddr;	// Forward.scala:74:{42,64}
  wire csr_mem_harzard = io_fwmem_csr_wen & io_fwmem_csr_waddr == io_fwde_csr_raddr;	// Forward.scala:75:{44,67}
  wire csr_wb_harzard = io_fwwb_csr_wen & io_fwwb_csr_waddr == io_fwde_csr_raddr;	// Forward.scala:76:{42,64}
  assign io_fwde_fw_sel1 = reg1_ex_hazard | reg1_mem_hazard | reg1_wb_hazard;	// <stdin>:2372:10, Forward.scala:46:73, :49:75, :52:73, :55:57
  assign io_fwde_fw_sel2 = reg2_ex_hazard | reg2_mem_hazard | reg2_wb_hazard;	// <stdin>:2372:10, Forward.scala:47:73, :50:75, :53:73, :56:57
  assign io_fwde_fw_data1 = reg1_ex_hazard ? io_fwex_reg_wdata : reg1_mem_hazard ? io_fwmem_reg_wdata : reg1_wb_hazard
                ? io_fwwb_reg_wdata : 64'h0;	// <stdin>:2372:10, Forward.scala:46:73, :49:75, :52:73, Mux.scala:101:16
  assign io_fwde_fw_data2 = reg2_ex_hazard ? io_fwex_reg_wdata : reg2_mem_hazard ? io_fwmem_reg_wdata : reg2_wb_hazard
                ? io_fwwb_reg_wdata : 64'h0;	// <stdin>:2372:10, Forward.scala:47:73, :50:75, :53:73, Mux.scala:101:16
  assign io_fwde_csr_fw_sel = csr_ex_harzard | csr_mem_harzard | csr_wb_harzard;	// <stdin>:2372:10, Forward.scala:74:42, :75:44, :76:42, :78:60
  assign io_fwde_csr_fw_data = csr_ex_harzard ? io_fwex_csr_wdata : csr_mem_harzard ? io_fwmem_csr_wdata : csr_wb_harzard
                ? io_fwwb_csr_wdata : 64'h0;	// <stdin>:2372:10, Forward.scala:74:42, :75:44, :76:42, Mux.scala:101:16
endmodule

module Regfile(	// <stdin>:2429:10
  input         clock,
  input  [4:0]  io_RfDe_reg1_raddr,
                io_RfDe_reg2_raddr,
                io_RfWb_rd,
  input         io_RfWb_reg_wen,
  input  [63:0] io_RfWb_reg_wdata,
  output [63:0] io_RfDe_reg1_rdata,
                io_RfDe_reg2_rdata);

  wire [63:0] _regs_ext_R0_data;	// Regfile.scala:32:19
  wire [63:0] _regs_ext_R1_data;	// Regfile.scala:32:19
  wire [63:0] _regs_ext_R2_data;	// Regfile.scala:32:19
  regs_combMem regs_ext (	// Regfile.scala:32:19
    .R0_addr (io_RfWb_rd),
    .R0_en   (1'h1),	// <stdin>:2429:10
    .R0_clk  (clock),
    .R1_addr (io_RfDe_reg1_raddr),
    .R1_en   (1'h1),	// <stdin>:2429:10
    .R1_clk  (clock),
    .R2_addr (io_RfDe_reg2_raddr),
    .R2_en   (1'h1),	// <stdin>:2429:10
    .R2_clk  (clock),
    .W0_addr (5'h0),	// Regfile.scala:37:9
    .W0_en   (1'h1),	// <stdin>:2429:10
    .W0_clk  (clock),
    .W0_data (64'h0),	// Regfile.scala:37:13
    .W1_addr (io_RfWb_rd),
    .W1_en   (1'h1),	// <stdin>:2429:10
    .W1_clk  (clock),
    .W1_data (io_RfWb_reg_wen & (|io_RfWb_rd) ? io_RfWb_reg_wdata : _regs_ext_R0_data),	// Regfile.scala:32:19, :39:{28,45,60}
    .R0_data (_regs_ext_R0_data),
    .R1_data (_regs_ext_R1_data),
    .R2_data (_regs_ext_R2_data)
  );
  assign io_RfDe_reg1_rdata = (|io_RfDe_reg1_raddr) ? _regs_ext_R1_data : 64'h0;	// <stdin>:2429:10, Regfile.scala:32:19, :37:13, :48:{30,50}
  assign io_RfDe_reg2_rdata = (|io_RfDe_reg2_raddr) ? _regs_ext_R2_data : 64'h0;	// <stdin>:2429:10, Regfile.scala:32:19, :37:13, :49:{30,50}
endmodule

module FlowControl(	// <stdin>:2452:10
  input         io_fcde_jump_flag,
  input  [31:0] io_fcde_jump_pc,
  input         io_fcde_load_use,
                io_fcex_jump_flag,
  input  [31:0] io_fcex_jump_pc,
  input         io_fcex_mul_div,
                io_fcex_mul_div_valid,
                io_fctr_pop_NOP,
  input  [2:0]  io_fctr_trap_state,
  input         io_fctr_jump_flag,
  input  [31:0] io_fctr_jump_pc,
  input         io_fcIcache_req,
  input  [2:0]  io_fcIcache_state,
  input  [7:0]  io_fcIcache_mask,
  input         io_fcIcache_cpu_valid,
                io_fcIcache_axi_valid,
                io_fcDcache_req,
  input  [2:0]  io_fcDcache_state,
  input  [7:0]  io_fcDcache_mask,
  input         io_fcDcache_hit,
                io_fcDcache_axi_valid,
                io_fcio_req,
  input  [1:0]  io_fcio_state,
  output        io_fcfe_jump_flag,
  output [31:0] io_fcfe_jump_pc,
  output        io_fcfe_flush,
                io_fcfe_stall,
                io_fcde_flush,
                io_fcde_stall,
                io_fcex_stall,
                io_fcmem_stall,
                io_fcwb_stall,
                io_fcio_stall,
                io_sdb_stall);

  wire Icache_stall;	// <stdin>:2457:5
  wire Dcache_stall;	// <stdin>:2459:5
  wire IO_stall;	// <stdin>:2461:5
  wire MULDIV_stall;	// <stdin>:2463:5
  wire _T_8 = io_fcIcache_state == 3'h0;	// FlowControl.scala:148:34, :150:34
  assign Icache_stall = ~io_fcIcache_cpu_valid & io_fcIcache_state != 3'h1 & ~(io_fcIcache_state == 3'h4 &
                io_fcIcache_axi_valid) & ((|io_fcIcache_state) | _T_8 & io_fcIcache_req &
                (|io_fcIcache_mask) | _T_8 & io_fcIcache_req & ~(|io_fcIcache_mask) & ~io_fcDcache_hit);	// FlowControl.scala:140:32, :141:22, :142:{34,60}, :144:{34,65,90}, :145:22, :148:{34,42}, :149:22, :150:{34,61,81,85}, :152:{64,86,89}
  wire _T_25 = io_fcDcache_state == 3'h0;	// FlowControl.scala:148:34, :168:34
  assign Dcache_stall = io_fcDcache_state != 3'h1 & ~(io_fcDcache_state == 3'h4 & io_fcDcache_axi_valid) &
                ~((&io_fcDcache_state) & io_fcDcache_axi_valid) & ((|io_fcDcache_state) | _T_25 &
                io_fcDcache_req & (|io_fcDcache_mask) | _T_25 & io_fcDcache_req & ~(|io_fcDcache_mask) &
                ~io_fcDcache_hit);	// FlowControl.scala:142:34, :144:34, :160:{28,54}, :161:22, :162:{34,65,90}, :163:22, :164:{34,59,84}, :165:22, :166:{34,42}, :167:22, :168:{34,61,81,85}, :170:{64,86,89}
  assign IO_stall = io_fcio_req & io_fcio_state == 2'h0 | io_fcio_state == 2'h1;	// FlowControl.scala:180:{22,39,59}, :181:18, :182:{30,49}
  assign MULDIV_stall = ~io_fcex_mul_div_valid & io_fcex_mul_div;	// FlowControl.scala:190:32, :191:22, :192:32
  wire _SFBundle_T_3 = io_fctr_trap_state == 3'h4 | (&io_fctr_trap_state);	// FlowControl.scala:144:34, :204:{33,47,70}
  wire _SFBundle_T_14 = io_fctr_pop_NOP | io_fctr_trap_state == 3'h1 | io_fctr_trap_state == 3'h2 |
                io_fctr_trap_state == 3'h3 | io_fctr_trap_state == 3'h5 | io_fctr_trap_state == 3'h6;	// FlowControl.scala:142:34, :205:{60,93}, :206:{36,71,87,109}
  wire SFBundle_0 = IO_stall | Icache_stall | Dcache_stall | io_fcde_load_use | ~_SFBundle_T_3 &
                (_SFBundle_T_14 | ~io_fctr_jump_flag & ~io_fcex_jump_flag & ~io_fcde_jump_flag &
                MULDIV_stall);	// FlowControl.scala:204:47, :206:87, Mux.scala:101:16
  wire SFBundle_1 = IO_stall | Icache_stall | Dcache_stall | ~io_fcde_load_use & ~_SFBundle_T_3 &
                ~_SFBundle_T_14 & ~io_fctr_jump_flag & ~io_fcex_jump_flag & ~io_fcde_jump_flag &
                MULDIV_stall;	// FlowControl.scala:204:47, :206:87, Mux.scala:101:16
  wire SFBundle_2 = IO_stall | Icache_stall | Dcache_stall | ~io_fcde_load_use & ~_SFBundle_T_3 &
                ~_SFBundle_T_14 & ~io_fctr_jump_flag & ~io_fcex_jump_flag & ~io_fcde_jump_flag &
                MULDIV_stall;	// FlowControl.scala:204:47, :206:87, Mux.scala:101:16
  wire SFBundle_4 = IO_stall | Icache_stall | Dcache_stall | ~io_fcde_load_use & ~_SFBundle_T_3 &
                ~_SFBundle_T_14 & ~io_fctr_jump_flag & ~io_fcex_jump_flag & ~io_fcde_jump_flag &
                MULDIV_stall;	// FlowControl.scala:204:47, :206:87, Mux.scala:101:16
  assign io_fcfe_jump_flag = io_fcde_jump_flag | io_fcex_jump_flag | io_fctr_jump_flag;	// <stdin>:2452:10, FlowControl.scala:227:65
  assign io_fcfe_jump_pc = io_fctr_jump_flag ? io_fctr_jump_pc : io_fcex_jump_flag ? io_fcex_jump_pc :
                io_fcde_jump_flag ? io_fcde_jump_pc : 32'h80000000;	// <stdin>:2452:10, Mux.scala:101:16
  assign io_fcfe_flush = ~IO_stall & ~Icache_stall & ~Dcache_stall & ~io_fcde_load_use & (_SFBundle_T_3 |
                ~_SFBundle_T_14 & (io_fctr_jump_flag | io_fcex_jump_flag | io_fcde_jump_flag));	// <stdin>:2452:10, FlowControl.scala:204:47, :206:87, Mux.scala:101:16
  assign io_fcfe_stall = SFBundle_0;	// <stdin>:2452:10, Mux.scala:101:16
  assign io_fcde_flush = ~IO_stall & ~Icache_stall & ~Dcache_stall & (io_fcde_load_use | _SFBundle_T_3 |
                _SFBundle_T_14 | ~io_fctr_jump_flag & io_fcex_jump_flag);	// <stdin>:2452:10, FlowControl.scala:204:47, :206:87, Mux.scala:101:16
  assign io_fcde_stall = SFBundle_1;	// <stdin>:2452:10, Mux.scala:101:16
  assign io_fcex_stall = SFBundle_2;	// <stdin>:2452:10, Mux.scala:101:16
  assign io_fcmem_stall = IO_stall | Icache_stall | Dcache_stall | ~io_fcde_load_use & ~_SFBundle_T_3 &
                ~_SFBundle_T_14 & ~io_fctr_jump_flag & ~io_fcex_jump_flag & ~io_fcde_jump_flag &
                MULDIV_stall;	// <stdin>:2452:10, FlowControl.scala:204:47, :206:87, Mux.scala:101:16
  assign io_fcwb_stall = SFBundle_4;	// <stdin>:2452:10, Mux.scala:101:16
  assign io_fcio_stall = SFBundle_2;	// <stdin>:2452:10, Mux.scala:101:16
  assign io_sdb_stall = SFBundle_0 & SFBundle_1 & SFBundle_2 & SFBundle_4;	// <stdin>:2452:10, FlowControl.scala:241:67, Mux.scala:101:16
endmodule

module CSRs(	// <stdin>:2720:10
  input         clock,
                reset,
  input  [11:0] io_CSRDe_csr_raddr,
                io_CSRWb_rd,
  input         io_CSRWb_csr_wen,
  input  [63:0] io_CSRWb_csr_wdata,
  input  [11:0] io_CSRTr_rd,
  input         io_CSRTr_csr_wen,
  input  [63:0] io_CSRTr_csr_wdata,
  input         io_timer_int,
  output [63:0] io_CSRDe_csr_rdata,
                io_CSRTr_MTVEC,
                io_CSRTr_MCAUSE,
                io_CSRTr_MEPC,
                io_CSRTr_MIE,
                io_CSRTr_MIP,
                io_CSRTr_MSTATUS);

  reg [63:0] MTVEC;	// CSRs.scala:43:24
  reg [63:0] MCAUSE;	// CSRs.scala:44:25
  reg [63:0] MEPC;	// CSRs.scala:45:23
  reg [63:0] MIE;	// CSRs.scala:46:22
  reg [63:0] MIP;	// CSRs.scala:47:22
  reg [63:0] MSTATUS;	// CSRs.scala:48:26
  reg [63:0] MSCRATCH;	// CSRs.scala:49:27
  always @(posedge clock) begin
    if (reset) begin
      MTVEC <= 64'h0;	// CSRs.scala:43:24
      MCAUSE <= 64'h0;	// CSRs.scala:43:24, :44:25
      MEPC <= 64'h0;	// CSRs.scala:43:24, :45:23
      MIE <= 64'h0;	// CSRs.scala:43:24, :46:22
      MIP <= 64'h0;	// CSRs.scala:43:24, :47:22
      MSTATUS <= 64'h0;	// CSRs.scala:43:24, :48:26
      MSCRATCH <= 64'h0;	// CSRs.scala:43:24, :49:27
    end
    else begin
      automatic logic [11:0] _T = io_CSRWb_rd | io_CSRTr_rd;	// CSRs.scala:56:24
      automatic logic        _T_1 = _T == 12'h305;	// CSRs.scala:56:{24,38}
      automatic logic        _T_2 = _T == 12'h342;	// CSRs.scala:56:{24,38}
      automatic logic        _T_3 = _T == 12'h341;	// CSRs.scala:56:{24,38}
      automatic logic        _T_4 = _T == 12'h304;	// CSRs.scala:56:{24,38}
      automatic logic        _T_5 = _T == 12'h344;	// CSRs.scala:56:{24,38}
      automatic logic        _T_6 = _T == 12'h300;	// CSRs.scala:56:{24,38}
      if (_T_1) begin	// CSRs.scala:56:38
        if (io_CSRWb_csr_wen)
          MTVEC <= io_CSRWb_csr_wdata;	// CSRs.scala:43:24
        else if (io_CSRTr_csr_wen)
          MTVEC <= io_CSRTr_csr_wdata;	// CSRs.scala:43:24
        else
          MTVEC <= 64'h0;	// CSRs.scala:43:24
      end
      if (_T_1 | ~_T_2) begin	// CSRs.scala:44:25, :56:38
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:44:25, :56:38
        MCAUSE <= io_CSRWb_csr_wdata;	// CSRs.scala:44:25
      else if (io_CSRTr_csr_wen)	// CSRs.scala:44:25, :56:38
        MCAUSE <= io_CSRTr_csr_wdata;	// CSRs.scala:44:25
      else	// CSRs.scala:44:25, :56:38
        MCAUSE <= 64'h0;	// CSRs.scala:43:24, :44:25
      if (_T_1 | _T_2 | ~_T_3) begin	// CSRs.scala:45:23, :56:38
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:45:23, :56:38
        MEPC <= io_CSRWb_csr_wdata;	// CSRs.scala:45:23
      else if (io_CSRTr_csr_wen)	// CSRs.scala:45:23, :56:38
        MEPC <= io_CSRTr_csr_wdata;	// CSRs.scala:45:23
      else	// CSRs.scala:45:23, :56:38
        MEPC <= 64'h0;	// CSRs.scala:43:24, :45:23
      if (_T_1 | _T_2 | _T_3 | ~_T_4) begin	// CSRs.scala:46:22, :56:38
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:46:22, :56:38
        MIE <= io_CSRWb_csr_wdata;	// CSRs.scala:46:22
      else if (io_CSRTr_csr_wen)	// CSRs.scala:46:22, :56:38
        MIE <= io_CSRTr_csr_wdata;	// CSRs.scala:46:22
      else	// CSRs.scala:46:22, :56:38
        MIE <= 64'h0;	// CSRs.scala:43:24, :46:22
      if (_T_1 | _T_2 | _T_3 | _T_4 | ~_T_5) begin	// CSRs.scala:52:23, :56:38
        if (io_timer_int)
          MIP <= {MIP[63:8], 1'h1, MIP[6:0]};	// CSRs.scala:47:22, :53:{23,39}, Cat.scala:33:92
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:52:23, :56:38
        MIP <= io_CSRWb_csr_wdata;	// CSRs.scala:47:22
      else if (io_CSRTr_csr_wen)	// CSRs.scala:52:23, :56:38
        MIP <= io_CSRTr_csr_wdata;	// CSRs.scala:47:22
      else	// CSRs.scala:52:23, :56:38
        MIP <= 64'h0;	// CSRs.scala:43:24, :47:22
      if (_T_1 | _T_2 | _T_3 | _T_4 | _T_5 | ~_T_6) begin	// CSRs.scala:48:26, :56:38
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:48:26, :56:38
        MSTATUS <= io_CSRWb_csr_wdata;	// CSRs.scala:48:26
      else if (io_CSRTr_csr_wen)	// CSRs.scala:48:26, :56:38
        MSTATUS <= io_CSRTr_csr_wdata;	// CSRs.scala:48:26
      else	// CSRs.scala:48:26, :56:38
        MSTATUS <= 64'h0;	// CSRs.scala:43:24, :48:26
      if (_T_1 | _T_2 | _T_3 | _T_4 | _T_5 | _T_6 | _T != 12'h340) begin	// CSRs.scala:49:27, :56:{24,38}
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:49:27, :56:{24,38}
        MSCRATCH <= io_CSRWb_csr_wdata;	// CSRs.scala:49:27
      else if (io_CSRTr_csr_wen)	// CSRs.scala:49:27, :56:{24,38}
        MSCRATCH <= io_CSRTr_csr_wdata;	// CSRs.scala:49:27
      else	// CSRs.scala:49:27, :56:{24,38}
        MSCRATCH <= 64'h0;	// CSRs.scala:43:24, :49:27
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2720:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2720:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2720:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2720:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2720:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2720:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2720:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:2720:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:2720:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:2720:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:2720:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:2720:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:2720:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:2720:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:2720:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:2720:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:2720:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:2720:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2720:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2720:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2720:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2720:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2720:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2720:10
        _RANDOM_3 = `RANDOM;	// <stdin>:2720:10
        _RANDOM_4 = `RANDOM;	// <stdin>:2720:10
        _RANDOM_5 = `RANDOM;	// <stdin>:2720:10
        _RANDOM_6 = `RANDOM;	// <stdin>:2720:10
        _RANDOM_7 = `RANDOM;	// <stdin>:2720:10
        _RANDOM_8 = `RANDOM;	// <stdin>:2720:10
        _RANDOM_9 = `RANDOM;	// <stdin>:2720:10
        _RANDOM_10 = `RANDOM;	// <stdin>:2720:10
        _RANDOM_11 = `RANDOM;	// <stdin>:2720:10
        _RANDOM_12 = `RANDOM;	// <stdin>:2720:10
        _RANDOM_13 = `RANDOM;	// <stdin>:2720:10
        MTVEC = {_RANDOM_0, _RANDOM_1};	// CSRs.scala:43:24
        MCAUSE = {_RANDOM_2, _RANDOM_3};	// CSRs.scala:44:25
        MEPC = {_RANDOM_4, _RANDOM_5};	// CSRs.scala:45:23
        MIE = {_RANDOM_6, _RANDOM_7};	// CSRs.scala:46:22
        MIP = {_RANDOM_8, _RANDOM_9};	// CSRs.scala:47:22
        MSTATUS = {_RANDOM_10, _RANDOM_11};	// CSRs.scala:48:26
        MSCRATCH = {_RANDOM_12, _RANDOM_13};	// CSRs.scala:49:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2720:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2720:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_CSRDe_csr_rdata = io_CSRDe_csr_raddr == 12'h340 ? MSCRATCH : io_CSRDe_csr_raddr == 12'h300 ? MSTATUS :
                io_CSRDe_csr_raddr == 12'h344 | io_CSRDe_csr_raddr == 12'h304 ? MIE : io_CSRDe_csr_raddr ==
                12'h341 ? MEPC : io_CSRDe_csr_raddr == 12'h342 ? MCAUSE : io_CSRDe_csr_raddr == 12'h305 ?
                MTVEC : 64'h0;	// <stdin>:2720:10, CSRs.scala:43:24, :44:25, :45:23, :46:22, :48:26, :49:27, :56:38, Mux.scala:81:{58,61}
  assign io_CSRTr_MTVEC = MTVEC;	// <stdin>:2720:10, CSRs.scala:43:24
  assign io_CSRTr_MCAUSE = MCAUSE;	// <stdin>:2720:10, CSRs.scala:44:25
  assign io_CSRTr_MEPC = MEPC;	// <stdin>:2720:10, CSRs.scala:45:23
  assign io_CSRTr_MIE = MIE;	// <stdin>:2720:10, CSRs.scala:46:22
  assign io_CSRTr_MIP = MIP;	// <stdin>:2720:10, CSRs.scala:47:22
  assign io_CSRTr_MSTATUS = MSTATUS;	// <stdin>:2720:10, CSRs.scala:48:26
endmodule

module Trap(	// <stdin>:2809:10
  input         clock,
                reset,
                io_ex_hasinst,
                io_mem_hasinst,
                io_wb_hasinst,
  input  [63:0] io_csrtr_MTVEC,
                io_csrtr_MCAUSE,
                io_csrtr_MEPC,
                io_csrtr_MIE,
                io_csrtr_MIP,
                io_csrtr_MSTATUS,
  input  [31:0] io_inst,
                io_pc,
  output [11:0] io_csrtr_rd,
  output        io_csrtr_csr_wen,
  output [63:0] io_csrtr_csr_wdata,
  output        io_fctr_pop_NOP,
  output [2:0]  io_fctr_trap_state,
  output        io_fctr_jump_flag,
  output [31:0] io_fctr_jump_pc);

  reg  [63:0]      cause;	// Trap.scala:45:24
  reg  [31:0]      pc;	// Trap.scala:46:21
  reg  [2:0]       state;	// Trap.scala:48:24
  wire             _T = state == 3'h0;	// Trap.scala:48:24, :64:18
  wire             _T_2 = io_inst == 32'h73 & io_csrtr_MSTATUS[3];	// Trap.scala:52:36, :71:{26,57}
  wire             _T_3 = io_inst == 32'h30200073;	// Trap.scala:80:32
  wire             _T_7 = io_csrtr_MIP[7] & io_csrtr_MSTATUS[3] & io_csrtr_MIE[7];	// Trap.scala:52:36, :85:{36,57,72}
  wire             _T_24 = io_csrtr_MCAUSE == 64'h8000000000000007;	// Trap.scala:131:36
  wire [7:0][63:0] _GEN = {{{io_csrtr_MSTATUS[63:4], io_csrtr_MSTATUS[7], io_csrtr_MSTATUS[2:0]}}, {_T_24 ?
                {io_csrtr_MIP[63:8], 1'h0, io_csrtr_MIP[6:0]} : 64'h0}, {64'h0}, {{io_csrtr_MSTATUS[63:8],
                io_csrtr_MSTATUS[3], io_csrtr_MSTATUS[6:4], 1'h0, io_csrtr_MSTATUS[2:0]}}, {cause},
                {{32'h0, pc}}, {64'h0}, {64'h0}};	// Cat.scala:33:92, Trap.scala:45:24, :46:21, :52:36, :58:24, :64:18, :67:32, :104:32, :111:32, :119:{32,55,100,133}, :131:36, :133:{40,59,84}, :143:{32,55,79,100}
  wire [7:0][11:0] _GEN_0 = {{12'h300}, {_T_24 ? 12'h344 : 12'h0}, {12'h0}, {12'h300}, {12'h342}, {12'h341}, {12'h0},
                {12'h0}};	// Trap.scala:61:17, :64:18, :69:25, :106:25, :113:25, :121:25, :131:36, :135:33, :145:25
  wire             _T_26 = state == 3'h4;	// Trap.scala:48:24, :115:19, :154:18
  always @(posedge clock) begin
    if (reset) begin
      cause <= 64'h0;	// Trap.scala:45:24
      pc <= 32'h0;	// Trap.scala:46:21
      state <= 3'h0;	// Trap.scala:48:24
    end
    else begin
      automatic logic            _GEN_1;	// Trap.scala:46:21, :80:62, :85:76
      automatic logic            _GEN_2 = io_ex_hasinst | io_mem_hasinst | io_wb_hasinst;	// Trap.scala:48:24, :99:70, :100:23
      automatic logic [7:0][2:0] _GEN_3;	// Trap.scala:48:24, :64:18, :71:74, :99:70, :108:19, :115:19, :123:19, :126:70, :139:19, :147:19
      _GEN_1 = _T_3 | ~_T_7;	// Trap.scala:46:21, :80:{32,62}, :85:{57,76}
      if (_T) begin	// Trap.scala:64:18
        if (_T_2)	// Trap.scala:71:57
          cause <= 64'hB;	// Trap.scala:45:24, :75:23
        else if (_GEN_1) begin	// Trap.scala:46:21, :71:57, :80:62, :85:76
        end
        else	// Trap.scala:46:21, :71:57, :80:62, :85:76
          cause <= 64'h8000000000000007;	// Trap.scala:45:24, :131:36
      end
      if (_T & (_T_2 | ~_GEN_1))	// Trap.scala:46:21, :64:18, :71:{57,74}, :74:20, :80:62, :85:76
        pc <= io_pc;	// Trap.scala:46:21
      _GEN_3 = {{3'h0}, {3'h7}, {_GEN_2 ? state : 3'h6}, {3'h0}, {3'h4}, {3'h3}, {_GEN_2 ? state : 3'h2},
                                                {_T_2 ? 3'h1 : _T_3 ? 3'h5 : _T_7 ? 3'h1 : state}};	// Trap.scala:48:24, :64:18, :71:{57,74}, :79:23, :80:{32,62}, :83:23, :85:{57,76}, :94:23, :99:70, :100:23, :108:19, :115:19, :123:19, :126:70, :127:23, :139:19, :147:19
      state <= _GEN_3[state];	// Trap.scala:48:24, :64:18, :71:74, :99:70, :108:19, :115:19, :123:19, :126:70, :139:19, :147:19
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2809:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2809:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2809:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2809:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2809:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2809:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2809:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:2809:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2809:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2809:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2809:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2809:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2809:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2809:10
        _RANDOM_3 = `RANDOM;	// <stdin>:2809:10
        cause = {_RANDOM_0, _RANDOM_1};	// Trap.scala:45:24
        pc = _RANDOM_2;	// Trap.scala:46:21
        state = _RANDOM_3[2:0];	// Trap.scala:48:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2809:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2809:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_csrtr_rd = _GEN_0[state];	// <stdin>:2809:10, Trap.scala:48:24, :61:17, :64:18, :69:25, :106:25, :113:25, :121:25, :131:36, :145:25
  assign io_csrtr_csr_wen = ~_T & state != 3'h1 & (state == 3'h2 | state == 3'h3 | state == 3'h4 | state != 3'h5 &
                (state == 3'h6 ? _T_24 : (&state)));	// <stdin>:2809:10, Trap.scala:48:24, :59:22, :64:18, :68:30, :79:23, :83:23, :100:23, :105:30, :108:19, :115:19, :127:23, :131:36
  assign io_csrtr_csr_wdata = _GEN[state];	// <stdin>:2809:10, Trap.scala:48:24, :58:24, :64:18, :67:32, :104:32, :111:32, :119:32, :131:36, :143:32
  assign io_fctr_pop_NOP = _T & (_T_2 | _T_3 | _T_7);	// <stdin>:2809:10, Trap.scala:62:21, :64:18, :71:{57,74}, :78:33, :80:{32,62}, :85:57
  assign io_fctr_trap_state = state;	// <stdin>:2809:10, Trap.scala:48:24
  assign io_fctr_jump_flag = _T_26 | (&state);	// <stdin>:2809:10, Trap.scala:48:24, :154:18, :156:31
  assign io_fctr_jump_pc = _T_26 ? io_csrtr_MTVEC[31:0] : (&state) ? io_csrtr_MEPC[31:0] : 32'h0;	// <stdin>:2809:10, Trap.scala:46:21, :48:24, :153:21, :154:18, :157:29, :161:29
endmodule

module AXIArbitor(	// <stdin>:2943:10
  input           clock,
                  reset,
                  io_master0_req_valid,
                  io_master0_req_bits_rw,
  input  [31:0]   io_master0_req_bits_addr,
  input  [1023:0] io_master0_req_bits_data,
  input  [7:0]    io_master0_req_bits_mask,
  input           io_master1_req_valid,
                  io_master1_req_bits_rw,
  input  [31:0]   io_master1_req_bits_addr,
  input  [1023:0] io_master1_req_bits_data,
  input  [7:0]    io_master1_req_bits_mask,
  input           io_master2_req_valid,
                  io_master2_req_bits_rw,
  input  [31:0]   io_master2_req_bits_addr,
  input  [1023:0] io_master2_req_bits_data,
  input  [7:0]    io_master2_req_bits_mask,
  input           io_AXI_O_aw_ready,
                  io_AXI_O_w_ready,
                  io_AXI_O_b_valid,
                  io_AXI_O_ar_ready,
                  io_AXI_O_r_valid,
  input  [63:0]   io_AXI_O_r_bits_data,
  input           io_AXI_O_r_bits_last,
  output          io_master0_resp_valid,
  output [1023:0] io_master0_resp_bits_data,
  output          io_master1_resp_valid,
  output [1023:0] io_master1_resp_bits_data,
  output          io_master2_resp_valid,
  output [1023:0] io_master2_resp_bits_data,
  output          io_AXI_O_aw_valid,
  output [31:0]   io_AXI_O_aw_bits_addr,
  output [7:0]    io_AXI_O_aw_bits_len,
  output          io_AXI_O_w_valid,
  output [63:0]   io_AXI_O_w_bits_data,
  output [7:0]    io_AXI_O_w_bits_strb,
  output          io_AXI_O_w_bits_last,
                  io_AXI_O_ar_valid,
  output [31:0]   io_AXI_O_ar_bits_addr,
  output [7:0]    io_AXI_O_ar_bits_len);

  wire [3:0]         master_choose;	// <stdin>:2948:5
  assign master_choose = io_master0_req_valid ? 4'h9 : io_master1_req_valid ? 4'hA : io_master2_req_valid ? 4'hC :
                4'h0;	// <stdin>:2949:22, AXIArbitor.scala:51:19, Mux.scala:101:16
  reg  [3:0]         choose_buffer;	// AXIArbitor.scala:59:32
  reg  [7:0]         mask;	// AXIArbitor.scala:65:23
  wire [31:0]        _addr_T_6 = choose_buffer[0] ? io_master0_req_bits_addr : choose_buffer[1] ? io_master1_req_bits_addr :
                choose_buffer[2] ? io_master2_req_bits_addr : 32'h0;	// AXIArbitor.scala:59:32, :85:30, :86:30, :87:30, Mux.scala:101:16
  wire [1023:0]      _data_T_7 = choose_buffer[3] ? (choose_buffer[0] ? io_master0_req_bits_data : choose_buffer[1] ?
                io_master1_req_bits_data : choose_buffer[2] ? io_master2_req_bits_data : 1024'h0) : 1024'h0;	// <stdin>:2963:13, AXIArbitor.scala:59:32, :81:28, :85:30, :86:30, :87:30, :103:16, Mux.scala:101:16
  wire [3:0]         _burst_len_T_7 = ~(choose_buffer[3]) | choose_buffer[0] ? 4'h0 : choose_buffer[1] ? 4'hF :
                {4{choose_buffer[2]}};	// <stdin>:2949:22, AXIArbitor.scala:59:32, :81:28, :85:30, :86:30, :87:30, :125:21, Mux.scala:101:16
  reg  [1:0]         state;	// AXIArbitor.scala:137:24
  reg                aw_comp;	// AXIArbitor.scala:140:26
  reg                w_comp;	// AXIArbitor.scala:141:25
  reg  [3:0]         w_count;	// AXIArbitor.scala:143:26
  reg  [1023:0]      r_buffer;	// AXIArbitor.scala:148:27
  wire               _T = state == 2'h0;	// AXIArbitor.scala:137:24, :200:18
  wire               _T_2 = state == 2'h1;	// AXIArbitor.scala:137:24, :200:18, :210:27
  wire [7:0]         _GEN = {4'h0, _burst_len_T_7};	// <stdin>:2949:22, AXIArbitor.scala:125:21, :217:34
  wire               _GEN_0 = _T | ~_T_2;	// AXIArbitor.scala:164:26, :200:18
  wire               _GEN_1 = ~_T & _T_2 & ~aw_comp;	// AXIArbitor.scala:140:26, :171:23, :200:18, :218:37
  wire [15:0][63:0]  _GEN_2 = {{_GEN_0 ? 64'h0 : _data_T_7[1023:960]}, {_GEN_0 ? 64'h0 : _data_T_7[959:896]}, {_GEN_0 ?
                64'h0 : _data_T_7[895:832]}, {_GEN_0 ? 64'h0 : _data_T_7[831:768]}, {_GEN_0 ? 64'h0 :
                _data_T_7[767:704]}, {_GEN_0 ? 64'h0 : _data_T_7[703:640]}, {_GEN_0 ? 64'h0 :
                _data_T_7[639:576]}, {_GEN_0 ? 64'h0 : _data_T_7[575:512]}, {_GEN_0 ? 64'h0 :
                _data_T_7[511:448]}, {_GEN_0 ? 64'h0 : _data_T_7[447:384]}, {_GEN_0 ? 64'h0 :
                _data_T_7[383:320]}, {_GEN_0 ? 64'h0 : _data_T_7[319:256]}, {_GEN_0 ? 64'h0 :
                _data_T_7[255:192]}, {_GEN_0 ? 64'h0 : _data_T_7[191:128]}, {_GEN_0 ? 64'h0 :
                _data_T_7[127:64]}, {_GEN_0 ? 64'h0 : _data_T_7[63:0]}};	// AXIArbitor.scala:103:16, :144:26, :164:26, :200:18, :222:53, :223:34
  wire [63:0]        _GEN_3;	// AXIArbitor.scala:223:34
  /* synopsys infer_mux_override */
  assign _GEN_3 = _GEN_2[w_count] /* cadence map_to_mux */;	// AXIArbitor.scala:143:26, :223:34
  wire               _GEN_4 = ~_T & _T_2 & _burst_len_T_7 == w_count;	// AXIArbitor.scala:125:21, :143:26, :171:23, :176:26, :200:18, :225:51
  wire               _GEN_5 = ~_T & _T_2 & ~w_comp;	// AXIArbitor.scala:141:25, :171:23, :178:22, :200:18, :226:36
  wire               _T_4 = aw_comp & w_comp & ~_T & _T_2 & io_AXI_O_b_valid;	// AXIArbitor.scala:140:26, :141:25, :171:23, :200:18, :234:36
  wire               _GEN_6 = ~(choose_buffer[0]) & choose_buffer[1];	// AXIArbitor.scala:59:32, :85:30, :86:30, :156:27, :240:39, :242:45
  wire               _GEN_7 = ~(choose_buffer[0]) & ~(choose_buffer[1]);	// AXIArbitor.scala:59:32, :85:30, :86:30, :156:27, :158:27, :240:39, :242:45, :245:43
  wire               _T_7 = state == 2'h2;	// AXIArbitor.scala:137:24, :168:28, :200:18
  wire               _GEN_8 = ~_T & ~_T_2 & _T_7;	// AXIArbitor.scala:164:26, :171:23, :193:23, :200:18
  wire               _GEN_9 = ~_T & ~_T_2 & ~_T_7 & (&state) & io_AXI_O_r_valid & io_AXI_O_r_bits_last;	// AXIArbitor.scala:137:24, :152:12, :164:26, :171:23, :186:26, :200:18
  wire [3:0][1023:0] _GEN_10 = {{_T_2 | _T_7 | ~((&state) & _GEN_9 & choose_buffer[0]) ? 1024'h0 : {r_buffer[959:0],
                io_AXI_O_r_bits_data}}, {1024'h0}, {1024'h0}, {1024'h0}};	// <stdin>:2963:13, AXIArbitor.scala:59:32, :85:30, :137:24, :148:27, :152:12, :155:31, :200:18, :268:25, :273:62, Cat.scala:33:92
  wire [3:0][1023:0] _GEN_11 = {{_T_2 | _T_7 | ~(&state) | ~_GEN_9 | choose_buffer[0] | ~(choose_buffer[1]) ? 1024'h0 :
                {r_buffer[959:0], io_AXI_O_r_bits_data}}, {1024'h0}, {1024'h0}, {1024'h0}};	// <stdin>:2963:13, AXIArbitor.scala:59:32, :85:30, :86:30, :137:24, :148:27, :152:12, :157:31, :158:27, :200:18, :242:45, :245:43, :268:25, :271:39, :276:62, Cat.scala:33:92
  wire [3:0][1023:0] _GEN_12 = {{_T_2 | _T_7 | ~(&state) | ~_GEN_9 | choose_buffer[0] | choose_buffer[1] ? 1024'h0 :
                {r_buffer[959:0], io_AXI_O_r_bits_data}}, {1024'h0}, {1024'h0}, {1024'h0}};	// <stdin>:2963:13, AXIArbitor.scala:59:32, :85:30, :86:30, :137:24, :148:27, :152:12, :157:31, :159:31, :200:18, :268:25, :271:39, :279:62, Cat.scala:33:92
  always @(posedge clock) begin
    if (reset) begin
      choose_buffer <= 4'h0;	// <stdin>:2949:22, AXIArbitor.scala:59:32
      mask <= 8'h0;	// AXIArbitor.scala:65:23
      state <= 2'h0;	// AXIArbitor.scala:137:24
      aw_comp <= 1'h0;	// AXIArbitor.scala:140:26, Mux.scala:101:16
      w_comp <= 1'h0;	// AXIArbitor.scala:141:25, Mux.scala:101:16
      w_count <= 4'h0;	// <stdin>:2949:22, AXIArbitor.scala:143:26
      r_buffer <= 1024'h0;	// <stdin>:2963:13, AXIArbitor.scala:148:27
    end
    else begin
      automatic logic [3:0][1:0]    _GEN_13;	// AXIArbitor.scala:200:18, :204:35, :234:46, :257:26
      automatic logic [3:0][1023:0] _GEN_14;	// AXIArbitor.scala:148:27, :200:18
      if (_T) begin	// AXIArbitor.scala:200:18
        if (master_choose[3])	// AXIArbitor.scala:69:33
          choose_buffer <= master_choose;	// AXIArbitor.scala:59:32, :69:33
        else	// AXIArbitor.scala:69:33
          choose_buffer <= 4'h0;	// <stdin>:2949:22, AXIArbitor.scala:59:32
      end
      if (choose_buffer[3]) begin	// AXIArbitor.scala:59:32, :81:28
        if (choose_buffer[0])	// AXIArbitor.scala:59:32, :85:30
          mask <= io_master0_req_bits_mask;	// AXIArbitor.scala:65:23
        else if (choose_buffer[1])	// AXIArbitor.scala:59:32, :85:30, :86:30
          mask <= io_master1_req_bits_mask;	// AXIArbitor.scala:65:23
        else if (choose_buffer[2])	// AXIArbitor.scala:59:32, :85:30, :86:30, :87:30
          mask <= io_master2_req_bits_mask;	// AXIArbitor.scala:65:23
        else	// AXIArbitor.scala:59:32, :85:30, :86:30, :87:30
          mask <= 8'h0;	// AXIArbitor.scala:65:23
      end
      else	// AXIArbitor.scala:59:32, :81:28
        mask <= 8'h0;	// AXIArbitor.scala:65:23
      _GEN_13 = {{(&state) & _GEN_9 ? 2'h0 : state}, {~_T & ~_T_2 & _T_7 & _GEN_8 & io_AXI_O_ar_ready ?
                                                2'h3 : state}, {_T_4 ? 2'h0 : state}, {master_choose[3] ? (master_choose[3] &
                                                (master_choose[0] ? io_master0_req_bits_rw : master_choose[1] ? io_master1_req_bits_rw :
                                                master_choose[2] & io_master2_req_bits_rw) ? 2'h2 : 2'h1) : state}};	// AXIArbitor.scala:69:{19,33}, :73:30, :74:30, :75:30, :137:24, :151:13, :152:12, :164:26, :165:27, :168:28, :171:23, :193:23, :200:18, :204:35, :207:30, :208:27, :210:27, :234:{36,46}, :235:23, :257:26, :258:23, :268:25, Mux.scala:101:16
      state <= _GEN_13[state];	// AXIArbitor.scala:137:24, :200:18, :204:35, :234:46, :257:26
      if (_GEN_0) begin	// AXIArbitor.scala:164:26, :200:18
      end
      else begin	// AXIArbitor.scala:164:26, :200:18
        aw_comp <= ~_T_4 & (_GEN_1 & io_AXI_O_aw_ready | aw_comp);	// AXIArbitor.scala:140:26, :171:23, :200:18, :219:{21,27,46}, :234:{36,46}, :236:25
        w_comp <= ~_T_4 & (_GEN_5 & io_AXI_O_w_ready & _GEN_4 | w_comp);	// AXIArbitor.scala:141:25, :176:26, :178:22, :200:18, :219:21, :227:{20,26,64}, :234:{36,46}, :236:25, :237:24
        if (_T_4)	// AXIArbitor.scala:234:36
          w_count <= 4'h0;	// <stdin>:2949:22, AXIArbitor.scala:143:26
        else	// AXIArbitor.scala:234:36
          w_count <= w_count + 4'h1;	// AXIArbitor.scala:143:26, :229:32
      end
      _GEN_14 = {{_T_2 | _T_7 | ~((&state) & io_AXI_O_r_valid) ? r_buffer : {r_buffer[959:0],
                                                io_AXI_O_r_bits_data}}, {r_buffer}, {r_buffer}, {r_buffer}};	// AXIArbitor.scala:137:24, :148:27, :200:18, :263:55, :264:41, Cat.scala:33:92
      r_buffer <= _GEN_14[state];	// AXIArbitor.scala:137:24, :148:27, :200:18
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2943:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2943:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2943:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_14;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_15;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_16;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_17;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_18;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_19;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_20;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_21;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_22;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_23;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_24;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_25;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_26;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_27;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_28;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_29;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_30;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_31;	// <stdin>:2943:10
      automatic logic [31:0] _RANDOM_32;	// <stdin>:2943:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2943:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2943:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2943:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_3 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_4 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_5 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_6 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_7 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_8 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_9 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_10 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_11 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_12 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_13 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_14 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_15 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_16 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_17 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_18 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_19 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_20 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_21 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_22 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_23 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_24 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_25 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_26 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_27 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_28 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_29 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_30 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_31 = `RANDOM;	// <stdin>:2943:10
        _RANDOM_32 = `RANDOM;	// <stdin>:2943:10
        choose_buffer = _RANDOM_0[3:0];	// AXIArbitor.scala:59:32
        mask = _RANDOM_0[11:4];	// AXIArbitor.scala:59:32, :65:23
        state = _RANDOM_0[13:12];	// AXIArbitor.scala:59:32, :137:24
        aw_comp = _RANDOM_0[14];	// AXIArbitor.scala:59:32, :140:26
        w_comp = _RANDOM_0[15];	// AXIArbitor.scala:59:32, :141:25
        w_count = _RANDOM_0[19:16];	// AXIArbitor.scala:59:32, :143:26
        r_buffer = {_RANDOM_0[31:20], _RANDOM_1, _RANDOM_2, _RANDOM_3, _RANDOM_4, _RANDOM_5, _RANDOM_6,
                                                                _RANDOM_7, _RANDOM_8, _RANDOM_9, _RANDOM_10, _RANDOM_11, _RANDOM_12, _RANDOM_13,
                                                                _RANDOM_14, _RANDOM_15, _RANDOM_16, _RANDOM_17, _RANDOM_18, _RANDOM_19, _RANDOM_20,
                                                                _RANDOM_21, _RANDOM_22, _RANDOM_23, _RANDOM_24, _RANDOM_25, _RANDOM_26, _RANDOM_27,
                                                                _RANDOM_28, _RANDOM_29, _RANDOM_30, _RANDOM_31, _RANDOM_32[19:0]};	// AXIArbitor.scala:59:32, :148:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2943:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2943:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_master0_resp_valid = ~_T & (_T_2 ? _T_4 & choose_buffer[0] : ~_T_7 & (&state) & _GEN_9 & choose_buffer[0]);	// <stdin>:2943:10, AXIArbitor.scala:59:32, :85:30, :137:24, :152:12, :154:27, :171:23, :186:26, :200:18, :234:{36,46}, :240:39
  assign io_master0_resp_bits_data = _GEN_10[state];	// <stdin>:2943:10, AXIArbitor.scala:137:24, :155:31, :200:18
  assign io_master1_resp_valid = ~_T & (_T_2 ? _T_4 & _GEN_6 : ~_T_7 & (&state) & _GEN_9 & _GEN_6);	// <stdin>:2943:10, AXIArbitor.scala:137:24, :152:12, :156:27, :171:23, :186:26, :200:18, :234:{36,46}, :240:39, :242:45
  assign io_master1_resp_bits_data = _GEN_11[state];	// <stdin>:2943:10, AXIArbitor.scala:137:24, :157:31, :200:18
  assign io_master2_resp_valid = ~_T & (_T_2 ? _T_4 & _GEN_7 : ~_T_7 & (&state) & _GEN_9 & _GEN_7);	// <stdin>:2943:10, AXIArbitor.scala:137:24, :152:12, :158:27, :171:23, :186:26, :200:18, :234:{36,46}, :240:39, :242:45
  assign io_master2_resp_bits_data = _GEN_12[state];	// <stdin>:2943:10, AXIArbitor.scala:137:24, :159:31, :200:18
  assign io_AXI_O_aw_valid = _GEN_1;	// <stdin>:2943:10, AXIArbitor.scala:171:23, :200:18
  assign io_AXI_O_aw_bits_addr = _T | ~(_T_2 & choose_buffer[3]) ? 32'h0 : _addr_T_6;	// <stdin>:2943:10, AXIArbitor.scala:59:32, :81:28, :163:27, :200:18, :216:35, Mux.scala:101:16
  assign io_AXI_O_aw_bits_len = _GEN_0 ? 8'h0 : _GEN;	// <stdin>:2943:10, AXIArbitor.scala:65:23, :164:26, :200:18, :217:34
  assign io_AXI_O_w_valid = _GEN_5;	// <stdin>:2943:10, AXIArbitor.scala:178:22, :200:18
  assign io_AXI_O_w_bits_data = _GEN_0 ? 64'h0 : _GEN_3;	// <stdin>:2943:10, AXIArbitor.scala:144:26, :164:26, :174:26, :200:18, :223:34
  assign io_AXI_O_w_bits_strb = _GEN_0 ? 8'h0 : mask;	// <stdin>:2943:10, AXIArbitor.scala:65:23, :164:26, :175:26, :200:18
  assign io_AXI_O_w_bits_last = _GEN_4;	// <stdin>:2943:10, AXIArbitor.scala:176:26, :200:18
  assign io_AXI_O_ar_valid = _GEN_8;	// <stdin>:2943:10, AXIArbitor.scala:193:23, :200:18
  assign io_AXI_O_ar_bits_addr = _T | _T_2 | ~(_T_7 & choose_buffer[3]) ? 32'h0 : _addr_T_6;	// <stdin>:2943:10, AXIArbitor.scala:59:32, :81:28, :185:27, :200:18, :253:35, Mux.scala:101:16
  assign io_AXI_O_ar_bits_len = _T | _T_2 | ~_T_7 ? 8'h0 : _GEN;	// <stdin>:2943:10, AXIArbitor.scala:65:23, :186:26, :200:18, :217:34
endmodule

module Cache(	// <stdin>:3218:10, :10870:10
  input           clock,
                  reset,
                  io_cpu_req_valid,
                  io_cpu_req_bits_inst_type,
  input  [31:0]   io_cpu_req_bits_addr,
  input  [63:0]   io_cpu_req_bits_data,
  input  [7:0]    io_cpu_req_bits_mask,
  input           io_axi_resp_valid,
  input  [1023:0] io_axi_resp_bits_data,
  output          io_cpu_resp_valid,
  output [63:0]   io_cpu_resp_bits_data,
  output          io_axi_req_valid,
                  io_axi_req_bits_rw,
  output [31:0]   io_axi_req_bits_addr,
  output [1023:0] io_axi_req_bits_data,
  output [7:0]    io_axi_req_bits_mask,
  output          io_fccache_req,
  output [2:0]    io_fccache_state,
  output [7:0]    io_fccache_mask,
  output          io_fccache_hit,
                  io_fccache_cpu_valid,
                  io_fccache_axi_valid);

  wire                 _GEN;	// <stdin>:3291:18, :10943:18, Cache.scala:223:18
  wire [20:0]          _TagArray_ext_R0_data;	// Cache.scala:75:23
  wire [20:0]          _TagArray_ext_R1_data;	// Cache.scala:75:23
  wire [20:0]          _TagArray_ext_R2_data;	// Cache.scala:75:23
  wire [20:0]          _TagArray_ext_R3_data;	// Cache.scala:75:23
  wire [20:0]          _TagArray_ext_R4_data;	// Cache.scala:75:23
  wire [20:0]          _TagArray_ext_R5_data;	// Cache.scala:75:23
  reg  [2:0]           state;	// Cache.scala:64:24
  reg  [20:0]          tag;	// Cache.scala:67:18
  reg  [3:0]           index;	// Cache.scala:68:20
  reg  [6:0]           offset;	// Cache.scala:69:21
  reg  [31:0]          valid;	// Cache.scala:71:24
  reg  [31:0]          dirty;	// Cache.scala:72:24
  reg  [31:0]          replace;	// Cache.scala:73:26
  wire                 hit0;	// <stdin>:3239:5, :10891:5
  wire                 hit1;	// <stdin>:3241:5, :10893:5
  wire [31:0]          _GEN_0 = {27'h0, io_cpu_req_bits_addr[10:7], 1'h0};	// <stdin>:3218:10, :10870:10, Cache.scala:91:{43,100}
  wire [31:0]          _hit0_T_7 = valid >> _GEN_0;	// Cache.scala:71:24, :91:100
  assign hit0 = _TagArray_ext_R4_data == io_cpu_req_bits_addr[31:11] & _hit0_T_7[0];	// Cache.scala:75:23, :91:{10,58,82,92,100}
  wire [5:0]           _GEN_1 = {1'h0, io_cpu_req_bits_addr[10:7], 1'h0};	// <stdin>:3218:10, :10870:10, Cache.scala:91:43, :92:141
  wire [31:0]          _hit1_T_11 = valid >> _GEN_1 + 6'h1;	// Cache.scala:71:24, :92:{57,106,141}
  assign hit1 = _TagArray_ext_R5_data == io_cpu_req_bits_addr[31:11] & _hit1_T_11[0];	// Cache.scala:75:23, :91:82, :92:{10,64,98,106}
  wire [1023:0]        DataOneArray;	// Cache.scala:96:28
  wire                 DataOneArrayRen;	// Cache.scala:97:31
  wire [31:0]          DataOneArrayAddr;	// Cache.scala:98:32
  reg                  inDataOneArray;	// Cache.scala:107:33
  reg                  victim;	// Cache.scala:119:21
  reg  [31:0]          addr;	// Cache.scala:122:23
  reg  [63:0]          data;	// Cache.scala:123:23
  reg  [7:0]           mask;	// Cache.scala:124:23
  reg                  inst_type;	// Cache.scala:126:28
  reg                  whitNum;	// Cache.scala:129:26
  wire                 _T_3 = hit0 | hit1;	// Cache.scala:133:28
  reg                  cpu_resp_valid;	// Cache.scala:142:33
  reg  [63:0]          cpu_resp_bits_data;	// Cache.scala:143:37
  reg                  axi_req_valid;	// Cache.scala:144:32
  reg                  axi_req_bits_rw;	// Cache.scala:145:34
  reg  [31:0]          axi_req_bits_addr;	// Cache.scala:146:36
  reg  [7:0]           axi_req_bits_mask;	// Cache.scala:148:36
  wire                 _T_5767 = offset == 7'h0;	// Cache.scala:69:21, Cat.scala:33:92, Mux.scala:81:61
  wire                 _T_5642 = offset == 7'h4;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5769 = offset == 7'h8;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5646 = offset == 7'hC;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5771 = offset == 7'h10;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5650 = offset == 7'h14;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5773 = offset == 7'h18;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5654 = offset == 7'h1C;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5775 = offset == 7'h20;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5658 = offset == 7'h24;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5777 = offset == 7'h28;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5662 = offset == 7'h2C;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5779 = offset == 7'h30;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5666 = offset == 7'h34;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5781 = offset == 7'h38;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5670 = offset == 7'h3C;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5783 = offset == 7'h40;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5674 = offset == 7'h44;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5785 = offset == 7'h48;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5678 = offset == 7'h4C;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5787 = offset == 7'h50;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5682 = offset == 7'h54;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5789 = offset == 7'h58;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5686 = offset == 7'h5C;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5791 = offset == 7'h60;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5690 = offset == 7'h64;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5793 = offset == 7'h68;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5694 = offset == 7'h6C;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5795 = offset == 7'h70;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5698 = offset == 7'h74;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5797 = offset == 7'h78;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T_5702 = offset == 7'h7C;	// Cache.scala:69:21, Mux.scala:81:61
  wire                 _T = state == 3'h0;	// Cache.scala:64:24, :223:18
  wire [63:0]          _GEN_2 = {59'h0, io_cpu_req_bits_addr[10:7], 1'h0};	// <stdin>:3218:10, :10870:10, Cache.scala:91:43, :296:55
  wire [63:0]          _replace0_T_2 = 64'h1 << _GEN_2;	// Cache.scala:296:55
  wire [63:0]          _replace1_T_4 = 64'h1 << _GEN_1 + 6'h1;	// Cache.scala:92:{57,141}, :296:55, :297:{55,90}
  wire [63:0]          _replace0_T_10 = 64'h1 << _GEN_2;	// Cache.scala:296:55, :315:55
  wire                 _GEN_3 = ~io_cpu_req_valid | (|io_cpu_req_bits_mask) | ~_T_3;	// <stdin>:3287:14, :10939:14, Cache.scala:133:28, :232:35, :234:{43,47}, :271:38
  wire [63:0]          _replace1_T_14 = 64'h1 << _GEN_1 + 6'h1;	// Cache.scala:92:{57,141}, :296:55, :316:{55,90}
  wire                 _T_4 = state == 3'h5;	// Cache.scala:64:24, :223:18, Mux.scala:81:61
  wire [5:0]           _GEN_4 = {1'h0, index, 1'h0};	// <stdin>:3218:10, :10870:10, Cache.scala:68:20, :340:51
  wire [31:0]          _replace_wire_T_3 = replace >> _GEN_4 + 6'h1;	// Cache.scala:73:26, :92:57, :340:{40,51}
  wire [5:0]           _GEN_5 = {5'h0, _GEN};	// <stdin>:3291:18, :10943:18, Cache.scala:223:18, :343:34, Mux.scala:81:61
  wire [31:0]          _T_8 = dirty >> _GEN_4 + _GEN_5;	// Cache.scala:72:24, :340:51, :343:{23,34}
  wire [4:0]           _GEN_6 = {index, 1'h0};	// <stdin>:3218:10, :10870:10, Cache.scala:68:20, :340:51
  wire [4:0]           _GEN_7 = {4'h0, _GEN};	// <stdin>:3291:18, :10943:18, Cache.scala:223:18, :343:34
  wire                 _T_10 = state == 3'h6;	// Cache.scala:64:24, :223:18, Mux.scala:81:61
  wire [4:0]           _GEN_8 = {4'h0, victim};	// Cache.scala:119:21, :343:34, :365:57
  wire [5:0]           _GEN_9 = {5'h0, victim};	// Cache.scala:119:21, :365:57, Mux.scala:81:61
  wire [63:0]          _GEN_10 = {59'h0, index, 1'h0};	// <stdin>:3218:10, :10870:10, Cache.scala:68:20, :296:55, :400:47
  wire [63:0]          _replace0_T_17 = 64'h1 << _GEN_10;	// Cache.scala:296:55, :400:47
  wire [63:0]          _replace1_T_23 = 64'h1 << _GEN_4 + 6'h1;	// Cache.scala:92:57, :296:55, :340:51, :401:{47,60}
  wire                 _GEN_11 = io_axi_resp_valid & victim;	// Cache.scala:75:23, :119:21, :392:36, :397:29
  wire                 _GEN_12 = ~_T & ~_T_4 & ~_T_10 & (&state) & _GEN_11;	// Cache.scala:64:24, :75:23, :223:18, :392:36, :397:29
  wire [63:0]          _replace0_T_24 = 64'h1 << _GEN_10;	// Cache.scala:296:55, :400:47, :409:47
  wire [63:0]          _replace1_T_32 = 64'h1 << _GEN_4 + 6'h1;	// Cache.scala:92:57, :296:55, :340:51, :410:{47,60}
  wire                 _GEN_13 = io_axi_resp_valid & ~victim;	// Cache.scala:75:23, :119:21, :392:36, :397:29, :413:29
  wire                 _GEN_14 = ~_T & ~_T_4 & ~_T_10 & (&state) & _GEN_13;	// Cache.scala:64:24, :75:23, :223:18, :392:36, :397:29
  wire                 _T_24 = state == 3'h1;	// Cache.scala:64:24, :223:18, :236:31
  wire [127:0][1023:0] _GEN_15 = {{{data[7:0], DataOneArray[1015:0]}}, {{DataOneArray[1023:1016], data[7:0],
                DataOneArray[1007:0]}}, {{DataOneArray[1023:1008], data[7:0], DataOneArray[999:0]}},
                {{DataOneArray[1023:1000], data[7:0], DataOneArray[991:0]}}, {{DataOneArray[1023:992],
                data[7:0], DataOneArray[983:0]}}, {{DataOneArray[1023:984], data[7:0],
                DataOneArray[975:0]}}, {{DataOneArray[1023:976], data[7:0], DataOneArray[967:0]}},
                {{DataOneArray[1023:968], data[7:0], DataOneArray[959:0]}}, {{DataOneArray[1023:960],
                data[7:0], DataOneArray[951:0]}}, {{DataOneArray[1023:952], data[7:0],
                DataOneArray[943:0]}}, {{DataOneArray[1023:944], data[7:0], DataOneArray[935:0]}},
                {{DataOneArray[1023:936], data[7:0], DataOneArray[927:0]}}, {{DataOneArray[1023:928],
                data[7:0], DataOneArray[919:0]}}, {{DataOneArray[1023:920], data[7:0],
                DataOneArray[911:0]}}, {{DataOneArray[1023:912], data[7:0], DataOneArray[903:0]}},
                {{DataOneArray[1023:904], data[7:0], DataOneArray[895:0]}}, {{DataOneArray[1023:896],
                data[7:0], DataOneArray[887:0]}}, {{DataOneArray[1023:888], data[7:0],
                DataOneArray[879:0]}}, {{DataOneArray[1023:880], data[7:0], DataOneArray[871:0]}},
                {{DataOneArray[1023:872], data[7:0], DataOneArray[863:0]}}, {{DataOneArray[1023:864],
                data[7:0], DataOneArray[855:0]}}, {{DataOneArray[1023:856], data[7:0],
                DataOneArray[847:0]}}, {{DataOneArray[1023:848], data[7:0], DataOneArray[839:0]}},
                {{DataOneArray[1023:840], data[7:0], DataOneArray[831:0]}}, {{DataOneArray[1023:832],
                data[7:0], DataOneArray[823:0]}}, {{DataOneArray[1023:824], data[7:0],
                DataOneArray[815:0]}}, {{DataOneArray[1023:816], data[7:0], DataOneArray[807:0]}},
                {{DataOneArray[1023:808], data[7:0], DataOneArray[799:0]}}, {{DataOneArray[1023:800],
                data[7:0], DataOneArray[791:0]}}, {{DataOneArray[1023:792], data[7:0],
                DataOneArray[783:0]}}, {{DataOneArray[1023:784], data[7:0], DataOneArray[775:0]}},
                {{DataOneArray[1023:776], data[7:0], DataOneArray[767:0]}}, {{DataOneArray[1023:768],
                data[7:0], DataOneArray[759:0]}}, {{DataOneArray[1023:760], data[7:0],
                DataOneArray[751:0]}}, {{DataOneArray[1023:752], data[7:0], DataOneArray[743:0]}},
                {{DataOneArray[1023:744], data[7:0], DataOneArray[735:0]}}, {{DataOneArray[1023:736],
                data[7:0], DataOneArray[727:0]}}, {{DataOneArray[1023:728], data[7:0],
                DataOneArray[719:0]}}, {{DataOneArray[1023:720], data[7:0], DataOneArray[711:0]}},
                {{DataOneArray[1023:712], data[7:0], DataOneArray[703:0]}}, {{DataOneArray[1023:704],
                data[7:0], DataOneArray[695:0]}}, {{DataOneArray[1023:696], data[7:0],
                DataOneArray[687:0]}}, {{DataOneArray[1023:688], data[7:0], DataOneArray[679:0]}},
                {{DataOneArray[1023:680], data[7:0], DataOneArray[671:0]}}, {{DataOneArray[1023:672],
                data[7:0], DataOneArray[663:0]}}, {{DataOneArray[1023:664], data[7:0],
                DataOneArray[655:0]}}, {{DataOneArray[1023:656], data[7:0], DataOneArray[647:0]}},
                {{DataOneArray[1023:648], data[7:0], DataOneArray[639:0]}}, {{DataOneArray[1023:640],
                data[7:0], DataOneArray[631:0]}}, {{DataOneArray[1023:632], data[7:0],
                DataOneArray[623:0]}}, {{DataOneArray[1023:624], data[7:0], DataOneArray[615:0]}},
                {{DataOneArray[1023:616], data[7:0], DataOneArray[607:0]}}, {{DataOneArray[1023:608],
                data[7:0], DataOneArray[599:0]}}, {{DataOneArray[1023:600], data[7:0],
                DataOneArray[591:0]}}, {{DataOneArray[1023:592], data[7:0], DataOneArray[583:0]}},
                {{DataOneArray[1023:584], data[7:0], DataOneArray[575:0]}}, {{DataOneArray[1023:576],
                data[7:0], DataOneArray[567:0]}}, {{DataOneArray[1023:568], data[7:0],
                DataOneArray[559:0]}}, {{DataOneArray[1023:560], data[7:0], DataOneArray[551:0]}},
                {{DataOneArray[1023:552], data[7:0], DataOneArray[543:0]}}, {{DataOneArray[1023:544],
                data[7:0], DataOneArray[535:0]}}, {{DataOneArray[1023:536], data[7:0],
                DataOneArray[527:0]}}, {{DataOneArray[1023:528], data[7:0], DataOneArray[519:0]}},
                {{DataOneArray[1023:520], data[7:0], DataOneArray[511:0]}}, {{DataOneArray[1023:512],
                data[7:0], DataOneArray[503:0]}}, {{DataOneArray[1023:504], data[7:0],
                DataOneArray[495:0]}}, {{DataOneArray[1023:496], data[7:0], DataOneArray[487:0]}},
                {{DataOneArray[1023:488], data[7:0], DataOneArray[479:0]}}, {{DataOneArray[1023:480],
                data[7:0], DataOneArray[471:0]}}, {{DataOneArray[1023:472], data[7:0],
                DataOneArray[463:0]}}, {{DataOneArray[1023:464], data[7:0], DataOneArray[455:0]}},
                {{DataOneArray[1023:456], data[7:0], DataOneArray[447:0]}}, {{DataOneArray[1023:448],
                data[7:0], DataOneArray[439:0]}}, {{DataOneArray[1023:440], data[7:0],
                DataOneArray[431:0]}}, {{DataOneArray[1023:432], data[7:0], DataOneArray[423:0]}},
                {{DataOneArray[1023:424], data[7:0], DataOneArray[415:0]}}, {{DataOneArray[1023:416],
                data[7:0], DataOneArray[407:0]}}, {{DataOneArray[1023:408], data[7:0],
                DataOneArray[399:0]}}, {{DataOneArray[1023:400], data[7:0], DataOneArray[391:0]}},
                {{DataOneArray[1023:392], data[7:0], DataOneArray[383:0]}}, {{DataOneArray[1023:384],
                data[7:0], DataOneArray[375:0]}}, {{DataOneArray[1023:376], data[7:0],
                DataOneArray[367:0]}}, {{DataOneArray[1023:368], data[7:0], DataOneArray[359:0]}},
                {{DataOneArray[1023:360], data[7:0], DataOneArray[351:0]}}, {{DataOneArray[1023:352],
                data[7:0], DataOneArray[343:0]}}, {{DataOneArray[1023:344], data[7:0],
                DataOneArray[335:0]}}, {{DataOneArray[1023:336], data[7:0], DataOneArray[327:0]}},
                {{DataOneArray[1023:328], data[7:0], DataOneArray[319:0]}}, {{DataOneArray[1023:320],
                data[7:0], DataOneArray[311:0]}}, {{DataOneArray[1023:312], data[7:0],
                DataOneArray[303:0]}}, {{DataOneArray[1023:304], data[7:0], DataOneArray[295:0]}},
                {{DataOneArray[1023:296], data[7:0], DataOneArray[287:0]}}, {{DataOneArray[1023:288],
                data[7:0], DataOneArray[279:0]}}, {{DataOneArray[1023:280], data[7:0],
                DataOneArray[271:0]}}, {{DataOneArray[1023:272], data[7:0], DataOneArray[263:0]}},
                {{DataOneArray[1023:264], data[7:0], DataOneArray[255:0]}}, {{DataOneArray[1023:256],
                data[7:0], DataOneArray[247:0]}}, {{DataOneArray[1023:248], data[7:0],
                DataOneArray[239:0]}}, {{DataOneArray[1023:240], data[7:0], DataOneArray[231:0]}},
                {{DataOneArray[1023:232], data[7:0], DataOneArray[223:0]}}, {{DataOneArray[1023:224],
                data[7:0], DataOneArray[215:0]}}, {{DataOneArray[1023:216], data[7:0],
                DataOneArray[207:0]}}, {{DataOneArray[1023:208], data[7:0], DataOneArray[199:0]}},
                {{DataOneArray[1023:200], data[7:0], DataOneArray[191:0]}}, {{DataOneArray[1023:192],
                data[7:0], DataOneArray[183:0]}}, {{DataOneArray[1023:184], data[7:0],
                DataOneArray[175:0]}}, {{DataOneArray[1023:176], data[7:0], DataOneArray[167:0]}},
                {{DataOneArray[1023:168], data[7:0], DataOneArray[159:0]}}, {{DataOneArray[1023:160],
                data[7:0], DataOneArray[151:0]}}, {{DataOneArray[1023:152], data[7:0],
                DataOneArray[143:0]}}, {{DataOneArray[1023:144], data[7:0], DataOneArray[135:0]}},
                {{DataOneArray[1023:136], data[7:0], DataOneArray[127:0]}}, {{DataOneArray[1023:128],
                data[7:0], DataOneArray[119:0]}}, {{DataOneArray[1023:120], data[7:0],
                DataOneArray[111:0]}}, {{DataOneArray[1023:112], data[7:0], DataOneArray[103:0]}},
                {{DataOneArray[1023:104], data[7:0], DataOneArray[95:0]}}, {{DataOneArray[1023:96],
                data[7:0], DataOneArray[87:0]}}, {{DataOneArray[1023:88], data[7:0], DataOneArray[79:0]}},
                {{DataOneArray[1023:80], data[7:0], DataOneArray[71:0]}}, {{DataOneArray[1023:72],
                data[7:0], DataOneArray[63:0]}}, {{DataOneArray[1023:64], data[7:0], DataOneArray[55:0]}},
                {{DataOneArray[1023:56], data[7:0], DataOneArray[47:0]}}, {{DataOneArray[1023:48],
                data[7:0], DataOneArray[39:0]}}, {{DataOneArray[1023:40], data[7:0], DataOneArray[31:0]}},
                {{DataOneArray[1023:32], data[7:0], DataOneArray[23:0]}}, {{DataOneArray[1023:24],
                data[7:0], DataOneArray[15:0]}}, {{DataOneArray[1023:16], data[7:0], DataOneArray[7:0]}},
                {{DataOneArray[1023:8], data[7:0]}}};	// Cache.scala:123:23, :194:40, :201:44, :448:{53,67}, :452:{56,89}, :455:66, Cat.scala:33:92, Mux.scala:81:{58,61}
  wire [1023:0]        _T_1164 = offset == 7'h72 ? {DataOneArray[1023:928], data[15:0], DataOneArray[911:0]} : _T_5795 ?
                {DataOneArray[1023:912], data[15:0], DataOneArray[895:0]} : offset == 7'h6E ?
                {DataOneArray[1023:896], data[15:0], DataOneArray[879:0]} : _T_5694 ?
                {DataOneArray[1023:880], data[15:0], DataOneArray[863:0]} : offset == 7'h6A ?
                {DataOneArray[1023:864], data[15:0], DataOneArray[847:0]} : _T_5793 ?
                {DataOneArray[1023:848], data[15:0], DataOneArray[831:0]} : offset == 7'h66 ?
                {DataOneArray[1023:832], data[15:0], DataOneArray[815:0]} : _T_5690 ?
                {DataOneArray[1023:816], data[15:0], DataOneArray[799:0]} : offset == 7'h62 ?
                {DataOneArray[1023:800], data[15:0], DataOneArray[783:0]} : _T_5791 ?
                {DataOneArray[1023:784], data[15:0], DataOneArray[767:0]} : offset == 7'h5E ?
                {DataOneArray[1023:768], data[15:0], DataOneArray[751:0]} : _T_5686 ?
                {DataOneArray[1023:752], data[15:0], DataOneArray[735:0]} : offset == 7'h5A ?
                {DataOneArray[1023:736], data[15:0], DataOneArray[719:0]} : _T_5789 ?
                {DataOneArray[1023:720], data[15:0], DataOneArray[703:0]} : offset == 7'h56 ?
                {DataOneArray[1023:704], data[15:0], DataOneArray[687:0]} : _T_5682 ?
                {DataOneArray[1023:688], data[15:0], DataOneArray[671:0]} : offset == 7'h52 ?
                {DataOneArray[1023:672], data[15:0], DataOneArray[655:0]} : _T_5787 ?
                {DataOneArray[1023:656], data[15:0], DataOneArray[639:0]} : offset == 7'h4E ?
                {DataOneArray[1023:640], data[15:0], DataOneArray[623:0]} : _T_5678 ?
                {DataOneArray[1023:624], data[15:0], DataOneArray[607:0]} : offset == 7'h4A ?
                {DataOneArray[1023:608], data[15:0], DataOneArray[591:0]} : _T_5785 ?
                {DataOneArray[1023:592], data[15:0], DataOneArray[575:0]} : offset == 7'h46 ?
                {DataOneArray[1023:576], data[15:0], DataOneArray[559:0]} : _T_5674 ?
                {DataOneArray[1023:560], data[15:0], DataOneArray[543:0]} : offset == 7'h42 ?
                {DataOneArray[1023:544], data[15:0], DataOneArray[527:0]} : _T_5783 ?
                {DataOneArray[1023:528], data[15:0], DataOneArray[511:0]} : offset == 7'h3E ?
                {DataOneArray[1023:512], data[15:0], DataOneArray[495:0]} : _T_5670 ?
                {DataOneArray[1023:496], data[15:0], DataOneArray[479:0]} : offset == 7'h3A ?
                {DataOneArray[1023:480], data[15:0], DataOneArray[463:0]} : _T_5781 ?
                {DataOneArray[1023:464], data[15:0], DataOneArray[447:0]} : offset == 7'h36 ?
                {DataOneArray[1023:448], data[15:0], DataOneArray[431:0]} : _T_5666 ?
                {DataOneArray[1023:432], data[15:0], DataOneArray[415:0]} : offset == 7'h32 ?
                {DataOneArray[1023:416], data[15:0], DataOneArray[399:0]} : _T_5779 ?
                {DataOneArray[1023:400], data[15:0], DataOneArray[383:0]} : offset == 7'h2E ?
                {DataOneArray[1023:384], data[15:0], DataOneArray[367:0]} : _T_5662 ?
                {DataOneArray[1023:368], data[15:0], DataOneArray[351:0]} : offset == 7'h2A ?
                {DataOneArray[1023:352], data[15:0], DataOneArray[335:0]} : _T_5777 ?
                {DataOneArray[1023:336], data[15:0], DataOneArray[319:0]} : offset == 7'h26 ?
                {DataOneArray[1023:320], data[15:0], DataOneArray[303:0]} : _T_5658 ?
                {DataOneArray[1023:304], data[15:0], DataOneArray[287:0]} : offset == 7'h22 ?
                {DataOneArray[1023:288], data[15:0], DataOneArray[271:0]} : _T_5775 ?
                {DataOneArray[1023:272], data[15:0], DataOneArray[255:0]} : offset == 7'h1E ?
                {DataOneArray[1023:256], data[15:0], DataOneArray[239:0]} : _T_5654 ?
                {DataOneArray[1023:240], data[15:0], DataOneArray[223:0]} : offset == 7'h1A ?
                {DataOneArray[1023:224], data[15:0], DataOneArray[207:0]} : _T_5773 ?
                {DataOneArray[1023:208], data[15:0], DataOneArray[191:0]} : offset == 7'h16 ?
                {DataOneArray[1023:192], data[15:0], DataOneArray[175:0]} : _T_5650 ?
                {DataOneArray[1023:176], data[15:0], DataOneArray[159:0]} : offset == 7'h12 ?
                {DataOneArray[1023:160], data[15:0], DataOneArray[143:0]} : _T_5771 ?
                {DataOneArray[1023:144], data[15:0], DataOneArray[127:0]} : offset == 7'hE ?
                {DataOneArray[1023:128], data[15:0], DataOneArray[111:0]} : _T_5646 ?
                {DataOneArray[1023:112], data[15:0], DataOneArray[95:0]} : offset == 7'hA ?
                {DataOneArray[1023:96], data[15:0], DataOneArray[79:0]} : _T_5769 ? {DataOneArray[1023:80],
                data[15:0], DataOneArray[63:0]} : offset == 7'h6 ? {DataOneArray[1023:64], data[15:0],
                DataOneArray[47:0]} : _T_5642 ? {DataOneArray[1023:48], data[15:0], DataOneArray[31:0]} :
                offset == 7'h2 ? {DataOneArray[1023:32], data[15:0], DataOneArray[15:0]} : _T_5767 ?
                {DataOneArray[1023:16], data[15:0]} : 1024'h0;	// Cache.scala:69:21, :123:23, :194:40, :201:44, :213:32, :452:{56,89}, :461:68, Cat.scala:33:92, Mux.scala:81:{58,61}
  wire [1023:0]        _T_1465 = mask == 8'h3 ? (offset == 7'h7E ? {data[15:0], DataOneArray[1007:0]} : _T_5702 ?
                {DataOneArray[1023:1008], data[15:0], DataOneArray[991:0]} : offset == 7'h7A ?
                {DataOneArray[1023:992], data[15:0], DataOneArray[975:0]} : _T_5797 ?
                {DataOneArray[1023:976], data[15:0], DataOneArray[959:0]} : offset == 7'h76 ?
                {DataOneArray[1023:960], data[15:0], DataOneArray[943:0]} : _T_5698 ?
                {DataOneArray[1023:944], data[15:0], DataOneArray[927:0]} : _T_1164) : mask == 8'hF ?
                (_T_5702 ? {data[31:0], DataOneArray[991:0]} : _T_5797 ? {16'h0, DataOneArray[1023:992],
                data[15:0], DataOneArray[959:0]} : _T_5698 ? {16'h0, DataOneArray[1023:960], data[15:0],
                DataOneArray[927:0]} : _T_5795 ? {16'h0, DataOneArray[1023:928], data[15:0],
                DataOneArray[895:0]} : _T_5694 ? {16'h0, DataOneArray[1023:896], data[15:0],
                DataOneArray[863:0]} : _T_5793 ? {16'h0, DataOneArray[1023:864], data[15:0],
                DataOneArray[831:0]} : _T_5690 ? {16'h0, DataOneArray[1023:832], data[15:0],
                DataOneArray[799:0]} : _T_5791 ? {16'h0, DataOneArray[1023:800], data[15:0],
                DataOneArray[767:0]} : _T_5686 ? {16'h0, DataOneArray[1023:768], data[15:0],
                DataOneArray[735:0]} : _T_5789 ? {16'h0, DataOneArray[1023:736], data[15:0],
                DataOneArray[703:0]} : _T_5682 ? {16'h0, DataOneArray[1023:704], data[15:0],
                DataOneArray[671:0]} : _T_5787 ? {16'h0, DataOneArray[1023:672], data[15:0],
                DataOneArray[639:0]} : _T_5678 ? {16'h0, DataOneArray[1023:640], data[15:0],
                DataOneArray[607:0]} : _T_5785 ? {16'h0, DataOneArray[1023:608], data[15:0],
                DataOneArray[575:0]} : _T_5674 ? {16'h0, DataOneArray[1023:576], data[15:0],
                DataOneArray[543:0]} : _T_5783 ? {16'h0, DataOneArray[1023:544], data[15:0],
                DataOneArray[511:0]} : _T_5670 ? {16'h0, DataOneArray[1023:512], data[15:0],
                DataOneArray[479:0]} : _T_5781 ? {16'h0, DataOneArray[1023:480], data[15:0],
                DataOneArray[447:0]} : _T_5666 ? {16'h0, DataOneArray[1023:448], data[15:0],
                DataOneArray[415:0]} : _T_5779 ? {16'h0, DataOneArray[1023:416], data[15:0],
                DataOneArray[383:0]} : _T_5662 ? {16'h0, DataOneArray[1023:384], data[15:0],
                DataOneArray[351:0]} : _T_5777 ? {16'h0, DataOneArray[1023:352], data[15:0],
                DataOneArray[319:0]} : _T_5658 ? {16'h0, DataOneArray[1023:320], data[15:0],
                DataOneArray[287:0]} : _T_5775 ? {16'h0, DataOneArray[1023:288], data[15:0],
                DataOneArray[255:0]} : _T_5654 ? {16'h0, DataOneArray[1023:256], data[15:0],
                DataOneArray[223:0]} : _T_5773 ? {16'h0, DataOneArray[1023:224], data[15:0],
                DataOneArray[191:0]} : _T_5650 ? {16'h0, DataOneArray[1023:192], data[15:0],
                DataOneArray[159:0]} : _T_5771 ? {16'h0, DataOneArray[1023:160], data[15:0],
                DataOneArray[127:0]} : _T_5646 ? {16'h0, DataOneArray[1023:128], data[15:0],
                DataOneArray[95:0]} : _T_5769 ? {16'h0, DataOneArray[1023:96], data[15:0],
                DataOneArray[63:0]} : _T_5642 ? {16'h0, DataOneArray[1023:64], data[15:0],
                DataOneArray[31:0]} : _T_5767 ? {DataOneArray[1023:32], data[31:0]} : 1024'h0) : (&mask) ?
                (_T_5797 ? {data, DataOneArray[959:0]} : _T_5795 ? {32'h0, DataOneArray[1023:960],
                data[31:0], DataOneArray[895:0]} : _T_5793 ? {32'h0, DataOneArray[1023:896], data[31:0],
                DataOneArray[831:0]} : _T_5791 ? {32'h0, DataOneArray[1023:832], data[31:0],
                DataOneArray[767:0]} : _T_5789 ? {32'h0, DataOneArray[1023:768], data[31:0],
                DataOneArray[703:0]} : _T_5787 ? {32'h0, DataOneArray[1023:704], data[31:0],
                DataOneArray[639:0]} : _T_5785 ? {32'h0, DataOneArray[1023:640], data[31:0],
                DataOneArray[575:0]} : _T_5783 ? {32'h0, DataOneArray[1023:576], data[31:0],
                DataOneArray[511:0]} : _T_5781 ? {32'h0, DataOneArray[1023:512], data[31:0],
                DataOneArray[447:0]} : _T_5779 ? {32'h0, DataOneArray[1023:448], data[31:0],
                DataOneArray[383:0]} : _T_5777 ? {32'h0, DataOneArray[1023:384], data[31:0],
                DataOneArray[319:0]} : _T_5775 ? {32'h0, DataOneArray[1023:320], data[31:0],
                DataOneArray[255:0]} : _T_5773 ? {32'h0, DataOneArray[1023:256], data[31:0],
                DataOneArray[191:0]} : _T_5771 ? {32'h0, DataOneArray[1023:192], data[31:0],
                DataOneArray[127:0]} : _T_5769 ? {32'h0, DataOneArray[1023:128], data[31:0],
                DataOneArray[63:0]} : _T_5767 ? {DataOneArray[1023:64], data} : 1024'h0) : 1024'h0;	// Cache.scala:69:21, :71:24, :123:23, :124:23, :194:40, :201:44, :213:32, :452:{56,89}, :457:31, :461:68, :470:31, :474:68, :483:31, Cat.scala:33:92, Mux.scala:81:{58,61}, :101:16
  wire [63:0]          _replace0_T_31 = 64'h1 << _GEN_10;	// Cache.scala:296:55, :400:47, :500:43
  wire [63:0]          _replace1_T_41 = 64'h1 << _GEN_4 + 6'h1;	// Cache.scala:92:57, :296:55, :340:51, :501:{43,56}
  wire [127:0][1023:0] _GEN_16 = {{{data[7:0], DataOneArray[1015:0]}}, {{DataOneArray[1023:1016], data[7:0],
                DataOneArray[1007:0]}}, {{DataOneArray[1023:1008], data[7:0], DataOneArray[999:0]}},
                {{DataOneArray[1023:1000], data[7:0], DataOneArray[991:0]}}, {{DataOneArray[1023:992],
                data[7:0], DataOneArray[983:0]}}, {{DataOneArray[1023:984], data[7:0],
                DataOneArray[975:0]}}, {{DataOneArray[1023:976], data[7:0], DataOneArray[967:0]}},
                {{DataOneArray[1023:968], data[7:0], DataOneArray[959:0]}}, {{DataOneArray[1023:960],
                data[7:0], DataOneArray[951:0]}}, {{DataOneArray[1023:952], data[7:0],
                DataOneArray[943:0]}}, {{DataOneArray[1023:944], data[7:0], DataOneArray[935:0]}},
                {{DataOneArray[1023:936], data[7:0], DataOneArray[927:0]}}, {{DataOneArray[1023:928],
                data[7:0], DataOneArray[919:0]}}, {{DataOneArray[1023:920], data[7:0],
                DataOneArray[911:0]}}, {{DataOneArray[1023:912], data[7:0], DataOneArray[903:0]}},
                {{DataOneArray[1023:904], data[7:0], DataOneArray[895:0]}}, {{DataOneArray[1023:896],
                data[7:0], DataOneArray[887:0]}}, {{DataOneArray[1023:888], data[7:0],
                DataOneArray[879:0]}}, {{DataOneArray[1023:880], data[7:0], DataOneArray[871:0]}},
                {{DataOneArray[1023:872], data[7:0], DataOneArray[863:0]}}, {{DataOneArray[1023:864],
                data[7:0], DataOneArray[855:0]}}, {{DataOneArray[1023:856], data[7:0],
                DataOneArray[847:0]}}, {{DataOneArray[1023:848], data[7:0], DataOneArray[839:0]}},
                {{DataOneArray[1023:840], data[7:0], DataOneArray[831:0]}}, {{DataOneArray[1023:832],
                data[7:0], DataOneArray[823:0]}}, {{DataOneArray[1023:824], data[7:0],
                DataOneArray[815:0]}}, {{DataOneArray[1023:816], data[7:0], DataOneArray[807:0]}},
                {{DataOneArray[1023:808], data[7:0], DataOneArray[799:0]}}, {{DataOneArray[1023:800],
                data[7:0], DataOneArray[791:0]}}, {{DataOneArray[1023:792], data[7:0],
                DataOneArray[783:0]}}, {{DataOneArray[1023:784], data[7:0], DataOneArray[775:0]}},
                {{DataOneArray[1023:776], data[7:0], DataOneArray[767:0]}}, {{DataOneArray[1023:768],
                data[7:0], DataOneArray[759:0]}}, {{DataOneArray[1023:760], data[7:0],
                DataOneArray[751:0]}}, {{DataOneArray[1023:752], data[7:0], DataOneArray[743:0]}},
                {{DataOneArray[1023:744], data[7:0], DataOneArray[735:0]}}, {{DataOneArray[1023:736],
                data[7:0], DataOneArray[727:0]}}, {{DataOneArray[1023:728], data[7:0],
                DataOneArray[719:0]}}, {{DataOneArray[1023:720], data[7:0], DataOneArray[711:0]}},
                {{DataOneArray[1023:712], data[7:0], DataOneArray[703:0]}}, {{DataOneArray[1023:704],
                data[7:0], DataOneArray[695:0]}}, {{DataOneArray[1023:696], data[7:0],
                DataOneArray[687:0]}}, {{DataOneArray[1023:688], data[7:0], DataOneArray[679:0]}},
                {{DataOneArray[1023:680], data[7:0], DataOneArray[671:0]}}, {{DataOneArray[1023:672],
                data[7:0], DataOneArray[663:0]}}, {{DataOneArray[1023:664], data[7:0],
                DataOneArray[655:0]}}, {{DataOneArray[1023:656], data[7:0], DataOneArray[647:0]}},
                {{DataOneArray[1023:648], data[7:0], DataOneArray[639:0]}}, {{DataOneArray[1023:640],
                data[7:0], DataOneArray[631:0]}}, {{DataOneArray[1023:632], data[7:0],
                DataOneArray[623:0]}}, {{DataOneArray[1023:624], data[7:0], DataOneArray[615:0]}},
                {{DataOneArray[1023:616], data[7:0], DataOneArray[607:0]}}, {{DataOneArray[1023:608],
                data[7:0], DataOneArray[599:0]}}, {{DataOneArray[1023:600], data[7:0],
                DataOneArray[591:0]}}, {{DataOneArray[1023:592], data[7:0], DataOneArray[583:0]}},
                {{DataOneArray[1023:584], data[7:0], DataOneArray[575:0]}}, {{DataOneArray[1023:576],
                data[7:0], DataOneArray[567:0]}}, {{DataOneArray[1023:568], data[7:0],
                DataOneArray[559:0]}}, {{DataOneArray[1023:560], data[7:0], DataOneArray[551:0]}},
                {{DataOneArray[1023:552], data[7:0], DataOneArray[543:0]}}, {{DataOneArray[1023:544],
                data[7:0], DataOneArray[535:0]}}, {{DataOneArray[1023:536], data[7:0],
                DataOneArray[527:0]}}, {{DataOneArray[1023:528], data[7:0], DataOneArray[519:0]}},
                {{DataOneArray[1023:520], data[7:0], DataOneArray[511:0]}}, {{DataOneArray[1023:512],
                data[7:0], DataOneArray[503:0]}}, {{DataOneArray[1023:504], data[7:0],
                DataOneArray[495:0]}}, {{DataOneArray[1023:496], data[7:0], DataOneArray[487:0]}},
                {{DataOneArray[1023:488], data[7:0], DataOneArray[479:0]}}, {{DataOneArray[1023:480],
                data[7:0], DataOneArray[471:0]}}, {{DataOneArray[1023:472], data[7:0],
                DataOneArray[463:0]}}, {{DataOneArray[1023:464], data[7:0], DataOneArray[455:0]}},
                {{DataOneArray[1023:456], data[7:0], DataOneArray[447:0]}}, {{DataOneArray[1023:448],
                data[7:0], DataOneArray[439:0]}}, {{DataOneArray[1023:440], data[7:0],
                DataOneArray[431:0]}}, {{DataOneArray[1023:432], data[7:0], DataOneArray[423:0]}},
                {{DataOneArray[1023:424], data[7:0], DataOneArray[415:0]}}, {{DataOneArray[1023:416],
                data[7:0], DataOneArray[407:0]}}, {{DataOneArray[1023:408], data[7:0],
                DataOneArray[399:0]}}, {{DataOneArray[1023:400], data[7:0], DataOneArray[391:0]}},
                {{DataOneArray[1023:392], data[7:0], DataOneArray[383:0]}}, {{DataOneArray[1023:384],
                data[7:0], DataOneArray[375:0]}}, {{DataOneArray[1023:376], data[7:0],
                DataOneArray[367:0]}}, {{DataOneArray[1023:368], data[7:0], DataOneArray[359:0]}},
                {{DataOneArray[1023:360], data[7:0], DataOneArray[351:0]}}, {{DataOneArray[1023:352],
                data[7:0], DataOneArray[343:0]}}, {{DataOneArray[1023:344], data[7:0],
                DataOneArray[335:0]}}, {{DataOneArray[1023:336], data[7:0], DataOneArray[327:0]}},
                {{DataOneArray[1023:328], data[7:0], DataOneArray[319:0]}}, {{DataOneArray[1023:320],
                data[7:0], DataOneArray[311:0]}}, {{DataOneArray[1023:312], data[7:0],
                DataOneArray[303:0]}}, {{DataOneArray[1023:304], data[7:0], DataOneArray[295:0]}},
                {{DataOneArray[1023:296], data[7:0], DataOneArray[287:0]}}, {{DataOneArray[1023:288],
                data[7:0], DataOneArray[279:0]}}, {{DataOneArray[1023:280], data[7:0],
                DataOneArray[271:0]}}, {{DataOneArray[1023:272], data[7:0], DataOneArray[263:0]}},
                {{DataOneArray[1023:264], data[7:0], DataOneArray[255:0]}}, {{DataOneArray[1023:256],
                data[7:0], DataOneArray[247:0]}}, {{DataOneArray[1023:248], data[7:0],
                DataOneArray[239:0]}}, {{DataOneArray[1023:240], data[7:0], DataOneArray[231:0]}},
                {{DataOneArray[1023:232], data[7:0], DataOneArray[223:0]}}, {{DataOneArray[1023:224],
                data[7:0], DataOneArray[215:0]}}, {{DataOneArray[1023:216], data[7:0],
                DataOneArray[207:0]}}, {{DataOneArray[1023:208], data[7:0], DataOneArray[199:0]}},
                {{DataOneArray[1023:200], data[7:0], DataOneArray[191:0]}}, {{DataOneArray[1023:192],
                data[7:0], DataOneArray[183:0]}}, {{DataOneArray[1023:184], data[7:0],
                DataOneArray[175:0]}}, {{DataOneArray[1023:176], data[7:0], DataOneArray[167:0]}},
                {{DataOneArray[1023:168], data[7:0], DataOneArray[159:0]}}, {{DataOneArray[1023:160],
                data[7:0], DataOneArray[151:0]}}, {{DataOneArray[1023:152], data[7:0],
                DataOneArray[143:0]}}, {{DataOneArray[1023:144], data[7:0], DataOneArray[135:0]}},
                {{DataOneArray[1023:136], data[7:0], DataOneArray[127:0]}}, {{DataOneArray[1023:128],
                data[7:0], DataOneArray[119:0]}}, {{DataOneArray[1023:120], data[7:0],
                DataOneArray[111:0]}}, {{DataOneArray[1023:112], data[7:0], DataOneArray[103:0]}},
                {{DataOneArray[1023:104], data[7:0], DataOneArray[95:0]}}, {{DataOneArray[1023:96],
                data[7:0], DataOneArray[87:0]}}, {{DataOneArray[1023:88], data[7:0], DataOneArray[79:0]}},
                {{DataOneArray[1023:80], data[7:0], DataOneArray[71:0]}}, {{DataOneArray[1023:72],
                data[7:0], DataOneArray[63:0]}}, {{DataOneArray[1023:64], data[7:0], DataOneArray[55:0]}},
                {{DataOneArray[1023:56], data[7:0], DataOneArray[47:0]}}, {{DataOneArray[1023:48],
                data[7:0], DataOneArray[39:0]}}, {{DataOneArray[1023:40], data[7:0], DataOneArray[31:0]}},
                {{DataOneArray[1023:32], data[7:0], DataOneArray[23:0]}}, {{DataOneArray[1023:24],
                data[7:0], DataOneArray[15:0]}}, {{DataOneArray[1023:16], data[7:0], DataOneArray[7:0]}},
                {{DataOneArray[1023:8], data[7:0]}}};	// Cache.scala:123:23, :194:40, :201:44, :512:{53,67}, :516:{56,89}, :519:66, Cat.scala:33:92, Mux.scala:81:{58,61}
  wire [1023:0]        _T_2604 = offset == 7'h72 ? {DataOneArray[1023:928], data[15:0], DataOneArray[911:0]} : _T_5795 ?
                {DataOneArray[1023:912], data[15:0], DataOneArray[895:0]} : offset == 7'h6E ?
                {DataOneArray[1023:896], data[15:0], DataOneArray[879:0]} : _T_5694 ?
                {DataOneArray[1023:880], data[15:0], DataOneArray[863:0]} : offset == 7'h6A ?
                {DataOneArray[1023:864], data[15:0], DataOneArray[847:0]} : _T_5793 ?
                {DataOneArray[1023:848], data[15:0], DataOneArray[831:0]} : offset == 7'h66 ?
                {DataOneArray[1023:832], data[15:0], DataOneArray[815:0]} : _T_5690 ?
                {DataOneArray[1023:816], data[15:0], DataOneArray[799:0]} : offset == 7'h62 ?
                {DataOneArray[1023:800], data[15:0], DataOneArray[783:0]} : _T_5791 ?
                {DataOneArray[1023:784], data[15:0], DataOneArray[767:0]} : offset == 7'h5E ?
                {DataOneArray[1023:768], data[15:0], DataOneArray[751:0]} : _T_5686 ?
                {DataOneArray[1023:752], data[15:0], DataOneArray[735:0]} : offset == 7'h5A ?
                {DataOneArray[1023:736], data[15:0], DataOneArray[719:0]} : _T_5789 ?
                {DataOneArray[1023:720], data[15:0], DataOneArray[703:0]} : offset == 7'h56 ?
                {DataOneArray[1023:704], data[15:0], DataOneArray[687:0]} : _T_5682 ?
                {DataOneArray[1023:688], data[15:0], DataOneArray[671:0]} : offset == 7'h52 ?
                {DataOneArray[1023:672], data[15:0], DataOneArray[655:0]} : _T_5787 ?
                {DataOneArray[1023:656], data[15:0], DataOneArray[639:0]} : offset == 7'h4E ?
                {DataOneArray[1023:640], data[15:0], DataOneArray[623:0]} : _T_5678 ?
                {DataOneArray[1023:624], data[15:0], DataOneArray[607:0]} : offset == 7'h4A ?
                {DataOneArray[1023:608], data[15:0], DataOneArray[591:0]} : _T_5785 ?
                {DataOneArray[1023:592], data[15:0], DataOneArray[575:0]} : offset == 7'h46 ?
                {DataOneArray[1023:576], data[15:0], DataOneArray[559:0]} : _T_5674 ?
                {DataOneArray[1023:560], data[15:0], DataOneArray[543:0]} : offset == 7'h42 ?
                {DataOneArray[1023:544], data[15:0], DataOneArray[527:0]} : _T_5783 ?
                {DataOneArray[1023:528], data[15:0], DataOneArray[511:0]} : offset == 7'h3E ?
                {DataOneArray[1023:512], data[15:0], DataOneArray[495:0]} : _T_5670 ?
                {DataOneArray[1023:496], data[15:0], DataOneArray[479:0]} : offset == 7'h3A ?
                {DataOneArray[1023:480], data[15:0], DataOneArray[463:0]} : _T_5781 ?
                {DataOneArray[1023:464], data[15:0], DataOneArray[447:0]} : offset == 7'h36 ?
                {DataOneArray[1023:448], data[15:0], DataOneArray[431:0]} : _T_5666 ?
                {DataOneArray[1023:432], data[15:0], DataOneArray[415:0]} : offset == 7'h32 ?
                {DataOneArray[1023:416], data[15:0], DataOneArray[399:0]} : _T_5779 ?
                {DataOneArray[1023:400], data[15:0], DataOneArray[383:0]} : offset == 7'h2E ?
                {DataOneArray[1023:384], data[15:0], DataOneArray[367:0]} : _T_5662 ?
                {DataOneArray[1023:368], data[15:0], DataOneArray[351:0]} : offset == 7'h2A ?
                {DataOneArray[1023:352], data[15:0], DataOneArray[335:0]} : _T_5777 ?
                {DataOneArray[1023:336], data[15:0], DataOneArray[319:0]} : offset == 7'h26 ?
                {DataOneArray[1023:320], data[15:0], DataOneArray[303:0]} : _T_5658 ?
                {DataOneArray[1023:304], data[15:0], DataOneArray[287:0]} : offset == 7'h22 ?
                {DataOneArray[1023:288], data[15:0], DataOneArray[271:0]} : _T_5775 ?
                {DataOneArray[1023:272], data[15:0], DataOneArray[255:0]} : offset == 7'h1E ?
                {DataOneArray[1023:256], data[15:0], DataOneArray[239:0]} : _T_5654 ?
                {DataOneArray[1023:240], data[15:0], DataOneArray[223:0]} : offset == 7'h1A ?
                {DataOneArray[1023:224], data[15:0], DataOneArray[207:0]} : _T_5773 ?
                {DataOneArray[1023:208], data[15:0], DataOneArray[191:0]} : offset == 7'h16 ?
                {DataOneArray[1023:192], data[15:0], DataOneArray[175:0]} : _T_5650 ?
                {DataOneArray[1023:176], data[15:0], DataOneArray[159:0]} : offset == 7'h12 ?
                {DataOneArray[1023:160], data[15:0], DataOneArray[143:0]} : _T_5771 ?
                {DataOneArray[1023:144], data[15:0], DataOneArray[127:0]} : offset == 7'hE ?
                {DataOneArray[1023:128], data[15:0], DataOneArray[111:0]} : _T_5646 ?
                {DataOneArray[1023:112], data[15:0], DataOneArray[95:0]} : offset == 7'hA ?
                {DataOneArray[1023:96], data[15:0], DataOneArray[79:0]} : _T_5769 ? {DataOneArray[1023:80],
                data[15:0], DataOneArray[63:0]} : offset == 7'h6 ? {DataOneArray[1023:64], data[15:0],
                DataOneArray[47:0]} : _T_5642 ? {DataOneArray[1023:48], data[15:0], DataOneArray[31:0]} :
                offset == 7'h2 ? {DataOneArray[1023:32], data[15:0], DataOneArray[15:0]} : _T_5767 ?
                {DataOneArray[1023:16], data[15:0]} : 1024'h0;	// Cache.scala:69:21, :123:23, :194:40, :201:44, :213:32, :516:{56,89}, :525:68, Cat.scala:33:92, Mux.scala:81:{58,61}
  wire [1023:0]        _T_2905 = mask == 8'h3 ? (offset == 7'h7E ? {data[15:0], DataOneArray[1007:0]} : _T_5702 ?
                {DataOneArray[1023:1008], data[15:0], DataOneArray[991:0]} : offset == 7'h7A ?
                {DataOneArray[1023:992], data[15:0], DataOneArray[975:0]} : _T_5797 ?
                {DataOneArray[1023:976], data[15:0], DataOneArray[959:0]} : offset == 7'h76 ?
                {DataOneArray[1023:960], data[15:0], DataOneArray[943:0]} : _T_5698 ?
                {DataOneArray[1023:944], data[15:0], DataOneArray[927:0]} : _T_2604) : mask == 8'hF ?
                (_T_5702 ? {data[31:0], DataOneArray[991:0]} : _T_5797 ? {16'h0, DataOneArray[1023:992],
                data[15:0], DataOneArray[959:0]} : _T_5698 ? {16'h0, DataOneArray[1023:960], data[15:0],
                DataOneArray[927:0]} : _T_5795 ? {16'h0, DataOneArray[1023:928], data[15:0],
                DataOneArray[895:0]} : _T_5694 ? {16'h0, DataOneArray[1023:896], data[15:0],
                DataOneArray[863:0]} : _T_5793 ? {16'h0, DataOneArray[1023:864], data[15:0],
                DataOneArray[831:0]} : _T_5690 ? {16'h0, DataOneArray[1023:832], data[15:0],
                DataOneArray[799:0]} : _T_5791 ? {16'h0, DataOneArray[1023:800], data[15:0],
                DataOneArray[767:0]} : _T_5686 ? {16'h0, DataOneArray[1023:768], data[15:0],
                DataOneArray[735:0]} : _T_5789 ? {16'h0, DataOneArray[1023:736], data[15:0],
                DataOneArray[703:0]} : _T_5682 ? {16'h0, DataOneArray[1023:704], data[15:0],
                DataOneArray[671:0]} : _T_5787 ? {16'h0, DataOneArray[1023:672], data[15:0],
                DataOneArray[639:0]} : _T_5678 ? {16'h0, DataOneArray[1023:640], data[15:0],
                DataOneArray[607:0]} : _T_5785 ? {16'h0, DataOneArray[1023:608], data[15:0],
                DataOneArray[575:0]} : _T_5674 ? {16'h0, DataOneArray[1023:576], data[15:0],
                DataOneArray[543:0]} : _T_5783 ? {16'h0, DataOneArray[1023:544], data[15:0],
                DataOneArray[511:0]} : _T_5670 ? {16'h0, DataOneArray[1023:512], data[15:0],
                DataOneArray[479:0]} : _T_5781 ? {16'h0, DataOneArray[1023:480], data[15:0],
                DataOneArray[447:0]} : _T_5666 ? {16'h0, DataOneArray[1023:448], data[15:0],
                DataOneArray[415:0]} : _T_5779 ? {16'h0, DataOneArray[1023:416], data[15:0],
                DataOneArray[383:0]} : _T_5662 ? {16'h0, DataOneArray[1023:384], data[15:0],
                DataOneArray[351:0]} : _T_5777 ? {16'h0, DataOneArray[1023:352], data[15:0],
                DataOneArray[319:0]} : _T_5658 ? {16'h0, DataOneArray[1023:320], data[15:0],
                DataOneArray[287:0]} : _T_5775 ? {16'h0, DataOneArray[1023:288], data[15:0],
                DataOneArray[255:0]} : _T_5654 ? {16'h0, DataOneArray[1023:256], data[15:0],
                DataOneArray[223:0]} : _T_5773 ? {16'h0, DataOneArray[1023:224], data[15:0],
                DataOneArray[191:0]} : _T_5650 ? {16'h0, DataOneArray[1023:192], data[15:0],
                DataOneArray[159:0]} : _T_5771 ? {16'h0, DataOneArray[1023:160], data[15:0],
                DataOneArray[127:0]} : _T_5646 ? {16'h0, DataOneArray[1023:128], data[15:0],
                DataOneArray[95:0]} : _T_5769 ? {16'h0, DataOneArray[1023:96], data[15:0],
                DataOneArray[63:0]} : _T_5642 ? {16'h0, DataOneArray[1023:64], data[15:0],
                DataOneArray[31:0]} : _T_5767 ? {DataOneArray[1023:32], data[31:0]} : 1024'h0) : (&mask) ?
                (_T_5797 ? {data, DataOneArray[959:0]} : _T_5795 ? {32'h0, DataOneArray[1023:960],
                data[31:0], DataOneArray[895:0]} : _T_5793 ? {32'h0, DataOneArray[1023:896], data[31:0],
                DataOneArray[831:0]} : _T_5791 ? {32'h0, DataOneArray[1023:832], data[31:0],
                DataOneArray[767:0]} : _T_5789 ? {32'h0, DataOneArray[1023:768], data[31:0],
                DataOneArray[703:0]} : _T_5787 ? {32'h0, DataOneArray[1023:704], data[31:0],
                DataOneArray[639:0]} : _T_5785 ? {32'h0, DataOneArray[1023:640], data[31:0],
                DataOneArray[575:0]} : _T_5783 ? {32'h0, DataOneArray[1023:576], data[31:0],
                DataOneArray[511:0]} : _T_5781 ? {32'h0, DataOneArray[1023:512], data[31:0],
                DataOneArray[447:0]} : _T_5779 ? {32'h0, DataOneArray[1023:448], data[31:0],
                DataOneArray[383:0]} : _T_5777 ? {32'h0, DataOneArray[1023:384], data[31:0],
                DataOneArray[319:0]} : _T_5775 ? {32'h0, DataOneArray[1023:320], data[31:0],
                DataOneArray[255:0]} : _T_5773 ? {32'h0, DataOneArray[1023:256], data[31:0],
                DataOneArray[191:0]} : _T_5771 ? {32'h0, DataOneArray[1023:192], data[31:0],
                DataOneArray[127:0]} : _T_5769 ? {32'h0, DataOneArray[1023:128], data[31:0],
                DataOneArray[63:0]} : _T_5767 ? {DataOneArray[1023:64], data} : 1024'h0) : 1024'h0;	// Cache.scala:69:21, :71:24, :123:23, :124:23, :194:40, :201:44, :213:32, :457:31, :470:31, :516:{56,89}, :521:31, :525:68, :534:31, :538:68, :547:31, Cat.scala:33:92, Mux.scala:81:{58,61}, :101:16
  wire [63:0]          _replace0_T_38 = 64'h1 << _GEN_10;	// Cache.scala:296:55, :400:47, :565:43
  wire [63:0]          _replace1_T_50 = 64'h1 << _GEN_4 + 6'h1;	// Cache.scala:92:57, :296:55, :340:51, :566:{43,56}
  wire                 _T_2907 = state == 3'h2;	// Cache.scala:64:24, :223:18, :259:31
  wire [31:0]          _replace_wire_T_9 = replace >> _GEN_4 + 6'h1;	// Cache.scala:73:26, :92:57, :340:51, :575:{40,51}
  assign _GEN = ~_T & (_T_4 ? _replace_wire_T_3[0] : ~_T_10 & ~(&state) & ~_T_24 & _T_2907 &
                _replace_wire_T_9[0]);	// <stdin>:3291:18, :10943:18, Cache.scala:64:24, :75:23, :77:32, :223:18, :340:{26,40}, :575:40
  wire [31:0]          _T_2911 = dirty >> _GEN_4 + _GEN_5;	// Cache.scala:72:24, :340:51, :343:34, :578:{23,34}
  wire                 _T_2913 = state == 3'h3;	// Cache.scala:64:24, :223:18, :579:23
  assign DataOneArrayRen = _T ? io_cpu_req_valid & _T_3 : _T_4 ? _T_8[0] : _T_10 | ~(&state) & ~_T_24 & (_T_2907 ?
                _T_2911[0] : _T_2913);	// <stdin>:3291:18, :10943:18, Cache.scala:64:24, :77:32, :100:21, :133:28, :223:18, :232:35, :234:47, :343:{23,50}, :370:29, :578:{23,50}
  wire [7:0][31:0]     _GEN_17 = {{32'h0}, {{26'h0, _GEN_4 + _GEN_9}}, {_T_8[0] ? {26'h0, _GEN_4 + _GEN_5} : 32'h0},
                {32'h0}, {{26'h0, _GEN_4 + _GEN_9}}, {_T_2911[0] ? {26'h0, _GEN_4 + _GEN_5} : 32'h0},
                {32'h0}, {io_cpu_req_valid ? ((|io_cpu_req_bits_mask) ? (_T_3 ? (hit0 ? _GEN_0 : {26'h0,
                _GEN_1 + 6'h1}) : 32'h0) : _T_3 ? (hit0 ? _GEN_0 : {26'h0, _GEN_1 + 6'h1}) : 32'h0) :
                32'h0}};	// Cache.scala:71:24, :91:100, :92:{57,141}, :101:22, :133:28, :223:18, :232:35, :234:{43,47}, :235:38, :247:35, :250:46, :255:{46,81}, :271:38, :276:35, :292:46, :312:{46,83}, :340:51, :343:{23,34,50}, :352:{34,47}, :365:57, :371:{30,43}, :578:{23,50}, :586:{34,47}, :604:{30,43}
  assign DataOneArrayAddr = _GEN_17[state];	// Cache.scala:64:24, :101:22, :223:18, :232:35, :343:50, :371:30, :578:50, :604:30
  wire                 _T_2914 = state == 3'h4;	// Cache.scala:64:24, :223:18, Mux.scala:81:61
  wire                 _GEN_18 = _T_2914 & io_axi_resp_valid;	// Cache.scala:64:24, :223:18, :625:36
  wire [63:0]          _replace0_T_45 = 64'h1 << _GEN_10;	// Cache.scala:296:55, :400:47, :634:47
  wire [63:0]          _replace1_T_59 = 64'h1 << _GEN_4 + 6'h1;	// Cache.scala:92:57, :296:55, :340:51, :635:{47,60}
  wire                 _GEN_19 = ~_T & ~_T_4 & ~_T_10 & ~(&state) & ~_T_24 & ~_T_2907 & ~_T_2913 & _T_2914 & _GEN_11;	// <stdin>:3291:18, :10943:18, Cache.scala:64:24, :75:23, :77:32, :119:21, :223:18, :392:36, :397:29
  wire [127:0][1023:0] _GEN_20 = {{{data[7:0], io_axi_resp_bits_data[1015:0]}}, {{io_axi_resp_bits_data[1023:1016],
                data[7:0], io_axi_resp_bits_data[1007:0]}}, {{io_axi_resp_bits_data[1023:1008], data[7:0],
                io_axi_resp_bits_data[999:0]}}, {{io_axi_resp_bits_data[1023:1000], data[7:0],
                io_axi_resp_bits_data[991:0]}}, {{io_axi_resp_bits_data[1023:992], data[7:0],
                io_axi_resp_bits_data[983:0]}}, {{io_axi_resp_bits_data[1023:984], data[7:0],
                io_axi_resp_bits_data[975:0]}}, {{io_axi_resp_bits_data[1023:976], data[7:0],
                io_axi_resp_bits_data[967:0]}}, {{io_axi_resp_bits_data[1023:968], data[7:0],
                io_axi_resp_bits_data[959:0]}}, {{io_axi_resp_bits_data[1023:960], data[7:0],
                io_axi_resp_bits_data[951:0]}}, {{io_axi_resp_bits_data[1023:952], data[7:0],
                io_axi_resp_bits_data[943:0]}}, {{io_axi_resp_bits_data[1023:944], data[7:0],
                io_axi_resp_bits_data[935:0]}}, {{io_axi_resp_bits_data[1023:936], data[7:0],
                io_axi_resp_bits_data[927:0]}}, {{io_axi_resp_bits_data[1023:928], data[7:0],
                io_axi_resp_bits_data[919:0]}}, {{io_axi_resp_bits_data[1023:920], data[7:0],
                io_axi_resp_bits_data[911:0]}}, {{io_axi_resp_bits_data[1023:912], data[7:0],
                io_axi_resp_bits_data[903:0]}}, {{io_axi_resp_bits_data[1023:904], data[7:0],
                io_axi_resp_bits_data[895:0]}}, {{io_axi_resp_bits_data[1023:896], data[7:0],
                io_axi_resp_bits_data[887:0]}}, {{io_axi_resp_bits_data[1023:888], data[7:0],
                io_axi_resp_bits_data[879:0]}}, {{io_axi_resp_bits_data[1023:880], data[7:0],
                io_axi_resp_bits_data[871:0]}}, {{io_axi_resp_bits_data[1023:872], data[7:0],
                io_axi_resp_bits_data[863:0]}}, {{io_axi_resp_bits_data[1023:864], data[7:0],
                io_axi_resp_bits_data[855:0]}}, {{io_axi_resp_bits_data[1023:856], data[7:0],
                io_axi_resp_bits_data[847:0]}}, {{io_axi_resp_bits_data[1023:848], data[7:0],
                io_axi_resp_bits_data[839:0]}}, {{io_axi_resp_bits_data[1023:840], data[7:0],
                io_axi_resp_bits_data[831:0]}}, {{io_axi_resp_bits_data[1023:832], data[7:0],
                io_axi_resp_bits_data[823:0]}}, {{io_axi_resp_bits_data[1023:824], data[7:0],
                io_axi_resp_bits_data[815:0]}}, {{io_axi_resp_bits_data[1023:816], data[7:0],
                io_axi_resp_bits_data[807:0]}}, {{io_axi_resp_bits_data[1023:808], data[7:0],
                io_axi_resp_bits_data[799:0]}}, {{io_axi_resp_bits_data[1023:800], data[7:0],
                io_axi_resp_bits_data[791:0]}}, {{io_axi_resp_bits_data[1023:792], data[7:0],
                io_axi_resp_bits_data[783:0]}}, {{io_axi_resp_bits_data[1023:784], data[7:0],
                io_axi_resp_bits_data[775:0]}}, {{io_axi_resp_bits_data[1023:776], data[7:0],
                io_axi_resp_bits_data[767:0]}}, {{io_axi_resp_bits_data[1023:768], data[7:0],
                io_axi_resp_bits_data[759:0]}}, {{io_axi_resp_bits_data[1023:760], data[7:0],
                io_axi_resp_bits_data[751:0]}}, {{io_axi_resp_bits_data[1023:752], data[7:0],
                io_axi_resp_bits_data[743:0]}}, {{io_axi_resp_bits_data[1023:744], data[7:0],
                io_axi_resp_bits_data[735:0]}}, {{io_axi_resp_bits_data[1023:736], data[7:0],
                io_axi_resp_bits_data[727:0]}}, {{io_axi_resp_bits_data[1023:728], data[7:0],
                io_axi_resp_bits_data[719:0]}}, {{io_axi_resp_bits_data[1023:720], data[7:0],
                io_axi_resp_bits_data[711:0]}}, {{io_axi_resp_bits_data[1023:712], data[7:0],
                io_axi_resp_bits_data[703:0]}}, {{io_axi_resp_bits_data[1023:704], data[7:0],
                io_axi_resp_bits_data[695:0]}}, {{io_axi_resp_bits_data[1023:696], data[7:0],
                io_axi_resp_bits_data[687:0]}}, {{io_axi_resp_bits_data[1023:688], data[7:0],
                io_axi_resp_bits_data[679:0]}}, {{io_axi_resp_bits_data[1023:680], data[7:0],
                io_axi_resp_bits_data[671:0]}}, {{io_axi_resp_bits_data[1023:672], data[7:0],
                io_axi_resp_bits_data[663:0]}}, {{io_axi_resp_bits_data[1023:664], data[7:0],
                io_axi_resp_bits_data[655:0]}}, {{io_axi_resp_bits_data[1023:656], data[7:0],
                io_axi_resp_bits_data[647:0]}}, {{io_axi_resp_bits_data[1023:648], data[7:0],
                io_axi_resp_bits_data[639:0]}}, {{io_axi_resp_bits_data[1023:640], data[7:0],
                io_axi_resp_bits_data[631:0]}}, {{io_axi_resp_bits_data[1023:632], data[7:0],
                io_axi_resp_bits_data[623:0]}}, {{io_axi_resp_bits_data[1023:624], data[7:0],
                io_axi_resp_bits_data[615:0]}}, {{io_axi_resp_bits_data[1023:616], data[7:0],
                io_axi_resp_bits_data[607:0]}}, {{io_axi_resp_bits_data[1023:608], data[7:0],
                io_axi_resp_bits_data[599:0]}}, {{io_axi_resp_bits_data[1023:600], data[7:0],
                io_axi_resp_bits_data[591:0]}}, {{io_axi_resp_bits_data[1023:592], data[7:0],
                io_axi_resp_bits_data[583:0]}}, {{io_axi_resp_bits_data[1023:584], data[7:0],
                io_axi_resp_bits_data[575:0]}}, {{io_axi_resp_bits_data[1023:576], data[7:0],
                io_axi_resp_bits_data[567:0]}}, {{io_axi_resp_bits_data[1023:568], data[7:0],
                io_axi_resp_bits_data[559:0]}}, {{io_axi_resp_bits_data[1023:560], data[7:0],
                io_axi_resp_bits_data[551:0]}}, {{io_axi_resp_bits_data[1023:552], data[7:0],
                io_axi_resp_bits_data[543:0]}}, {{io_axi_resp_bits_data[1023:544], data[7:0],
                io_axi_resp_bits_data[535:0]}}, {{io_axi_resp_bits_data[1023:536], data[7:0],
                io_axi_resp_bits_data[527:0]}}, {{io_axi_resp_bits_data[1023:528], data[7:0],
                io_axi_resp_bits_data[519:0]}}, {{io_axi_resp_bits_data[1023:520], data[7:0],
                io_axi_resp_bits_data[511:0]}}, {{io_axi_resp_bits_data[1023:512], data[7:0],
                io_axi_resp_bits_data[503:0]}}, {{io_axi_resp_bits_data[1023:504], data[7:0],
                io_axi_resp_bits_data[495:0]}}, {{io_axi_resp_bits_data[1023:496], data[7:0],
                io_axi_resp_bits_data[487:0]}}, {{io_axi_resp_bits_data[1023:488], data[7:0],
                io_axi_resp_bits_data[479:0]}}, {{io_axi_resp_bits_data[1023:480], data[7:0],
                io_axi_resp_bits_data[471:0]}}, {{io_axi_resp_bits_data[1023:472], data[7:0],
                io_axi_resp_bits_data[463:0]}}, {{io_axi_resp_bits_data[1023:464], data[7:0],
                io_axi_resp_bits_data[455:0]}}, {{io_axi_resp_bits_data[1023:456], data[7:0],
                io_axi_resp_bits_data[447:0]}}, {{io_axi_resp_bits_data[1023:448], data[7:0],
                io_axi_resp_bits_data[439:0]}}, {{io_axi_resp_bits_data[1023:440], data[7:0],
                io_axi_resp_bits_data[431:0]}}, {{io_axi_resp_bits_data[1023:432], data[7:0],
                io_axi_resp_bits_data[423:0]}}, {{io_axi_resp_bits_data[1023:424], data[7:0],
                io_axi_resp_bits_data[415:0]}}, {{io_axi_resp_bits_data[1023:416], data[7:0],
                io_axi_resp_bits_data[407:0]}}, {{io_axi_resp_bits_data[1023:408], data[7:0],
                io_axi_resp_bits_data[399:0]}}, {{io_axi_resp_bits_data[1023:400], data[7:0],
                io_axi_resp_bits_data[391:0]}}, {{io_axi_resp_bits_data[1023:392], data[7:0],
                io_axi_resp_bits_data[383:0]}}, {{io_axi_resp_bits_data[1023:384], data[7:0],
                io_axi_resp_bits_data[375:0]}}, {{io_axi_resp_bits_data[1023:376], data[7:0],
                io_axi_resp_bits_data[367:0]}}, {{io_axi_resp_bits_data[1023:368], data[7:0],
                io_axi_resp_bits_data[359:0]}}, {{io_axi_resp_bits_data[1023:360], data[7:0],
                io_axi_resp_bits_data[351:0]}}, {{io_axi_resp_bits_data[1023:352], data[7:0],
                io_axi_resp_bits_data[343:0]}}, {{io_axi_resp_bits_data[1023:344], data[7:0],
                io_axi_resp_bits_data[335:0]}}, {{io_axi_resp_bits_data[1023:336], data[7:0],
                io_axi_resp_bits_data[327:0]}}, {{io_axi_resp_bits_data[1023:328], data[7:0],
                io_axi_resp_bits_data[319:0]}}, {{io_axi_resp_bits_data[1023:320], data[7:0],
                io_axi_resp_bits_data[311:0]}}, {{io_axi_resp_bits_data[1023:312], data[7:0],
                io_axi_resp_bits_data[303:0]}}, {{io_axi_resp_bits_data[1023:304], data[7:0],
                io_axi_resp_bits_data[295:0]}}, {{io_axi_resp_bits_data[1023:296], data[7:0],
                io_axi_resp_bits_data[287:0]}}, {{io_axi_resp_bits_data[1023:288], data[7:0],
                io_axi_resp_bits_data[279:0]}}, {{io_axi_resp_bits_data[1023:280], data[7:0],
                io_axi_resp_bits_data[271:0]}}, {{io_axi_resp_bits_data[1023:272], data[7:0],
                io_axi_resp_bits_data[263:0]}}, {{io_axi_resp_bits_data[1023:264], data[7:0],
                io_axi_resp_bits_data[255:0]}}, {{io_axi_resp_bits_data[1023:256], data[7:0],
                io_axi_resp_bits_data[247:0]}}, {{io_axi_resp_bits_data[1023:248], data[7:0],
                io_axi_resp_bits_data[239:0]}}, {{io_axi_resp_bits_data[1023:240], data[7:0],
                io_axi_resp_bits_data[231:0]}}, {{io_axi_resp_bits_data[1023:232], data[7:0],
                io_axi_resp_bits_data[223:0]}}, {{io_axi_resp_bits_data[1023:224], data[7:0],
                io_axi_resp_bits_data[215:0]}}, {{io_axi_resp_bits_data[1023:216], data[7:0],
                io_axi_resp_bits_data[207:0]}}, {{io_axi_resp_bits_data[1023:208], data[7:0],
                io_axi_resp_bits_data[199:0]}}, {{io_axi_resp_bits_data[1023:200], data[7:0],
                io_axi_resp_bits_data[191:0]}}, {{io_axi_resp_bits_data[1023:192], data[7:0],
                io_axi_resp_bits_data[183:0]}}, {{io_axi_resp_bits_data[1023:184], data[7:0],
                io_axi_resp_bits_data[175:0]}}, {{io_axi_resp_bits_data[1023:176], data[7:0],
                io_axi_resp_bits_data[167:0]}}, {{io_axi_resp_bits_data[1023:168], data[7:0],
                io_axi_resp_bits_data[159:0]}}, {{io_axi_resp_bits_data[1023:160], data[7:0],
                io_axi_resp_bits_data[151:0]}}, {{io_axi_resp_bits_data[1023:152], data[7:0],
                io_axi_resp_bits_data[143:0]}}, {{io_axi_resp_bits_data[1023:144], data[7:0],
                io_axi_resp_bits_data[135:0]}}, {{io_axi_resp_bits_data[1023:136], data[7:0],
                io_axi_resp_bits_data[127:0]}}, {{io_axi_resp_bits_data[1023:128], data[7:0],
                io_axi_resp_bits_data[119:0]}}, {{io_axi_resp_bits_data[1023:120], data[7:0],
                io_axi_resp_bits_data[111:0]}}, {{io_axi_resp_bits_data[1023:112], data[7:0],
                io_axi_resp_bits_data[103:0]}}, {{io_axi_resp_bits_data[1023:104], data[7:0],
                io_axi_resp_bits_data[95:0]}}, {{io_axi_resp_bits_data[1023:96], data[7:0],
                io_axi_resp_bits_data[87:0]}}, {{io_axi_resp_bits_data[1023:88], data[7:0],
                io_axi_resp_bits_data[79:0]}}, {{io_axi_resp_bits_data[1023:80], data[7:0],
                io_axi_resp_bits_data[71:0]}}, {{io_axi_resp_bits_data[1023:72], data[7:0],
                io_axi_resp_bits_data[63:0]}}, {{io_axi_resp_bits_data[1023:64], data[7:0],
                io_axi_resp_bits_data[55:0]}}, {{io_axi_resp_bits_data[1023:56], data[7:0],
                io_axi_resp_bits_data[47:0]}}, {{io_axi_resp_bits_data[1023:48], data[7:0],
                io_axi_resp_bits_data[39:0]}}, {{io_axi_resp_bits_data[1023:40], data[7:0],
                io_axi_resp_bits_data[31:0]}}, {{io_axi_resp_bits_data[1023:32], data[7:0],
                io_axi_resp_bits_data[23:0]}}, {{io_axi_resp_bits_data[1023:24], data[7:0],
                io_axi_resp_bits_data[15:0]}}, {{io_axi_resp_bits_data[1023:16], data[7:0],
                io_axi_resp_bits_data[7:0]}}, {{io_axi_resp_bits_data[1023:8], data[7:0]}}};	// Cache.scala:123:23, :647:{66,80}, :651:{69,111}, :654:79, Cat.scala:33:92, Mux.scala:81:{58,61}
  wire [1023:0]        _T_4058 = offset == 7'h72 ? {io_axi_resp_bits_data[1023:928], data[15:0],
                io_axi_resp_bits_data[911:0]} : _T_5795 ? {io_axi_resp_bits_data[1023:912], data[15:0],
                io_axi_resp_bits_data[895:0]} : offset == 7'h6E ? {io_axi_resp_bits_data[1023:896],
                data[15:0], io_axi_resp_bits_data[879:0]} : _T_5694 ? {io_axi_resp_bits_data[1023:880],
                data[15:0], io_axi_resp_bits_data[863:0]} : offset == 7'h6A ?
                {io_axi_resp_bits_data[1023:864], data[15:0], io_axi_resp_bits_data[847:0]} : _T_5793 ?
                {io_axi_resp_bits_data[1023:848], data[15:0], io_axi_resp_bits_data[831:0]} : offset ==
                7'h66 ? {io_axi_resp_bits_data[1023:832], data[15:0], io_axi_resp_bits_data[815:0]} :
                _T_5690 ? {io_axi_resp_bits_data[1023:816], data[15:0], io_axi_resp_bits_data[799:0]} :
                offset == 7'h62 ? {io_axi_resp_bits_data[1023:800], data[15:0],
                io_axi_resp_bits_data[783:0]} : _T_5791 ? {io_axi_resp_bits_data[1023:784], data[15:0],
                io_axi_resp_bits_data[767:0]} : offset == 7'h5E ? {io_axi_resp_bits_data[1023:768],
                data[15:0], io_axi_resp_bits_data[751:0]} : _T_5686 ? {io_axi_resp_bits_data[1023:752],
                data[15:0], io_axi_resp_bits_data[735:0]} : offset == 7'h5A ?
                {io_axi_resp_bits_data[1023:736], data[15:0], io_axi_resp_bits_data[719:0]} : _T_5789 ?
                {io_axi_resp_bits_data[1023:720], data[15:0], io_axi_resp_bits_data[703:0]} : offset ==
                7'h56 ? {io_axi_resp_bits_data[1023:704], data[15:0], io_axi_resp_bits_data[687:0]} :
                _T_5682 ? {io_axi_resp_bits_data[1023:688], data[15:0], io_axi_resp_bits_data[671:0]} :
                offset == 7'h52 ? {io_axi_resp_bits_data[1023:672], data[15:0],
                io_axi_resp_bits_data[655:0]} : _T_5787 ? {io_axi_resp_bits_data[1023:656], data[15:0],
                io_axi_resp_bits_data[639:0]} : offset == 7'h4E ? {io_axi_resp_bits_data[1023:640],
                data[15:0], io_axi_resp_bits_data[623:0]} : _T_5678 ? {io_axi_resp_bits_data[1023:624],
                data[15:0], io_axi_resp_bits_data[607:0]} : offset == 7'h4A ?
                {io_axi_resp_bits_data[1023:608], data[15:0], io_axi_resp_bits_data[591:0]} : _T_5785 ?
                {io_axi_resp_bits_data[1023:592], data[15:0], io_axi_resp_bits_data[575:0]} : offset ==
                7'h46 ? {io_axi_resp_bits_data[1023:576], data[15:0], io_axi_resp_bits_data[559:0]} :
                _T_5674 ? {io_axi_resp_bits_data[1023:560], data[15:0], io_axi_resp_bits_data[543:0]} :
                offset == 7'h42 ? {io_axi_resp_bits_data[1023:544], data[15:0],
                io_axi_resp_bits_data[527:0]} : _T_5783 ? {io_axi_resp_bits_data[1023:528], data[15:0],
                io_axi_resp_bits_data[511:0]} : offset == 7'h3E ? {io_axi_resp_bits_data[1023:512],
                data[15:0], io_axi_resp_bits_data[495:0]} : _T_5670 ? {io_axi_resp_bits_data[1023:496],
                data[15:0], io_axi_resp_bits_data[479:0]} : offset == 7'h3A ?
                {io_axi_resp_bits_data[1023:480], data[15:0], io_axi_resp_bits_data[463:0]} : _T_5781 ?
                {io_axi_resp_bits_data[1023:464], data[15:0], io_axi_resp_bits_data[447:0]} : offset ==
                7'h36 ? {io_axi_resp_bits_data[1023:448], data[15:0], io_axi_resp_bits_data[431:0]} :
                _T_5666 ? {io_axi_resp_bits_data[1023:432], data[15:0], io_axi_resp_bits_data[415:0]} :
                offset == 7'h32 ? {io_axi_resp_bits_data[1023:416], data[15:0],
                io_axi_resp_bits_data[399:0]} : _T_5779 ? {io_axi_resp_bits_data[1023:400], data[15:0],
                io_axi_resp_bits_data[383:0]} : offset == 7'h2E ? {io_axi_resp_bits_data[1023:384],
                data[15:0], io_axi_resp_bits_data[367:0]} : _T_5662 ? {io_axi_resp_bits_data[1023:368],
                data[15:0], io_axi_resp_bits_data[351:0]} : offset == 7'h2A ?
                {io_axi_resp_bits_data[1023:352], data[15:0], io_axi_resp_bits_data[335:0]} : _T_5777 ?
                {io_axi_resp_bits_data[1023:336], data[15:0], io_axi_resp_bits_data[319:0]} : offset ==
                7'h26 ? {io_axi_resp_bits_data[1023:320], data[15:0], io_axi_resp_bits_data[303:0]} :
                _T_5658 ? {io_axi_resp_bits_data[1023:304], data[15:0], io_axi_resp_bits_data[287:0]} :
                offset == 7'h22 ? {io_axi_resp_bits_data[1023:288], data[15:0],
                io_axi_resp_bits_data[271:0]} : _T_5775 ? {io_axi_resp_bits_data[1023:272], data[15:0],
                io_axi_resp_bits_data[255:0]} : offset == 7'h1E ? {io_axi_resp_bits_data[1023:256],
                data[15:0], io_axi_resp_bits_data[239:0]} : _T_5654 ? {io_axi_resp_bits_data[1023:240],
                data[15:0], io_axi_resp_bits_data[223:0]} : offset == 7'h1A ?
                {io_axi_resp_bits_data[1023:224], data[15:0], io_axi_resp_bits_data[207:0]} : _T_5773 ?
                {io_axi_resp_bits_data[1023:208], data[15:0], io_axi_resp_bits_data[191:0]} : offset ==
                7'h16 ? {io_axi_resp_bits_data[1023:192], data[15:0], io_axi_resp_bits_data[175:0]} :
                _T_5650 ? {io_axi_resp_bits_data[1023:176], data[15:0], io_axi_resp_bits_data[159:0]} :
                offset == 7'h12 ? {io_axi_resp_bits_data[1023:160], data[15:0],
                io_axi_resp_bits_data[143:0]} : _T_5771 ? {io_axi_resp_bits_data[1023:144], data[15:0],
                io_axi_resp_bits_data[127:0]} : offset == 7'hE ? {io_axi_resp_bits_data[1023:128],
                data[15:0], io_axi_resp_bits_data[111:0]} : _T_5646 ? {io_axi_resp_bits_data[1023:112],
                data[15:0], io_axi_resp_bits_data[95:0]} : offset == 7'hA ?
                {io_axi_resp_bits_data[1023:96], data[15:0], io_axi_resp_bits_data[79:0]} : _T_5769 ?
                {io_axi_resp_bits_data[1023:80], data[15:0], io_axi_resp_bits_data[63:0]} : offset == 7'h6
                ? {io_axi_resp_bits_data[1023:64], data[15:0], io_axi_resp_bits_data[47:0]} : _T_5642 ?
                {io_axi_resp_bits_data[1023:48], data[15:0], io_axi_resp_bits_data[31:0]} : offset == 7'h2
                ? {io_axi_resp_bits_data[1023:32], data[15:0], io_axi_resp_bits_data[15:0]} : _T_5767 ?
                {io_axi_resp_bits_data[1023:16], data[15:0]} : 1024'h0;	// Cache.scala:69:21, :123:23, :213:32, :651:{69,111}, :660:81, Cat.scala:33:92, Mux.scala:81:{58,61}
  wire [1023:0]        _T_4359 = mask == 8'h3 ? (offset == 7'h7E ? {data[15:0], io_axi_resp_bits_data[1007:0]} : _T_5702 ?
                {io_axi_resp_bits_data[1023:1008], data[15:0], io_axi_resp_bits_data[991:0]} : offset ==
                7'h7A ? {io_axi_resp_bits_data[1023:992], data[15:0], io_axi_resp_bits_data[975:0]} :
                _T_5797 ? {io_axi_resp_bits_data[1023:976], data[15:0], io_axi_resp_bits_data[959:0]} :
                offset == 7'h76 ? {io_axi_resp_bits_data[1023:960], data[15:0],
                io_axi_resp_bits_data[943:0]} : _T_5698 ? {io_axi_resp_bits_data[1023:944], data[15:0],
                io_axi_resp_bits_data[927:0]} : _T_4058) : mask == 8'hF ? (_T_5702 ? {data[31:0],
                io_axi_resp_bits_data[991:0]} : _T_5797 ? {16'h0, io_axi_resp_bits_data[1023:992],
                data[15:0], io_axi_resp_bits_data[959:0]} : _T_5698 ? {16'h0,
                io_axi_resp_bits_data[1023:960], data[15:0], io_axi_resp_bits_data[927:0]} : _T_5795 ?
                {16'h0, io_axi_resp_bits_data[1023:928], data[15:0], io_axi_resp_bits_data[895:0]} :
                _T_5694 ? {16'h0, io_axi_resp_bits_data[1023:896], data[15:0],
                io_axi_resp_bits_data[863:0]} : _T_5793 ? {16'h0, io_axi_resp_bits_data[1023:864],
                data[15:0], io_axi_resp_bits_data[831:0]} : _T_5690 ? {16'h0,
                io_axi_resp_bits_data[1023:832], data[15:0], io_axi_resp_bits_data[799:0]} : _T_5791 ?
                {16'h0, io_axi_resp_bits_data[1023:800], data[15:0], io_axi_resp_bits_data[767:0]} :
                _T_5686 ? {16'h0, io_axi_resp_bits_data[1023:768], data[15:0],
                io_axi_resp_bits_data[735:0]} : _T_5789 ? {16'h0, io_axi_resp_bits_data[1023:736],
                data[15:0], io_axi_resp_bits_data[703:0]} : _T_5682 ? {16'h0,
                io_axi_resp_bits_data[1023:704], data[15:0], io_axi_resp_bits_data[671:0]} : _T_5787 ?
                {16'h0, io_axi_resp_bits_data[1023:672], data[15:0], io_axi_resp_bits_data[639:0]} :
                _T_5678 ? {16'h0, io_axi_resp_bits_data[1023:640], data[15:0],
                io_axi_resp_bits_data[607:0]} : _T_5785 ? {16'h0, io_axi_resp_bits_data[1023:608],
                data[15:0], io_axi_resp_bits_data[575:0]} : _T_5674 ? {16'h0,
                io_axi_resp_bits_data[1023:576], data[15:0], io_axi_resp_bits_data[543:0]} : _T_5783 ?
                {16'h0, io_axi_resp_bits_data[1023:544], data[15:0], io_axi_resp_bits_data[511:0]} :
                _T_5670 ? {16'h0, io_axi_resp_bits_data[1023:512], data[15:0],
                io_axi_resp_bits_data[479:0]} : _T_5781 ? {16'h0, io_axi_resp_bits_data[1023:480],
                data[15:0], io_axi_resp_bits_data[447:0]} : _T_5666 ? {16'h0,
                io_axi_resp_bits_data[1023:448], data[15:0], io_axi_resp_bits_data[415:0]} : _T_5779 ?
                {16'h0, io_axi_resp_bits_data[1023:416], data[15:0], io_axi_resp_bits_data[383:0]} :
                _T_5662 ? {16'h0, io_axi_resp_bits_data[1023:384], data[15:0],
                io_axi_resp_bits_data[351:0]} : _T_5777 ? {16'h0, io_axi_resp_bits_data[1023:352],
                data[15:0], io_axi_resp_bits_data[319:0]} : _T_5658 ? {16'h0,
                io_axi_resp_bits_data[1023:320], data[15:0], io_axi_resp_bits_data[287:0]} : _T_5775 ?
                {16'h0, io_axi_resp_bits_data[1023:288], data[15:0], io_axi_resp_bits_data[255:0]} :
                _T_5654 ? {16'h0, io_axi_resp_bits_data[1023:256], data[15:0],
                io_axi_resp_bits_data[223:0]} : _T_5773 ? {16'h0, io_axi_resp_bits_data[1023:224],
                data[15:0], io_axi_resp_bits_data[191:0]} : _T_5650 ? {16'h0,
                io_axi_resp_bits_data[1023:192], data[15:0], io_axi_resp_bits_data[159:0]} : _T_5771 ?
                {16'h0, io_axi_resp_bits_data[1023:160], data[15:0], io_axi_resp_bits_data[127:0]} :
                _T_5646 ? {16'h0, io_axi_resp_bits_data[1023:128], data[15:0], io_axi_resp_bits_data[95:0]}
                : _T_5769 ? {16'h0, io_axi_resp_bits_data[1023:96], data[15:0],
                io_axi_resp_bits_data[63:0]} : _T_5642 ? {16'h0, io_axi_resp_bits_data[1023:64],
                data[15:0], io_axi_resp_bits_data[31:0]} : _T_5767 ? {io_axi_resp_bits_data[1023:32],
                data[31:0]} : 1024'h0) : (&mask) ? (_T_5797 ? {data, io_axi_resp_bits_data[959:0]} :
                _T_5795 ? {32'h0, io_axi_resp_bits_data[1023:960], data[31:0],
                io_axi_resp_bits_data[895:0]} : _T_5793 ? {32'h0, io_axi_resp_bits_data[1023:896],
                data[31:0], io_axi_resp_bits_data[831:0]} : _T_5791 ? {32'h0,
                io_axi_resp_bits_data[1023:832], data[31:0], io_axi_resp_bits_data[767:0]} : _T_5789 ?
                {32'h0, io_axi_resp_bits_data[1023:768], data[31:0], io_axi_resp_bits_data[703:0]} :
                _T_5787 ? {32'h0, io_axi_resp_bits_data[1023:704], data[31:0],
                io_axi_resp_bits_data[639:0]} : _T_5785 ? {32'h0, io_axi_resp_bits_data[1023:640],
                data[31:0], io_axi_resp_bits_data[575:0]} : _T_5783 ? {32'h0,
                io_axi_resp_bits_data[1023:576], data[31:0], io_axi_resp_bits_data[511:0]} : _T_5781 ?
                {32'h0, io_axi_resp_bits_data[1023:512], data[31:0], io_axi_resp_bits_data[447:0]} :
                _T_5779 ? {32'h0, io_axi_resp_bits_data[1023:448], data[31:0],
                io_axi_resp_bits_data[383:0]} : _T_5777 ? {32'h0, io_axi_resp_bits_data[1023:384],
                data[31:0], io_axi_resp_bits_data[319:0]} : _T_5775 ? {32'h0,
                io_axi_resp_bits_data[1023:320], data[31:0], io_axi_resp_bits_data[255:0]} : _T_5773 ?
                {32'h0, io_axi_resp_bits_data[1023:256], data[31:0], io_axi_resp_bits_data[191:0]} :
                _T_5771 ? {32'h0, io_axi_resp_bits_data[1023:192], data[31:0],
                io_axi_resp_bits_data[127:0]} : _T_5769 ? {32'h0, io_axi_resp_bits_data[1023:128],
                data[31:0], io_axi_resp_bits_data[63:0]} : _T_5767 ? {io_axi_resp_bits_data[1023:64], data}
                : 1024'h0) : 1024'h0;	// Cache.scala:69:21, :71:24, :123:23, :124:23, :213:32, :457:31, :470:31, :651:{69,111}, :656:35, :660:81, :669:35, :673:81, :682:35, Cat.scala:33:92, Mux.scala:81:{58,61}, :101:16
  wire                 _GEN_21 = _T_2907 | _T_2913 | ~_GEN_18;	// Cache.scala:64:24, :71:24, :72:24, :223:18, :625:36
  wire [63:0]          _replace0_T_52 = 64'h1 << _GEN_10;	// Cache.scala:296:55, :400:47, :701:47
  wire [7:0][31:0]     _GEN_22 = {{io_axi_resp_valid ? (victim ? replace | _replace0_T_17[31:0] : ~(~replace |
                _replace0_T_24[31:0])) : 32'h0}, {32'h0}, {32'h0}, {_GEN_21 ? 32'h0 : victim ? replace |
                _replace0_T_45[31:0] : ~(~replace | _replace0_T_52[31:0])}, {32'h0}, {32'h0}, {whitNum ?
                replace | _replace0_T_31[31:0] : ~(~replace | _replace0_T_38[31:0])}, {_GEN_3 ? 32'h0 :
                hit0 ? ~(~replace | _replace0_T_2[31:0]) : replace | _replace0_T_10[31:0]}};	// <stdin>:3287:14, :10939:14, Cache.scala:71:24, :72:24, :73:26, :119:21, :129:26, :133:28, :223:18, :232:35, :234:47, :276:35, :296:{38,55}, :315:{38,55}, :392:36, :397:29, :400:{30,47}, :409:{30,47}, :440:26, :500:{26,43}, :565:{26,43}, :631:29, :634:{30,47}, :701:{30,47}
  wire [31:0]          _GEN_23 = _GEN_22[state];	// <stdin>:3287:14, :10939:14, Cache.scala:64:24, :223:18, :232:35, :392:36, :440:26
  wire [63:0]          _replace1_T_68 = 64'h1 << _GEN_4 + 6'h1;	// Cache.scala:92:57, :296:55, :340:51, :702:{47,60}
  wire [7:0][31:0]     _GEN_24 = {{io_axi_resp_valid ? (victim ? ~(~replace | _replace1_T_23[31:0]) : replace |
                _replace1_T_32[31:0]) : 32'h0}, {32'h0}, {32'h0}, {_GEN_21 ? 32'h0 : victim ? ~(~replace |
                _replace1_T_59[31:0]) : replace | _replace1_T_68[31:0]}, {32'h0}, {32'h0}, {whitNum ?
                ~(~replace | _replace1_T_41[31:0]) : replace | _replace1_T_50[31:0]}, {_GEN_3 ? 32'h0 :
                hit0 ? replace | _replace1_T_4[31:0] : ~(~replace | _replace1_T_14[31:0])}};	// <stdin>:3287:14, :3289:14, :10939:14, :10941:14, Cache.scala:71:24, :72:24, :73:26, :119:21, :129:26, :133:28, :223:18, :232:35, :234:47, :276:35, :297:{38,55}, :315:55, :316:{38,55}, :392:36, :397:29, :400:47, :401:{30,47}, :410:{30,47}, :440:26, :500:43, :501:{26,43}, :566:{26,43}, :631:29, :634:47, :635:{30,47}, :702:{30,47}
  wire [31:0]          _GEN_25 = _GEN_24[state];	// <stdin>:3289:14, :10941:14, Cache.scala:64:24, :223:18, :232:35, :392:36, :440:26
  wire                 _GEN_26 = ~_T & ~_T_4 & ~_T_10 & ~(&state) & ~_T_24 & ~_T_2907 & ~_T_2913 & _T_2914 & _GEN_13;	// <stdin>:3291:18, :10943:18, Cache.scala:64:24, :75:23, :77:32, :119:21, :223:18, :392:36, :397:29
  wire [127:0][1023:0] _GEN_27 = {{{data[7:0], io_axi_resp_bits_data[1015:0]}}, {{io_axi_resp_bits_data[1023:1016],
                data[7:0], io_axi_resp_bits_data[1007:0]}}, {{io_axi_resp_bits_data[1023:1008], data[7:0],
                io_axi_resp_bits_data[999:0]}}, {{io_axi_resp_bits_data[1023:1000], data[7:0],
                io_axi_resp_bits_data[991:0]}}, {{io_axi_resp_bits_data[1023:992], data[7:0],
                io_axi_resp_bits_data[983:0]}}, {{io_axi_resp_bits_data[1023:984], data[7:0],
                io_axi_resp_bits_data[975:0]}}, {{io_axi_resp_bits_data[1023:976], data[7:0],
                io_axi_resp_bits_data[967:0]}}, {{io_axi_resp_bits_data[1023:968], data[7:0],
                io_axi_resp_bits_data[959:0]}}, {{io_axi_resp_bits_data[1023:960], data[7:0],
                io_axi_resp_bits_data[951:0]}}, {{io_axi_resp_bits_data[1023:952], data[7:0],
                io_axi_resp_bits_data[943:0]}}, {{io_axi_resp_bits_data[1023:944], data[7:0],
                io_axi_resp_bits_data[935:0]}}, {{io_axi_resp_bits_data[1023:936], data[7:0],
                io_axi_resp_bits_data[927:0]}}, {{io_axi_resp_bits_data[1023:928], data[7:0],
                io_axi_resp_bits_data[919:0]}}, {{io_axi_resp_bits_data[1023:920], data[7:0],
                io_axi_resp_bits_data[911:0]}}, {{io_axi_resp_bits_data[1023:912], data[7:0],
                io_axi_resp_bits_data[903:0]}}, {{io_axi_resp_bits_data[1023:904], data[7:0],
                io_axi_resp_bits_data[895:0]}}, {{io_axi_resp_bits_data[1023:896], data[7:0],
                io_axi_resp_bits_data[887:0]}}, {{io_axi_resp_bits_data[1023:888], data[7:0],
                io_axi_resp_bits_data[879:0]}}, {{io_axi_resp_bits_data[1023:880], data[7:0],
                io_axi_resp_bits_data[871:0]}}, {{io_axi_resp_bits_data[1023:872], data[7:0],
                io_axi_resp_bits_data[863:0]}}, {{io_axi_resp_bits_data[1023:864], data[7:0],
                io_axi_resp_bits_data[855:0]}}, {{io_axi_resp_bits_data[1023:856], data[7:0],
                io_axi_resp_bits_data[847:0]}}, {{io_axi_resp_bits_data[1023:848], data[7:0],
                io_axi_resp_bits_data[839:0]}}, {{io_axi_resp_bits_data[1023:840], data[7:0],
                io_axi_resp_bits_data[831:0]}}, {{io_axi_resp_bits_data[1023:832], data[7:0],
                io_axi_resp_bits_data[823:0]}}, {{io_axi_resp_bits_data[1023:824], data[7:0],
                io_axi_resp_bits_data[815:0]}}, {{io_axi_resp_bits_data[1023:816], data[7:0],
                io_axi_resp_bits_data[807:0]}}, {{io_axi_resp_bits_data[1023:808], data[7:0],
                io_axi_resp_bits_data[799:0]}}, {{io_axi_resp_bits_data[1023:800], data[7:0],
                io_axi_resp_bits_data[791:0]}}, {{io_axi_resp_bits_data[1023:792], data[7:0],
                io_axi_resp_bits_data[783:0]}}, {{io_axi_resp_bits_data[1023:784], data[7:0],
                io_axi_resp_bits_data[775:0]}}, {{io_axi_resp_bits_data[1023:776], data[7:0],
                io_axi_resp_bits_data[767:0]}}, {{io_axi_resp_bits_data[1023:768], data[7:0],
                io_axi_resp_bits_data[759:0]}}, {{io_axi_resp_bits_data[1023:760], data[7:0],
                io_axi_resp_bits_data[751:0]}}, {{io_axi_resp_bits_data[1023:752], data[7:0],
                io_axi_resp_bits_data[743:0]}}, {{io_axi_resp_bits_data[1023:744], data[7:0],
                io_axi_resp_bits_data[735:0]}}, {{io_axi_resp_bits_data[1023:736], data[7:0],
                io_axi_resp_bits_data[727:0]}}, {{io_axi_resp_bits_data[1023:728], data[7:0],
                io_axi_resp_bits_data[719:0]}}, {{io_axi_resp_bits_data[1023:720], data[7:0],
                io_axi_resp_bits_data[711:0]}}, {{io_axi_resp_bits_data[1023:712], data[7:0],
                io_axi_resp_bits_data[703:0]}}, {{io_axi_resp_bits_data[1023:704], data[7:0],
                io_axi_resp_bits_data[695:0]}}, {{io_axi_resp_bits_data[1023:696], data[7:0],
                io_axi_resp_bits_data[687:0]}}, {{io_axi_resp_bits_data[1023:688], data[7:0],
                io_axi_resp_bits_data[679:0]}}, {{io_axi_resp_bits_data[1023:680], data[7:0],
                io_axi_resp_bits_data[671:0]}}, {{io_axi_resp_bits_data[1023:672], data[7:0],
                io_axi_resp_bits_data[663:0]}}, {{io_axi_resp_bits_data[1023:664], data[7:0],
                io_axi_resp_bits_data[655:0]}}, {{io_axi_resp_bits_data[1023:656], data[7:0],
                io_axi_resp_bits_data[647:0]}}, {{io_axi_resp_bits_data[1023:648], data[7:0],
                io_axi_resp_bits_data[639:0]}}, {{io_axi_resp_bits_data[1023:640], data[7:0],
                io_axi_resp_bits_data[631:0]}}, {{io_axi_resp_bits_data[1023:632], data[7:0],
                io_axi_resp_bits_data[623:0]}}, {{io_axi_resp_bits_data[1023:624], data[7:0],
                io_axi_resp_bits_data[615:0]}}, {{io_axi_resp_bits_data[1023:616], data[7:0],
                io_axi_resp_bits_data[607:0]}}, {{io_axi_resp_bits_data[1023:608], data[7:0],
                io_axi_resp_bits_data[599:0]}}, {{io_axi_resp_bits_data[1023:600], data[7:0],
                io_axi_resp_bits_data[591:0]}}, {{io_axi_resp_bits_data[1023:592], data[7:0],
                io_axi_resp_bits_data[583:0]}}, {{io_axi_resp_bits_data[1023:584], data[7:0],
                io_axi_resp_bits_data[575:0]}}, {{io_axi_resp_bits_data[1023:576], data[7:0],
                io_axi_resp_bits_data[567:0]}}, {{io_axi_resp_bits_data[1023:568], data[7:0],
                io_axi_resp_bits_data[559:0]}}, {{io_axi_resp_bits_data[1023:560], data[7:0],
                io_axi_resp_bits_data[551:0]}}, {{io_axi_resp_bits_data[1023:552], data[7:0],
                io_axi_resp_bits_data[543:0]}}, {{io_axi_resp_bits_data[1023:544], data[7:0],
                io_axi_resp_bits_data[535:0]}}, {{io_axi_resp_bits_data[1023:536], data[7:0],
                io_axi_resp_bits_data[527:0]}}, {{io_axi_resp_bits_data[1023:528], data[7:0],
                io_axi_resp_bits_data[519:0]}}, {{io_axi_resp_bits_data[1023:520], data[7:0],
                io_axi_resp_bits_data[511:0]}}, {{io_axi_resp_bits_data[1023:512], data[7:0],
                io_axi_resp_bits_data[503:0]}}, {{io_axi_resp_bits_data[1023:504], data[7:0],
                io_axi_resp_bits_data[495:0]}}, {{io_axi_resp_bits_data[1023:496], data[7:0],
                io_axi_resp_bits_data[487:0]}}, {{io_axi_resp_bits_data[1023:488], data[7:0],
                io_axi_resp_bits_data[479:0]}}, {{io_axi_resp_bits_data[1023:480], data[7:0],
                io_axi_resp_bits_data[471:0]}}, {{io_axi_resp_bits_data[1023:472], data[7:0],
                io_axi_resp_bits_data[463:0]}}, {{io_axi_resp_bits_data[1023:464], data[7:0],
                io_axi_resp_bits_data[455:0]}}, {{io_axi_resp_bits_data[1023:456], data[7:0],
                io_axi_resp_bits_data[447:0]}}, {{io_axi_resp_bits_data[1023:448], data[7:0],
                io_axi_resp_bits_data[439:0]}}, {{io_axi_resp_bits_data[1023:440], data[7:0],
                io_axi_resp_bits_data[431:0]}}, {{io_axi_resp_bits_data[1023:432], data[7:0],
                io_axi_resp_bits_data[423:0]}}, {{io_axi_resp_bits_data[1023:424], data[7:0],
                io_axi_resp_bits_data[415:0]}}, {{io_axi_resp_bits_data[1023:416], data[7:0],
                io_axi_resp_bits_data[407:0]}}, {{io_axi_resp_bits_data[1023:408], data[7:0],
                io_axi_resp_bits_data[399:0]}}, {{io_axi_resp_bits_data[1023:400], data[7:0],
                io_axi_resp_bits_data[391:0]}}, {{io_axi_resp_bits_data[1023:392], data[7:0],
                io_axi_resp_bits_data[383:0]}}, {{io_axi_resp_bits_data[1023:384], data[7:0],
                io_axi_resp_bits_data[375:0]}}, {{io_axi_resp_bits_data[1023:376], data[7:0],
                io_axi_resp_bits_data[367:0]}}, {{io_axi_resp_bits_data[1023:368], data[7:0],
                io_axi_resp_bits_data[359:0]}}, {{io_axi_resp_bits_data[1023:360], data[7:0],
                io_axi_resp_bits_data[351:0]}}, {{io_axi_resp_bits_data[1023:352], data[7:0],
                io_axi_resp_bits_data[343:0]}}, {{io_axi_resp_bits_data[1023:344], data[7:0],
                io_axi_resp_bits_data[335:0]}}, {{io_axi_resp_bits_data[1023:336], data[7:0],
                io_axi_resp_bits_data[327:0]}}, {{io_axi_resp_bits_data[1023:328], data[7:0],
                io_axi_resp_bits_data[319:0]}}, {{io_axi_resp_bits_data[1023:320], data[7:0],
                io_axi_resp_bits_data[311:0]}}, {{io_axi_resp_bits_data[1023:312], data[7:0],
                io_axi_resp_bits_data[303:0]}}, {{io_axi_resp_bits_data[1023:304], data[7:0],
                io_axi_resp_bits_data[295:0]}}, {{io_axi_resp_bits_data[1023:296], data[7:0],
                io_axi_resp_bits_data[287:0]}}, {{io_axi_resp_bits_data[1023:288], data[7:0],
                io_axi_resp_bits_data[279:0]}}, {{io_axi_resp_bits_data[1023:280], data[7:0],
                io_axi_resp_bits_data[271:0]}}, {{io_axi_resp_bits_data[1023:272], data[7:0],
                io_axi_resp_bits_data[263:0]}}, {{io_axi_resp_bits_data[1023:264], data[7:0],
                io_axi_resp_bits_data[255:0]}}, {{io_axi_resp_bits_data[1023:256], data[7:0],
                io_axi_resp_bits_data[247:0]}}, {{io_axi_resp_bits_data[1023:248], data[7:0],
                io_axi_resp_bits_data[239:0]}}, {{io_axi_resp_bits_data[1023:240], data[7:0],
                io_axi_resp_bits_data[231:0]}}, {{io_axi_resp_bits_data[1023:232], data[7:0],
                io_axi_resp_bits_data[223:0]}}, {{io_axi_resp_bits_data[1023:224], data[7:0],
                io_axi_resp_bits_data[215:0]}}, {{io_axi_resp_bits_data[1023:216], data[7:0],
                io_axi_resp_bits_data[207:0]}}, {{io_axi_resp_bits_data[1023:208], data[7:0],
                io_axi_resp_bits_data[199:0]}}, {{io_axi_resp_bits_data[1023:200], data[7:0],
                io_axi_resp_bits_data[191:0]}}, {{io_axi_resp_bits_data[1023:192], data[7:0],
                io_axi_resp_bits_data[183:0]}}, {{io_axi_resp_bits_data[1023:184], data[7:0],
                io_axi_resp_bits_data[175:0]}}, {{io_axi_resp_bits_data[1023:176], data[7:0],
                io_axi_resp_bits_data[167:0]}}, {{io_axi_resp_bits_data[1023:168], data[7:0],
                io_axi_resp_bits_data[159:0]}}, {{io_axi_resp_bits_data[1023:160], data[7:0],
                io_axi_resp_bits_data[151:0]}}, {{io_axi_resp_bits_data[1023:152], data[7:0],
                io_axi_resp_bits_data[143:0]}}, {{io_axi_resp_bits_data[1023:144], data[7:0],
                io_axi_resp_bits_data[135:0]}}, {{io_axi_resp_bits_data[1023:136], data[7:0],
                io_axi_resp_bits_data[127:0]}}, {{io_axi_resp_bits_data[1023:128], data[7:0],
                io_axi_resp_bits_data[119:0]}}, {{io_axi_resp_bits_data[1023:120], data[7:0],
                io_axi_resp_bits_data[111:0]}}, {{io_axi_resp_bits_data[1023:112], data[7:0],
                io_axi_resp_bits_data[103:0]}}, {{io_axi_resp_bits_data[1023:104], data[7:0],
                io_axi_resp_bits_data[95:0]}}, {{io_axi_resp_bits_data[1023:96], data[7:0],
                io_axi_resp_bits_data[87:0]}}, {{io_axi_resp_bits_data[1023:88], data[7:0],
                io_axi_resp_bits_data[79:0]}}, {{io_axi_resp_bits_data[1023:80], data[7:0],
                io_axi_resp_bits_data[71:0]}}, {{io_axi_resp_bits_data[1023:72], data[7:0],
                io_axi_resp_bits_data[63:0]}}, {{io_axi_resp_bits_data[1023:64], data[7:0],
                io_axi_resp_bits_data[55:0]}}, {{io_axi_resp_bits_data[1023:56], data[7:0],
                io_axi_resp_bits_data[47:0]}}, {{io_axi_resp_bits_data[1023:48], data[7:0],
                io_axi_resp_bits_data[39:0]}}, {{io_axi_resp_bits_data[1023:40], data[7:0],
                io_axi_resp_bits_data[31:0]}}, {{io_axi_resp_bits_data[1023:32], data[7:0],
                io_axi_resp_bits_data[23:0]}}, {{io_axi_resp_bits_data[1023:24], data[7:0],
                io_axi_resp_bits_data[15:0]}}, {{io_axi_resp_bits_data[1023:16], data[7:0],
                io_axi_resp_bits_data[7:0]}}, {{io_axi_resp_bits_data[1023:8], data[7:0]}}};	// Cache.scala:123:23, :714:{66,80}, :718:{69,111}, :721:79, Cat.scala:33:92, Mux.scala:81:{58,61}
  wire [1023:0]        _T_5500 = offset == 7'h72 ? {io_axi_resp_bits_data[1023:928], data[15:0],
                io_axi_resp_bits_data[911:0]} : _T_5795 ? {io_axi_resp_bits_data[1023:912], data[15:0],
                io_axi_resp_bits_data[895:0]} : offset == 7'h6E ? {io_axi_resp_bits_data[1023:896],
                data[15:0], io_axi_resp_bits_data[879:0]} : _T_5694 ? {io_axi_resp_bits_data[1023:880],
                data[15:0], io_axi_resp_bits_data[863:0]} : offset == 7'h6A ?
                {io_axi_resp_bits_data[1023:864], data[15:0], io_axi_resp_bits_data[847:0]} : _T_5793 ?
                {io_axi_resp_bits_data[1023:848], data[15:0], io_axi_resp_bits_data[831:0]} : offset ==
                7'h66 ? {io_axi_resp_bits_data[1023:832], data[15:0], io_axi_resp_bits_data[815:0]} :
                _T_5690 ? {io_axi_resp_bits_data[1023:816], data[15:0], io_axi_resp_bits_data[799:0]} :
                offset == 7'h62 ? {io_axi_resp_bits_data[1023:800], data[15:0],
                io_axi_resp_bits_data[783:0]} : _T_5791 ? {io_axi_resp_bits_data[1023:784], data[15:0],
                io_axi_resp_bits_data[767:0]} : offset == 7'h5E ? {io_axi_resp_bits_data[1023:768],
                data[15:0], io_axi_resp_bits_data[751:0]} : _T_5686 ? {io_axi_resp_bits_data[1023:752],
                data[15:0], io_axi_resp_bits_data[735:0]} : offset == 7'h5A ?
                {io_axi_resp_bits_data[1023:736], data[15:0], io_axi_resp_bits_data[719:0]} : _T_5789 ?
                {io_axi_resp_bits_data[1023:720], data[15:0], io_axi_resp_bits_data[703:0]} : offset ==
                7'h56 ? {io_axi_resp_bits_data[1023:704], data[15:0], io_axi_resp_bits_data[687:0]} :
                _T_5682 ? {io_axi_resp_bits_data[1023:688], data[15:0], io_axi_resp_bits_data[671:0]} :
                offset == 7'h52 ? {io_axi_resp_bits_data[1023:672], data[15:0],
                io_axi_resp_bits_data[655:0]} : _T_5787 ? {io_axi_resp_bits_data[1023:656], data[15:0],
                io_axi_resp_bits_data[639:0]} : offset == 7'h4E ? {io_axi_resp_bits_data[1023:640],
                data[15:0], io_axi_resp_bits_data[623:0]} : _T_5678 ? {io_axi_resp_bits_data[1023:624],
                data[15:0], io_axi_resp_bits_data[607:0]} : offset == 7'h4A ?
                {io_axi_resp_bits_data[1023:608], data[15:0], io_axi_resp_bits_data[591:0]} : _T_5785 ?
                {io_axi_resp_bits_data[1023:592], data[15:0], io_axi_resp_bits_data[575:0]} : offset ==
                7'h46 ? {io_axi_resp_bits_data[1023:576], data[15:0], io_axi_resp_bits_data[559:0]} :
                _T_5674 ? {io_axi_resp_bits_data[1023:560], data[15:0], io_axi_resp_bits_data[543:0]} :
                offset == 7'h42 ? {io_axi_resp_bits_data[1023:544], data[15:0],
                io_axi_resp_bits_data[527:0]} : _T_5783 ? {io_axi_resp_bits_data[1023:528], data[15:0],
                io_axi_resp_bits_data[511:0]} : offset == 7'h3E ? {io_axi_resp_bits_data[1023:512],
                data[15:0], io_axi_resp_bits_data[495:0]} : _T_5670 ? {io_axi_resp_bits_data[1023:496],
                data[15:0], io_axi_resp_bits_data[479:0]} : offset == 7'h3A ?
                {io_axi_resp_bits_data[1023:480], data[15:0], io_axi_resp_bits_data[463:0]} : _T_5781 ?
                {io_axi_resp_bits_data[1023:464], data[15:0], io_axi_resp_bits_data[447:0]} : offset ==
                7'h36 ? {io_axi_resp_bits_data[1023:448], data[15:0], io_axi_resp_bits_data[431:0]} :
                _T_5666 ? {io_axi_resp_bits_data[1023:432], data[15:0], io_axi_resp_bits_data[415:0]} :
                offset == 7'h32 ? {io_axi_resp_bits_data[1023:416], data[15:0],
                io_axi_resp_bits_data[399:0]} : _T_5779 ? {io_axi_resp_bits_data[1023:400], data[15:0],
                io_axi_resp_bits_data[383:0]} : offset == 7'h2E ? {io_axi_resp_bits_data[1023:384],
                data[15:0], io_axi_resp_bits_data[367:0]} : _T_5662 ? {io_axi_resp_bits_data[1023:368],
                data[15:0], io_axi_resp_bits_data[351:0]} : offset == 7'h2A ?
                {io_axi_resp_bits_data[1023:352], data[15:0], io_axi_resp_bits_data[335:0]} : _T_5777 ?
                {io_axi_resp_bits_data[1023:336], data[15:0], io_axi_resp_bits_data[319:0]} : offset ==
                7'h26 ? {io_axi_resp_bits_data[1023:320], data[15:0], io_axi_resp_bits_data[303:0]} :
                _T_5658 ? {io_axi_resp_bits_data[1023:304], data[15:0], io_axi_resp_bits_data[287:0]} :
                offset == 7'h22 ? {io_axi_resp_bits_data[1023:288], data[15:0],
                io_axi_resp_bits_data[271:0]} : _T_5775 ? {io_axi_resp_bits_data[1023:272], data[15:0],
                io_axi_resp_bits_data[255:0]} : offset == 7'h1E ? {io_axi_resp_bits_data[1023:256],
                data[15:0], io_axi_resp_bits_data[239:0]} : _T_5654 ? {io_axi_resp_bits_data[1023:240],
                data[15:0], io_axi_resp_bits_data[223:0]} : offset == 7'h1A ?
                {io_axi_resp_bits_data[1023:224], data[15:0], io_axi_resp_bits_data[207:0]} : _T_5773 ?
                {io_axi_resp_bits_data[1023:208], data[15:0], io_axi_resp_bits_data[191:0]} : offset ==
                7'h16 ? {io_axi_resp_bits_data[1023:192], data[15:0], io_axi_resp_bits_data[175:0]} :
                _T_5650 ? {io_axi_resp_bits_data[1023:176], data[15:0], io_axi_resp_bits_data[159:0]} :
                offset == 7'h12 ? {io_axi_resp_bits_data[1023:160], data[15:0],
                io_axi_resp_bits_data[143:0]} : _T_5771 ? {io_axi_resp_bits_data[1023:144], data[15:0],
                io_axi_resp_bits_data[127:0]} : offset == 7'hE ? {io_axi_resp_bits_data[1023:128],
                data[15:0], io_axi_resp_bits_data[111:0]} : _T_5646 ? {io_axi_resp_bits_data[1023:112],
                data[15:0], io_axi_resp_bits_data[95:0]} : offset == 7'hA ?
                {io_axi_resp_bits_data[1023:96], data[15:0], io_axi_resp_bits_data[79:0]} : _T_5769 ?
                {io_axi_resp_bits_data[1023:80], data[15:0], io_axi_resp_bits_data[63:0]} : offset == 7'h6
                ? {io_axi_resp_bits_data[1023:64], data[15:0], io_axi_resp_bits_data[47:0]} : _T_5642 ?
                {io_axi_resp_bits_data[1023:48], data[15:0], io_axi_resp_bits_data[31:0]} : offset == 7'h2
                ? {io_axi_resp_bits_data[1023:32], data[15:0], io_axi_resp_bits_data[15:0]} : _T_5767 ?
                {io_axi_resp_bits_data[1023:16], data[15:0]} : 1024'h0;	// Cache.scala:69:21, :123:23, :213:32, :718:{69,111}, :727:81, Cat.scala:33:92, Mux.scala:81:{58,61}
  wire [1023:0]        _T_5801 = mask == 8'h3 ? (offset == 7'h7E ? {data[15:0], io_axi_resp_bits_data[1007:0]} : _T_5702 ?
                {io_axi_resp_bits_data[1023:1008], data[15:0], io_axi_resp_bits_data[991:0]} : offset ==
                7'h7A ? {io_axi_resp_bits_data[1023:992], data[15:0], io_axi_resp_bits_data[975:0]} :
                _T_5797 ? {io_axi_resp_bits_data[1023:976], data[15:0], io_axi_resp_bits_data[959:0]} :
                offset == 7'h76 ? {io_axi_resp_bits_data[1023:960], data[15:0],
                io_axi_resp_bits_data[943:0]} : _T_5698 ? {io_axi_resp_bits_data[1023:944], data[15:0],
                io_axi_resp_bits_data[927:0]} : _T_5500) : mask == 8'hF ? (_T_5702 ? {data[31:0],
                io_axi_resp_bits_data[991:0]} : _T_5797 ? {16'h0, io_axi_resp_bits_data[1023:992],
                data[15:0], io_axi_resp_bits_data[959:0]} : _T_5698 ? {16'h0,
                io_axi_resp_bits_data[1023:960], data[15:0], io_axi_resp_bits_data[927:0]} : _T_5795 ?
                {16'h0, io_axi_resp_bits_data[1023:928], data[15:0], io_axi_resp_bits_data[895:0]} :
                _T_5694 ? {16'h0, io_axi_resp_bits_data[1023:896], data[15:0],
                io_axi_resp_bits_data[863:0]} : _T_5793 ? {16'h0, io_axi_resp_bits_data[1023:864],
                data[15:0], io_axi_resp_bits_data[831:0]} : _T_5690 ? {16'h0,
                io_axi_resp_bits_data[1023:832], data[15:0], io_axi_resp_bits_data[799:0]} : _T_5791 ?
                {16'h0, io_axi_resp_bits_data[1023:800], data[15:0], io_axi_resp_bits_data[767:0]} :
                _T_5686 ? {16'h0, io_axi_resp_bits_data[1023:768], data[15:0],
                io_axi_resp_bits_data[735:0]} : _T_5789 ? {16'h0, io_axi_resp_bits_data[1023:736],
                data[15:0], io_axi_resp_bits_data[703:0]} : _T_5682 ? {16'h0,
                io_axi_resp_bits_data[1023:704], data[15:0], io_axi_resp_bits_data[671:0]} : _T_5787 ?
                {16'h0, io_axi_resp_bits_data[1023:672], data[15:0], io_axi_resp_bits_data[639:0]} :
                _T_5678 ? {16'h0, io_axi_resp_bits_data[1023:640], data[15:0],
                io_axi_resp_bits_data[607:0]} : _T_5785 ? {16'h0, io_axi_resp_bits_data[1023:608],
                data[15:0], io_axi_resp_bits_data[575:0]} : _T_5674 ? {16'h0,
                io_axi_resp_bits_data[1023:576], data[15:0], io_axi_resp_bits_data[543:0]} : _T_5783 ?
                {16'h0, io_axi_resp_bits_data[1023:544], data[15:0], io_axi_resp_bits_data[511:0]} :
                _T_5670 ? {16'h0, io_axi_resp_bits_data[1023:512], data[15:0],
                io_axi_resp_bits_data[479:0]} : _T_5781 ? {16'h0, io_axi_resp_bits_data[1023:480],
                data[15:0], io_axi_resp_bits_data[447:0]} : _T_5666 ? {16'h0,
                io_axi_resp_bits_data[1023:448], data[15:0], io_axi_resp_bits_data[415:0]} : _T_5779 ?
                {16'h0, io_axi_resp_bits_data[1023:416], data[15:0], io_axi_resp_bits_data[383:0]} :
                _T_5662 ? {16'h0, io_axi_resp_bits_data[1023:384], data[15:0],
                io_axi_resp_bits_data[351:0]} : _T_5777 ? {16'h0, io_axi_resp_bits_data[1023:352],
                data[15:0], io_axi_resp_bits_data[319:0]} : _T_5658 ? {16'h0,
                io_axi_resp_bits_data[1023:320], data[15:0], io_axi_resp_bits_data[287:0]} : _T_5775 ?
                {16'h0, io_axi_resp_bits_data[1023:288], data[15:0], io_axi_resp_bits_data[255:0]} :
                _T_5654 ? {16'h0, io_axi_resp_bits_data[1023:256], data[15:0],
                io_axi_resp_bits_data[223:0]} : _T_5773 ? {16'h0, io_axi_resp_bits_data[1023:224],
                data[15:0], io_axi_resp_bits_data[191:0]} : _T_5650 ? {16'h0,
                io_axi_resp_bits_data[1023:192], data[15:0], io_axi_resp_bits_data[159:0]} : _T_5771 ?
                {16'h0, io_axi_resp_bits_data[1023:160], data[15:0], io_axi_resp_bits_data[127:0]} :
                _T_5646 ? {16'h0, io_axi_resp_bits_data[1023:128], data[15:0], io_axi_resp_bits_data[95:0]}
                : _T_5769 ? {16'h0, io_axi_resp_bits_data[1023:96], data[15:0],
                io_axi_resp_bits_data[63:0]} : _T_5642 ? {16'h0, io_axi_resp_bits_data[1023:64],
                data[15:0], io_axi_resp_bits_data[31:0]} : _T_5767 ? {io_axi_resp_bits_data[1023:32],
                data[31:0]} : 1024'h0) : (&mask) ? (_T_5797 ? {data, io_axi_resp_bits_data[959:0]} :
                _T_5795 ? {32'h0, io_axi_resp_bits_data[1023:960], data[31:0],
                io_axi_resp_bits_data[895:0]} : _T_5793 ? {32'h0, io_axi_resp_bits_data[1023:896],
                data[31:0], io_axi_resp_bits_data[831:0]} : _T_5791 ? {32'h0,
                io_axi_resp_bits_data[1023:832], data[31:0], io_axi_resp_bits_data[767:0]} : _T_5789 ?
                {32'h0, io_axi_resp_bits_data[1023:768], data[31:0], io_axi_resp_bits_data[703:0]} :
                _T_5787 ? {32'h0, io_axi_resp_bits_data[1023:704], data[31:0],
                io_axi_resp_bits_data[639:0]} : _T_5785 ? {32'h0, io_axi_resp_bits_data[1023:640],
                data[31:0], io_axi_resp_bits_data[575:0]} : _T_5783 ? {32'h0,
                io_axi_resp_bits_data[1023:576], data[31:0], io_axi_resp_bits_data[511:0]} : _T_5781 ?
                {32'h0, io_axi_resp_bits_data[1023:512], data[31:0], io_axi_resp_bits_data[447:0]} :
                _T_5779 ? {32'h0, io_axi_resp_bits_data[1023:448], data[31:0],
                io_axi_resp_bits_data[383:0]} : _T_5777 ? {32'h0, io_axi_resp_bits_data[1023:384],
                data[31:0], io_axi_resp_bits_data[319:0]} : _T_5775 ? {32'h0,
                io_axi_resp_bits_data[1023:320], data[31:0], io_axi_resp_bits_data[255:0]} : _T_5773 ?
                {32'h0, io_axi_resp_bits_data[1023:256], data[31:0], io_axi_resp_bits_data[191:0]} :
                _T_5771 ? {32'h0, io_axi_resp_bits_data[1023:192], data[31:0],
                io_axi_resp_bits_data[127:0]} : _T_5769 ? {32'h0, io_axi_resp_bits_data[1023:128],
                data[31:0], io_axi_resp_bits_data[63:0]} : _T_5767 ? {io_axi_resp_bits_data[1023:64], data}
                : 1024'h0) : 1024'h0;	// Cache.scala:69:21, :71:24, :123:23, :124:23, :213:32, :457:31, :470:31, :718:{69,111}, :723:35, :727:81, :736:35, :740:81, :749:35, Cat.scala:33:92, Mux.scala:81:{58,61}, :101:16
  always @(posedge clock) begin
    automatic logic _GEN_28;	// Cache.scala:67:18, :223:18, :232:35
    _GEN_28 = _T & io_cpu_req_valid & ((|io_cpu_req_bits_mask) | ~_T_3);	// <stdin>:3287:14, :10939:14, Cache.scala:67:18, :133:28, :223:18, :232:35, :234:{43,47}, :235:38, :271:38
    if (reset) begin
      state <= 3'h0;	// Cache.scala:64:24
      valid <= 32'h0;	// Cache.scala:71:24
      dirty <= 32'h0;	// Cache.scala:71:24, :72:24
      replace <= 32'h0;	// Cache.scala:71:24, :73:26
      inDataOneArray <= 1'h0;	// <stdin>:3218:10, :10870:10, Cache.scala:107:33
      addr <= 32'h0;	// Cache.scala:71:24, :122:23
      data <= 64'h0;	// Cache.scala:123:23
      mask <= 8'h0;	// Cache.scala:124:23
      inst_type <= 1'h0;	// <stdin>:3218:10, :10870:10, Cache.scala:126:28
      whitNum <= 1'h0;	// <stdin>:3218:10, :10870:10, Cache.scala:129:26
      cpu_resp_valid <= 1'h0;	// <stdin>:3218:10, :10870:10, Cache.scala:142:33
      cpu_resp_bits_data <= 64'h0;	// Cache.scala:123:23, :143:37
      axi_req_valid <= 1'h0;	// <stdin>:3218:10, :10870:10, Cache.scala:144:32
      axi_req_bits_rw <= 1'h0;	// <stdin>:3218:10, :10870:10, Cache.scala:145:34
      axi_req_bits_addr <= 32'h0;	// Cache.scala:71:24, :146:36
      axi_req_bits_mask <= 8'h0;	// Cache.scala:124:23, :148:36
    end
    else begin
      automatic logic             _GEN_29;	// Cache.scala:230:28, :232:35, :234:47
      automatic logic [7:0][2:0]  _GEN_30;	// Cache.scala:223:18, :232:35, :343:50, :377:36, :392:36, :438:19, :578:50, :609:36
      automatic logic [63:0]      _valid_T_26 = 64'h1 << _GEN_10;	// Cache.scala:296:55, :400:47, :699:42
      automatic logic [63:0]      _valid_T_19 = 64'h1 << _GEN_4 + 6'h1;	// Cache.scala:92:57, :296:55, :340:51, :632:{42,55}
      automatic logic [63:0]      _valid_T_10 = 64'h1 << _GEN_10;	// Cache.scala:296:55, :400:47, :407:42
      automatic logic [63:0]      _valid_T_3 = 64'h1 << _GEN_4 + 6'h1;	// Cache.scala:92:57, :296:55, :340:51, :398:{42,55}
      automatic logic [7:0][31:0] _GEN_31;	// Cache.scala:71:24, :223:18, :392:36
      automatic logic [63:0]      _dirty_T_42 = 64'h1 << _GEN_10;	// Cache.scala:296:55, :400:47, :700:42
      automatic logic [63:0]      _dirty_T_35 = 64'h1 << _GEN_4 + 6'h1;	// Cache.scala:92:57, :296:55, :340:51, :633:{42,55}
      automatic logic [63:0]      _dirty_T_26 = 64'h1 << _GEN_10;	// Cache.scala:296:55, :400:47, :564:38
      automatic logic [63:0]      _dirty_T_19 = 64'h1 << _GEN_4 + 6'h1;	// Cache.scala:92:57, :296:55, :340:51, :499:{38,51}
      automatic logic [63:0]      _dirty_T_10 = 64'h1 << _GEN_10;	// Cache.scala:296:55, :400:47, :408:42
      automatic logic [63:0]      _dirty_T_3 = 64'h1 << _GEN_4 + 6'h1;	// Cache.scala:92:57, :296:55, :340:51, :399:{42,55}
      automatic logic [7:0][31:0] _GEN_32;	// Cache.scala:72:24, :223:18, :392:36, :440:26
      automatic logic [7:0][31:0] _GEN_33;	// Cache.scala:73:26, :223:18, :232:35, :392:36, :440:26
      automatic logic [7:0]       _GEN_34;	// Cache.scala:107:33, :223:18, :232:35, :343:50, :377:36, :578:50, :609:36
      automatic logic [7:0][31:0] _GEN_35;	// Cache.scala:146:36, :223:18, :343:50, :377:36, :389:31, :578:50, :609:36, :622:31
      automatic logic [7:0][7:0]  _GEN_36;	// Cache.scala:148:36, :223:18, :374:31, :578:50, :607:31
      _GEN_29 = io_cpu_req_valid & ~(|io_cpu_req_bits_mask) & _T_3;	// Cache.scala:133:28, :230:28, :232:35, :234:{43,47}, :271:38
      _GEN_30 = {{io_axi_resp_valid ? 3'h0 : state}, {io_axi_resp_valid ? 3'h7 : state}, {{2'h3,
                                                ~(_T_8[0])}}, {_GEN_18 ? 3'h0 : state}, {io_axi_resp_valid ? 3'h4 : state}, {_T_2911[0] ?
                                                3'h3 : 3'h4}, {3'h0}, {io_cpu_req_valid ? ((|io_cpu_req_bits_mask) ? (_T_3 ? 3'h1 : 3'h2) :
                                                _T_3 ? 3'h0 : 3'h5) : state}};	// Cache.scala:64:24, :133:28, :223:18, :232:35, :234:{43,47}, :235:38, :236:31, :259:31, :271:38, :272:31, :322:31, :343:{23,50}, :344:23, :356:23, :377:36, :378:23, :392:36, :393:23, :438:19, :578:{23,50}, :579:23, :591:23, :609:36, :610:23, :625:36, Mux.scala:81:61
      state <= _GEN_30[state];	// Cache.scala:64:24, :223:18, :232:35, :343:50, :377:36, :392:36, :438:19, :578:50, :609:36
      _GEN_31 = {{io_axi_resp_valid ? (victim ? valid | _valid_T_3[31:0] : valid | _valid_T_10[31:0]) :
                                                valid}, {valid}, {valid}, {_T_24 | _T_2907 | _T_2913 | ~_GEN_18 ? valid : victim ? valid |
                                                _valid_T_19[31:0] : valid | _valid_T_26[31:0]}, {valid}, {valid}, {valid}, {valid}};	// Cache.scala:64:24, :71:24, :119:21, :223:18, :392:36, :397:29, :398:{27,42}, :407:{27,42}, :625:36, :631:29, :632:{27,42}, :699:{27,42}
      valid <= _GEN_31[state];	// Cache.scala:64:24, :71:24, :223:18, :392:36
      _GEN_32 = {{io_axi_resp_valid ? (victim ? ~(~dirty | _dirty_T_3[31:0]) : ~(~dirty |
                                                _dirty_T_10[31:0])) : dirty}, {dirty}, {dirty}, {_GEN_21 ? dirty : victim ? dirty |
                                                _dirty_T_35[31:0] : dirty | _dirty_T_42[31:0]}, {dirty}, {dirty}, {whitNum ? dirty |
                                                _dirty_T_19[31:0] : dirty | _dirty_T_26[31:0]}, {dirty}};	// Cache.scala:72:24, :119:21, :129:26, :223:18, :392:36, :397:29, :399:{27,42}, :408:{27,42}, :440:26, :499:{23,38}, :564:{23,38}, :631:29, :633:{27,42}, :700:{27,42}
      dirty <= _GEN_32[state];	// Cache.scala:64:24, :72:24, :223:18, :392:36, :440:26
      _GEN_33 = {{io_axi_resp_valid ? (victim ? _GEN_23 | _GEN_25 : _GEN_23 | _GEN_25) : replace},
                                                {replace}, {replace}, {_GEN_21 ? replace : victim ? _GEN_23 | _GEN_25 : _GEN_23 | _GEN_25},
                                                {replace}, {replace}, {whitNum ? _GEN_23 | _GEN_25 : _GEN_23 | _GEN_25}, {_GEN_3 ? replace
                                                : hit0 ? _GEN_23 | _GEN_25 : _GEN_23 | _GEN_25}};	// <stdin>:3287:14, :10939:14, Cache.scala:72:24, :73:26, :119:21, :129:26, :133:28, :223:18, :232:35, :234:47, :276:35, :298:{37,49}, :317:{37,49}, :392:36, :397:29, :402:{29,41}, :411:{29,41}, :440:26, :502:{25,37}, :567:{25,37}, :631:29, :636:{29,41}, :703:{29,41}
      replace <= _GEN_33[state];	// Cache.scala:64:24, :73:26, :223:18, :232:35, :392:36, :440:26
      _GEN_34 = {{inDataOneArray}, {~io_axi_resp_valid}, {_T_8[0] | inDataOneArray}, {inDataOneArray},
                                                {~io_axi_resp_valid}, {_T_2911[0] | inDataOneArray}, {inDataOneArray}, {_GEN_29}};	// Cache.scala:107:33, :223:18, :230:28, :232:35, :234:47, :343:{23,50}, :350:32, :369:28, :377:36, :380:32, :578:{23,50}, :584:32, :609:36
      inDataOneArray <= _GEN_34[state];	// Cache.scala:64:24, :107:33, :223:18, :232:35, :343:50, :377:36, :578:50, :609:36
      if (_GEN_28) begin	// Cache.scala:67:18, :223:18, :232:35
        addr <= io_cpu_req_bits_addr;	// Cache.scala:122:23
        data <= io_cpu_req_bits_data;	// Cache.scala:123:23
        mask <= io_cpu_req_bits_mask;	// Cache.scala:124:23
      end
      if (_T) begin	// Cache.scala:223:18
        inst_type <= io_cpu_req_valid & ~(|io_cpu_req_bits_mask) & io_cpu_req_bits_inst_type;	// Cache.scala:126:28, :228:23, :230:28, :232:35, :234:{43,47}, :271:38
        cpu_resp_valid <= _GEN_29;	// Cache.scala:142:33, :230:28, :232:35, :234:47
      end
      else begin	// Cache.scala:223:18
        cpu_resp_valid <= ~_T_4 & ~_T_10 & ((&state) ? io_axi_resp_valid : _T_24 | ~_T_2907 & ~_T_2913 & _T_2914 &
                                                                io_axi_resp_valid);	// Cache.scala:64:24, :75:23, :119:21, :142:33, :219:20, :223:18, :392:36, :571:28
        if (_T_4)	// Cache.scala:223:18
          axi_req_bits_rw <= ~(_T_8[0]);	// Cache.scala:145:34, :343:{23,50}, :344:23, :356:23
        else if (_T_10)	// Cache.scala:223:18
          axi_req_bits_rw <= io_axi_resp_valid;	// Cache.scala:145:34
        else	// Cache.scala:223:18
          axi_req_bits_rw <= (&state) | (_T_24 ? axi_req_bits_rw : _T_2907 ? ~(_T_2911[0]) : _T_2913 ? io_axi_resp_valid
                                                                                : _T_2914 | axi_req_bits_rw);	// Cache.scala:64:24, :145:34, :223:18, :390:29, :578:{23,50}, :588:33, :595:33, :609:36, :623:29
      end
      if (_T & io_cpu_req_valid & (|io_cpu_req_bits_mask) & _T_3)	// Cache.scala:129:26, :133:28, :223:18, :232:35, :234:43
        whitNum <= ~hit0;	// Cache.scala:129:26, :133:28, :247:35, :248:37, :253:37
      if (_T | _T_4 | _T_10 | ~((&state) & io_axi_resp_valid)) begin	// Cache.scala:64:24, :143:37, :223:18, :392:36
      end
      else if (inst_type)	// Cache.scala:64:24, :126:28, :143:37, :223:18, :392:36
        cpu_resp_bits_data <= {32'h0, _T_5702 ? DataOneArray[1023:992] : _T_5797 ? DataOneArray[991:960] : _T_5698 ?
                                                                DataOneArray[959:928] : _T_5795 ? DataOneArray[927:896] : _T_5694 ? DataOneArray[895:864] :
                                                                _T_5793 ? DataOneArray[863:832] : _T_5690 ? DataOneArray[831:800] : _T_5791 ?
                                                                DataOneArray[799:768] : _T_5686 ? DataOneArray[767:736] : _T_5789 ? DataOneArray[735:704] :
                                                                _T_5682 ? DataOneArray[703:672] : _T_5787 ? DataOneArray[671:640] : _T_5678 ?
                                                                DataOneArray[639:608] : _T_5785 ? DataOneArray[607:576] : _T_5674 ? DataOneArray[575:544] :
                                                                _T_5783 ? DataOneArray[543:512] : _T_5670 ? DataOneArray[511:480] : _T_5781 ?
                                                                DataOneArray[479:448] : _T_5666 ? DataOneArray[447:416] : _T_5779 ? DataOneArray[415:384] :
                                                                _T_5662 ? DataOneArray[383:352] : _T_5777 ? DataOneArray[351:320] : _T_5658 ?
                                                                DataOneArray[319:288] : _T_5775 ? DataOneArray[287:256] : _T_5654 ? DataOneArray[255:224] :
                                                                _T_5773 ? DataOneArray[223:192] : _T_5650 ? DataOneArray[191:160] : _T_5771 ?
                                                                DataOneArray[159:128] : _T_5646 ? DataOneArray[127:96] : _T_5769 ? DataOneArray[95:64] :
                                                                _T_5642 ? DataOneArray[63:32] : _T_5767 ? DataOneArray[31:0] : 32'h0};	// Cache.scala:71:24, :143:37, :194:40, :419:42, Mux.scala:81:{58,61}
      else if (offset[6:2] == 5'hF)	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= DataOneArray[1023:960];	// Cache.scala:143:37, :194:40, :201:44
      else if (offset[6:2] == 5'hE)	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= DataOneArray[959:896];	// Cache.scala:143:37, :194:40, :201:44
      else if (offset[6:2] == 5'hD)	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= DataOneArray[895:832];	// Cache.scala:143:37, :194:40, :201:44
      else if (offset[6:2] == 5'hC)	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= DataOneArray[831:768];	// Cache.scala:143:37, :194:40, :201:44
      else if (offset[6:2] == 5'hB)	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= DataOneArray[767:704];	// Cache.scala:143:37, :194:40, :201:44
      else if (offset[6:2] == 5'hA)	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= DataOneArray[703:640];	// Cache.scala:143:37, :194:40, :201:44
      else if (offset[6:2] == 5'h9)	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= DataOneArray[639:576];	// Cache.scala:143:37, :194:40, :201:44
      else if (offset[6:2] == 5'h8)	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= DataOneArray[575:512];	// Cache.scala:143:37, :194:40, :201:44
      else if (offset[6:2] == 5'h7)	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= DataOneArray[511:448];	// Cache.scala:143:37, :194:40, :201:44
      else if (offset[6:2] == 5'h6)	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= DataOneArray[447:384];	// Cache.scala:143:37, :194:40, :201:44
      else if (offset[6:2] == 5'h5)	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= DataOneArray[383:320];	// Cache.scala:143:37, :194:40, :201:44
      else if (offset[6:2] == 5'h4)	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= DataOneArray[319:256];	// Cache.scala:143:37, :194:40, :201:44
      else if (offset[6:2] == 5'h3)	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= DataOneArray[255:192];	// Cache.scala:143:37, :194:40, :201:44
      else if (offset[6:2] == 5'h2)	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= DataOneArray[191:128];	// Cache.scala:143:37, :194:40, :201:44
      else if (offset[6:2] == 5'h1)	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= DataOneArray[127:64];	// Cache.scala:143:37, :194:40, :201:44
      else if (|(offset[6:2]))	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= 64'h0;	// Cache.scala:123:23, :143:37
      else	// Cache.scala:64:24, :69:21, :126:28, :143:37, :197:29, :223:18, :392:36, Mux.scala:81:61
        cpu_resp_bits_data <= DataOneArray[63:0];	// Cache.scala:143:37, :194:40, :201:44
      axi_req_valid <= ~_T & (_T_4 | _T_10 | ((&state) ? ~io_axi_resp_valid : ~_T_24 & (_T_2907 | _T_2913 |
                                                _T_2914 & ~io_axi_resp_valid)));	// <stdin>:3291:18, :10943:18, Cache.scala:64:24, :75:23, :144:32, :220:19, :223:18, :343:50, :369:28, :377:36, :380:32, :392:36, :578:50, :625:36
      _GEN_35 = {{{addr[31:7], 7'h0}}, {{io_axi_resp_valid ? addr[31:7] : {_TagArray_ext_R1_data, index},
                                                7'h0}}, {{_T_8[0] ? {_TagArray_ext_R0_data, index} : addr[31:7], 7'h0}}, {{addr[31:7],
                                                7'h0}}, {{io_axi_resp_valid ? addr[31:7] : {_TagArray_ext_R3_data, index}, 7'h0}},
                                                {{_T_2911[0] ? {_TagArray_ext_R2_data, index} : addr[31:7], 7'h0}}, {axi_req_bits_addr},
                                                {axi_req_bits_addr}};	// Cache.scala:68:20, :75:23, :122:23, :146:36, :223:18, :343:{23,50}, :347:35, :359:{35,46}, :365:31, :377:36, :383:{35,46}, :389:{31,42}, :578:{23,50}, :582:35, :594:{35,46}, :600:31, :609:36, :615:{35,46}, :622:{31,42}, Cat.scala:33:92
      axi_req_bits_addr <= _GEN_35[state];	// Cache.scala:64:24, :146:36, :223:18, :343:50, :377:36, :389:31, :578:50, :609:36, :622:31
      _GEN_36 = {{axi_req_bits_mask}, {mask}, {axi_req_bits_mask}, {axi_req_bits_mask}, {mask}, {_T_2911[0]
                                                ? mask : axi_req_bits_mask}, {axi_req_bits_mask}, {axi_req_bits_mask}};	// Cache.scala:124:23, :148:36, :223:18, :374:31, :578:{23,50}, :589:35, :607:31
      axi_req_bits_mask <= _GEN_36[state];	// Cache.scala:64:24, :148:36, :223:18, :374:31, :578:50, :607:31
    end
    if (_GEN_28) begin	// Cache.scala:67:18, :223:18, :232:35
      tag <= io_cpu_req_bits_addr[31:11];	// Cache.scala:67:18, :91:82
      index <= io_cpu_req_bits_addr[10:7];	// Cache.scala:68:20, :91:43
    end
    if (_T) begin	// Cache.scala:223:18
      if (io_cpu_req_valid) begin
        if (|io_cpu_req_bits_mask) begin	// Cache.scala:234:43
          if (_T_3)	// Cache.scala:133:28
            offset <= io_cpu_req_bits_addr[6:0];	// Cache.scala:69:21, :241:55
          else	// Cache.scala:133:28
            offset <= io_cpu_req_bits_addr[6:0];	// Cache.scala:69:21, :264:55
        end
        else if (_T_3)	// Cache.scala:133:28, :234:43
          offset <= io_cpu_req_bits_addr[6:0];	// Cache.scala:69:21, :274:55
        else	// Cache.scala:133:28, :234:43
          offset <= io_cpu_req_bits_addr[6:0];	// Cache.scala:69:21, :327:55
      end
      else
        offset <= 7'h0;	// Cache.scala:69:21, Cat.scala:33:92
    end
    victim <= ~_T & (_T_4 | ~(_T_10 | (&state) | _T_24 | ~_T_2907) ? _GEN : victim);	// <stdin>:3291:18, :10943:18, Cache.scala:64:24, :75:23, :119:21, :223:18, :226:20, :341:20
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:3218:10, :10870:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:3218:10, :10870:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:3218:10, :10870:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:3218:10, :10870:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:3218:10, :10870:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:3218:10, :10870:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:3218:10, :10870:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:3218:10, :10870:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:3218:10, :10870:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:3218:10, :10870:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:3218:10, :10870:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:3218:10, :10870:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:3218:10, :10870:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:3218:10, :10870:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:3218:10, :10870:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:3218:10, :10870:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:3218:10, :10870:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:3218:10, :10870:10
        `INIT_RANDOM_PROLOG_	// <stdin>:3218:10, :10870:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:3218:10, :10870:10
        _RANDOM_0 = `RANDOM;	// <stdin>:3218:10, :10870:10
        _RANDOM_1 = `RANDOM;	// <stdin>:3218:10, :10870:10
        _RANDOM_2 = `RANDOM;	// <stdin>:3218:10, :10870:10
        _RANDOM_3 = `RANDOM;	// <stdin>:3218:10, :10870:10
        _RANDOM_4 = `RANDOM;	// <stdin>:3218:10, :10870:10
        _RANDOM_5 = `RANDOM;	// <stdin>:3218:10, :10870:10
        _RANDOM_6 = `RANDOM;	// <stdin>:3218:10, :10870:10
        _RANDOM_7 = `RANDOM;	// <stdin>:3218:10, :10870:10
        _RANDOM_8 = `RANDOM;	// <stdin>:3218:10, :10870:10
        _RANDOM_9 = `RANDOM;	// <stdin>:3218:10, :10870:10
        _RANDOM_10 = `RANDOM;	// <stdin>:3218:10, :10870:10
        _RANDOM_11 = `RANDOM;	// <stdin>:3218:10, :10870:10
        _RANDOM_12 = `RANDOM;	// <stdin>:3218:10, :10870:10
        state = _RANDOM_0[2:0];	// Cache.scala:64:24
        tag = _RANDOM_0[23:3];	// Cache.scala:64:24, :67:18
        index = _RANDOM_0[27:24];	// Cache.scala:64:24, :68:20
        offset = {_RANDOM_0[31:28], _RANDOM_1[2:0]};	// Cache.scala:64:24, :69:21
        valid = {_RANDOM_1[31:3], _RANDOM_2[2:0]};	// Cache.scala:69:21, :71:24
        dirty = {_RANDOM_2[31:3], _RANDOM_3[2:0]};	// Cache.scala:71:24, :72:24
        replace = {_RANDOM_3[31:3], _RANDOM_4[2:0]};	// Cache.scala:72:24, :73:26
        inDataOneArray = _RANDOM_4[3];	// Cache.scala:73:26, :107:33
        victim = _RANDOM_4[4];	// Cache.scala:73:26, :119:21
        addr = {_RANDOM_4[31:5], _RANDOM_5[4:0]};	// Cache.scala:73:26, :122:23
        data = {_RANDOM_5[31:5], _RANDOM_6, _RANDOM_7[4:0]};	// Cache.scala:122:23, :123:23
        mask = _RANDOM_7[12:5];	// Cache.scala:123:23, :124:23
        inst_type = _RANDOM_7[13];	// Cache.scala:123:23, :126:28
        whitNum = _RANDOM_9[14];	// Cache.scala:129:26
        cpu_resp_valid = _RANDOM_9[15];	// Cache.scala:129:26, :142:33
        cpu_resp_bits_data = {_RANDOM_9[31:16], _RANDOM_10, _RANDOM_11[15:0]};	// Cache.scala:129:26, :143:37
        axi_req_valid = _RANDOM_11[16];	// Cache.scala:143:37, :144:32
        axi_req_bits_rw = _RANDOM_11[17];	// Cache.scala:143:37, :145:34
        axi_req_bits_addr = {_RANDOM_11[31:18], _RANDOM_12[17:0]};	// Cache.scala:143:37, :146:36
        axi_req_bits_mask = _RANDOM_12[25:18];	// Cache.scala:146:36, :148:36
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:3218:10, :10870:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:3218:10, :10870:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  TagArray_combMem TagArray_ext (	// Cache.scala:75:23
    .R0_addr (_GEN_6 + _GEN_7),	// Cache.scala:340:51, :343:34, :347:61
    .R0_en   (~_T & _T_4 & _T_8[0]),	// Cache.scala:75:23, :223:18, :343:23
    .R0_clk  (clock),
    .R1_addr (_GEN_6 + _GEN_8),	// Cache.scala:340:51, :365:57
    .R1_en   (~_T & ~_T_4 & _T_10),	// Cache.scala:75:23, :223:18
    .R1_clk  (clock),
    .R2_addr (_GEN_6 + _GEN_7),	// Cache.scala:340:51, :343:34, :582:61
    .R2_en   (~_T & ~_T_4 & ~_T_10 & ~(&state) & ~_T_24 & _T_2907 & _T_2911[0]),	// <stdin>:3291:18, :10943:18, Cache.scala:64:24, :75:23, :77:32, :223:18, :578:23
    .R2_clk  (clock),
    .R3_addr (_GEN_6 + _GEN_8),	// Cache.scala:340:51, :365:57, :600:57
    .R3_en   (~_T & ~_T_4 & ~_T_10 & ~(&state) & ~_T_24 & ~_T_2907 & _T_2913),	// <stdin>:3291:18, :10943:18, Cache.scala:64:24, :75:23, :77:32, :119:21, :223:18
    .R3_clk  (clock),
    .R4_addr ({io_cpu_req_bits_addr[10:7], 1'h0}),	// <stdin>:3218:10, :10870:10, Cache.scala:91:{22,43}
    .R4_en   (1'h1),	// <stdin>:3218:10, :10870:10
    .R4_clk  (clock),
    .R5_addr ({io_cpu_req_bits_addr[10:7], 1'h0} + 5'h1),	// <stdin>:3218:10, :10870:10, Cache.scala:91:43, :92:57, Mux.scala:81:61
    .R5_en   (1'h1),	// <stdin>:3218:10, :10870:10
    .R5_clk  (clock),
    .W0_addr (_GEN_6 + 5'h1),	// Cache.scala:340:51, :404:42, Mux.scala:81:61
    .W0_en   (_GEN_12),	// Cache.scala:75:23, :223:18
    .W0_clk  (clock),
    .W0_data (tag),	// Cache.scala:67:18
    .W1_addr ({index, 1'h0}),	// <stdin>:3218:10, :10870:10, Cache.scala:68:20, :413:29
    .W1_en   (_GEN_14),	// Cache.scala:75:23, :223:18
    .W1_clk  (clock),
    .W1_data (tag),	// Cache.scala:67:18
    .W2_addr (_GEN_6 + 5'h1),	// Cache.scala:340:51, :638:42, Mux.scala:81:61
    .W2_en   (_GEN_19),	// Cache.scala:75:23, :223:18
    .W2_clk  (clock),
    .W2_data (tag),	// Cache.scala:67:18
    .W3_addr ({index, 1'h0}),	// <stdin>:3218:10, :10870:10, Cache.scala:68:20, :705:29
    .W3_en   (_GEN_26),	// Cache.scala:75:23, :223:18
    .W3_clk  (clock),
    .W3_data (tag),	// Cache.scala:67:18
    .R0_data (_TagArray_ext_R0_data),
    .R1_data (_TagArray_ext_R1_data),
    .R2_data (_TagArray_ext_R2_data),
    .R3_data (_TagArray_ext_R3_data),
    .R4_data (_TagArray_ext_R4_data),
    .R5_data (_TagArray_ext_R5_data)
  );
  DataArray_combMem DataArray_ext (	// Cache.scala:77:32
    .R0_addr (DataOneArrayAddr[4:0]),	// Cache.scala:99:35
    .R0_en   (DataOneArrayRen),	// Cache.scala:99:35
    .R0_clk  (clock),
    .W0_addr (_GEN_6 + 5'h1),	// Cache.scala:340:51, :405:43, Mux.scala:81:61
    .W0_en   (_GEN_12),	// Cache.scala:75:23, :223:18
    .W0_clk  (clock),
    .W0_data (io_axi_resp_bits_data),
    .W1_addr ({index, 1'h0}),	// <stdin>:3218:10, :10870:10, Cache.scala:68:20, :414:30
    .W1_en   (_GEN_14),	// Cache.scala:75:23, :223:18
    .W1_clk  (clock),
    .W1_data (io_axi_resp_bits_data),
    .W2_addr (_GEN_6 + 5'h1),	// Cache.scala:340:51, :441:39, Mux.scala:81:61
    .W2_en   (~_T & ~_T_4 & ~_T_10 & ~(&state) & _T_24 & whitNum),	// Cache.scala:64:24, :75:23, :77:32, :129:26, :223:18
    .W2_clk  (clock),
    .W2_data (mask == 8'h1 ? _GEN_15[offset] : _T_1465),	// Cache.scala:69:21, :124:23, :444:31, Mux.scala:81:{58,61}, :101:16
    .W3_addr ({index, 1'h0}),	// <stdin>:3218:10, :10870:10, Cache.scala:68:20, :505:26
    .W3_en   (~_T & ~_T_4 & ~_T_10 & ~(&state) & _T_24 & ~whitNum),	// Cache.scala:64:24, :75:23, :77:32, :129:26, :223:18, :440:26, :505:26
    .W3_clk  (clock),
    .W3_data (mask == 8'h1 ? _GEN_16[offset] : _T_2905),	// Cache.scala:69:21, :124:23, :444:31, :508:31, Mux.scala:81:{58,61}, :101:16
    .W4_addr (_GEN_6 + 5'h1),	// Cache.scala:340:51, :640:43, Mux.scala:81:61
    .W4_en   (_GEN_19),	// Cache.scala:75:23, :223:18
    .W4_clk  (clock),
    .W4_data (mask == 8'h1 ? _GEN_20[offset] : _T_4359),	// Cache.scala:69:21, :124:23, :444:31, :643:35, Mux.scala:81:{58,61}, :101:16
    .W5_addr ({index, 1'h0}),	// <stdin>:3218:10, :10870:10, Cache.scala:68:20, :707:30
    .W5_en   (_GEN_26),	// Cache.scala:75:23, :223:18
    .W5_clk  (clock),
    .W5_data (mask == 8'h1 ? _GEN_27[offset] : _T_5801),	// Cache.scala:69:21, :124:23, :444:31, :710:35, Mux.scala:81:{58,61}, :101:16
    .R0_data (DataOneArray)
  );
  assign io_cpu_resp_valid = cpu_resp_valid;	// <stdin>:3218:10, :10870:10, Cache.scala:142:33
  assign io_cpu_resp_bits_data = inDataOneArray ? (inst_type ? {32'h0, _T_5702 ? DataOneArray[1023:992] : _T_5797 ?
                DataOneArray[991:960] : _T_5698 ? DataOneArray[959:928] : _T_5795 ? DataOneArray[927:896] :
                _T_5694 ? DataOneArray[895:864] : _T_5793 ? DataOneArray[863:832] : _T_5690 ?
                DataOneArray[831:800] : _T_5791 ? DataOneArray[799:768] : _T_5686 ? DataOneArray[767:736] :
                _T_5789 ? DataOneArray[735:704] : _T_5682 ? DataOneArray[703:672] : _T_5787 ?
                DataOneArray[671:640] : _T_5678 ? DataOneArray[639:608] : _T_5785 ? DataOneArray[607:576] :
                _T_5674 ? DataOneArray[575:544] : _T_5783 ? DataOneArray[543:512] : _T_5670 ?
                DataOneArray[511:480] : _T_5781 ? DataOneArray[479:448] : _T_5666 ? DataOneArray[447:416] :
                _T_5779 ? DataOneArray[415:384] : _T_5662 ? DataOneArray[383:352] : _T_5777 ?
                DataOneArray[351:320] : _T_5658 ? DataOneArray[319:288] : _T_5775 ? DataOneArray[287:256] :
                _T_5654 ? DataOneArray[255:224] : _T_5773 ? DataOneArray[223:192] : _T_5650 ?
                DataOneArray[191:160] : _T_5771 ? DataOneArray[159:128] : _T_5646 ? DataOneArray[127:96] :
                _T_5769 ? DataOneArray[95:64] : _T_5642 ? DataOneArray[63:32] : _T_5767 ?
                DataOneArray[31:0] : 32'h0} : offset[6:2] == 5'hF ? DataOneArray[1023:960] : offset[6:2] ==
                5'hE ? DataOneArray[959:896] : offset[6:2] == 5'hD ? DataOneArray[895:832] : offset[6:2] ==
                5'hC ? DataOneArray[831:768] : offset[6:2] == 5'hB ? DataOneArray[767:704] : offset[6:2] ==
                5'hA ? DataOneArray[703:640] : offset[6:2] == 5'h9 ? DataOneArray[639:576] : offset[6:2] ==
                5'h8 ? DataOneArray[575:512] : offset[6:2] == 5'h7 ? DataOneArray[511:448] : offset[6:2] ==
                5'h6 ? DataOneArray[447:384] : offset[6:2] == 5'h5 ? DataOneArray[383:320] : offset[6:2] ==
                5'h4 ? DataOneArray[319:256] : offset[6:2] == 5'h3 ? DataOneArray[255:192] : offset[6:2] ==
                5'h2 ? DataOneArray[191:128] : offset[6:2] == 5'h1 ? DataOneArray[127:64] :
                (|(offset[6:2])) ? 64'h0 : DataOneArray[63:0]) : cpu_resp_bits_data;	// <stdin>:3218:10, :10870:10, Cache.scala:69:21, :71:24, :107:33, :123:23, :126:28, :143:37, :153:33, :154:12, :194:40, :197:29, :201:44, Mux.scala:81:{58,61}
  assign io_axi_req_valid = axi_req_valid;	// <stdin>:3218:10, :10870:10, Cache.scala:144:32
  assign io_axi_req_bits_rw = axi_req_bits_rw;	// <stdin>:3218:10, :10870:10, Cache.scala:145:34
  assign io_axi_req_bits_addr = axi_req_bits_addr;	// <stdin>:3218:10, :10870:10, Cache.scala:146:36
  assign io_axi_req_bits_data = inDataOneArray ? DataOneArray : 1024'h0;	// <stdin>:3218:10, :10870:10, Cache.scala:107:33, :194:40, :213:32
  assign io_axi_req_bits_mask = axi_req_bits_mask;	// <stdin>:3218:10, :10870:10, Cache.scala:148:36
  assign io_fccache_req = io_cpu_req_valid;	// <stdin>:3218:10, :10870:10
  assign io_fccache_state = state;	// <stdin>:3218:10, :10870:10, Cache.scala:64:24
  assign io_fccache_mask = io_cpu_req_bits_mask;	// <stdin>:3218:10, :10870:10
  assign io_fccache_hit = _T_3;	// <stdin>:3218:10, :10870:10, Cache.scala:133:28
  assign io_fccache_cpu_valid = cpu_resp_valid;	// <stdin>:3218:10, :10870:10, Cache.scala:142:33
  assign io_fccache_axi_valid = io_axi_resp_valid;	// <stdin>:3218:10, :10870:10
endmodule

module IoforMem(	// <stdin>:18522:10
  input           clock,
                  reset,
                  io_axi_resp_valid,
  input  [1023:0] io_axi_resp_bits_data,
  input  [31:0]   io_excute_waddr,
                  io_excute_raddr,
  input  [63:0]   io_excute_wdata,
  input  [7:0]    io_excute_wmask,
  input           io_excute_load,
                  io_excute_store,
                  io_fc_stall,
  output          io_axi_req_valid,
                  io_axi_req_bits_rw,
  output [31:0]   io_axi_req_bits_addr,
  output [1023:0] io_axi_req_bits_data,
  output [7:0]    io_axi_req_bits_mask,
  output          io_mem_data_valid,
  output [63:0]   io_mem_data_bits,
  output          io_fc_req,
  output [1:0]    io_fc_state);

  reg  [1:0]  state;	// IoforMem.scala:47:24
  reg         axi_req_valid;	// IoforMem.scala:50:32
  reg         axi_req_bits_rw;	// IoforMem.scala:51:34
  reg  [31:0] axi_req_bits_addr;	// IoforMem.scala:52:36
  reg  [63:0] axi_req_bits_data;	// IoforMem.scala:53:36
  reg  [7:0]  axi_req_bits_mask;	// IoforMem.scala:54:36
  reg         mem_data_valid;	// IoforMem.scala:56:33
  reg  [63:0] mem_data_bits;	// IoforMem.scala:57:32
  wire        _T_1 = io_excute_load | io_excute_store;	// IoforMem.scala:69:34
  wire [31:0] _axi_req_bits_addr_T = io_excute_waddr | io_excute_raddr;	// IoforMem.scala:69:74
  wire        _T = state == 2'h0;	// IoforMem.scala:47:24, :74:18
  wire        _T_5 = state == 2'h1;	// IoforMem.scala:47:24, :74:18, :79:23
  always @(posedge clock) begin
    if (reset) begin
      state <= 2'h0;	// IoforMem.scala:47:24
      axi_req_valid <= 1'h0;	// IoforMem.scala:50:32
      axi_req_bits_rw <= 1'h0;	// IoforMem.scala:50:32, :51:34
      axi_req_bits_addr <= 32'h0;	// IoforMem.scala:52:36
      axi_req_bits_data <= 64'h0;	// IoforMem.scala:53:36
      axi_req_bits_mask <= 8'h0;	// IoforMem.scala:54:36
      mem_data_valid <= 1'h0;	// IoforMem.scala:50:32, :56:33
      mem_data_bits <= 64'h0;	// IoforMem.scala:53:36, :57:32
    end
    else begin
      automatic logic _T_4;	// IoforMem.scala:78:54
      automatic logic _GEN = _T_5 & io_axi_resp_valid;	// IoforMem.scala:56:33, :74:18, :91:36
      _T_4 = _T_1 & _axi_req_bits_addr_T > 32'h9FFFFFFF;	// IoforMem.scala:69:{34,74,93}, :78:{54,94}
      if (_T) begin	// IoforMem.scala:74:18
        if (_T_4)	// IoforMem.scala:78:54
          state <= 2'h1;	// IoforMem.scala:47:24, :79:23
        axi_req_valid <= _T_4 | axi_req_valid;	// IoforMem.scala:50:32, :78:{54,113}, :81:31
      end
      else begin	// IoforMem.scala:74:18
        if (_T_5) begin	// IoforMem.scala:74:18
          if (io_axi_resp_valid)
            state <= {io_fc_stall, 1'h0};	// IoforMem.scala:47:24, :50:32, :97:34, :98:27, :102:27
        end
        else if (state != 2'h2 | io_fc_stall) begin	// IoforMem.scala:47:24, :74:18, :98:27, :108:31
        end
        else	// IoforMem.scala:47:24, :74:18, :98:27, :108:31
          state <= 2'h0;	// IoforMem.scala:47:24
        axi_req_valid <= (~_T_5 | ~io_axi_resp_valid | ~io_fc_stall) & axi_req_valid;	// IoforMem.scala:50:32, :59:22, :74:18, :91:36, :92:34, :97:34, :100:35
      end
      if (_T & _T_4) begin	// IoforMem.scala:52:36, :74:18, :78:{54,113}
        axi_req_bits_rw <= io_excute_load;	// IoforMem.scala:51:34
        axi_req_bits_addr <= _axi_req_bits_addr_T;	// IoforMem.scala:52:36, :69:74
        axi_req_bits_data <= io_excute_wdata;	// IoforMem.scala:53:36
        axi_req_bits_mask <= io_excute_wmask;	// IoforMem.scala:54:36
      end
      mem_data_valid <= ~_T & (_GEN | mem_data_valid);	// IoforMem.scala:56:33, :74:18, :76:28, :91:36
      if (_T | ~_GEN) begin	// IoforMem.scala:56:33, :57:32, :74:18, :91:36
      end
      else	// IoforMem.scala:56:33, :57:32, :74:18, :91:36
        mem_data_bits <= io_axi_resp_bits_data[63:0];	// IoforMem.scala:57:32, :95:31
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:18522:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:18522:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:18522:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:18522:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:18522:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:18522:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:18522:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:18522:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:18522:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:18522:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:18522:10
        `INIT_RANDOM_PROLOG_	// <stdin>:18522:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:18522:10
        _RANDOM_0 = `RANDOM;	// <stdin>:18522:10
        _RANDOM_1 = `RANDOM;	// <stdin>:18522:10
        _RANDOM_2 = `RANDOM;	// <stdin>:18522:10
        _RANDOM_3 = `RANDOM;	// <stdin>:18522:10
        _RANDOM_4 = `RANDOM;	// <stdin>:18522:10
        _RANDOM_5 = `RANDOM;	// <stdin>:18522:10
        state = _RANDOM_0[1:0];	// IoforMem.scala:47:24
        axi_req_valid = _RANDOM_0[2];	// IoforMem.scala:47:24, :50:32
        axi_req_bits_rw = _RANDOM_0[3];	// IoforMem.scala:47:24, :51:34
        axi_req_bits_addr = {_RANDOM_0[31:4], _RANDOM_1[3:0]};	// IoforMem.scala:47:24, :52:36
        axi_req_bits_data = {_RANDOM_1[31:4], _RANDOM_2, _RANDOM_3[3:0]};	// IoforMem.scala:52:36, :53:36
        axi_req_bits_mask = _RANDOM_3[11:4];	// IoforMem.scala:53:36, :54:36
        mem_data_valid = _RANDOM_3[12];	// IoforMem.scala:53:36, :56:33
        mem_data_bits = {_RANDOM_3[31:13], _RANDOM_4, _RANDOM_5[12:0]};	// IoforMem.scala:53:36, :57:32
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:18522:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:18522:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_axi_req_valid = (_T | ~_T_5 | ~io_axi_resp_valid) & axi_req_valid;	// <stdin>:18522:10, IoforMem.scala:50:32, :59:22, :74:18, :91:36, :92:34
  assign io_axi_req_bits_rw = axi_req_bits_rw;	// <stdin>:18522:10, IoforMem.scala:51:34
  assign io_axi_req_bits_addr = axi_req_bits_addr;	// <stdin>:18522:10, IoforMem.scala:52:36
  assign io_axi_req_bits_data = {960'h0, axi_req_bits_data};	// <stdin>:18522:10, IoforMem.scala:53:36, :61:26
  assign io_axi_req_bits_mask = axi_req_bits_mask;	// <stdin>:18522:10, IoforMem.scala:54:36
  assign io_mem_data_valid = mem_data_valid;	// <stdin>:18522:10, IoforMem.scala:56:33
  assign io_mem_data_bits = mem_data_bits;	// <stdin>:18522:10, IoforMem.scala:57:32
  assign io_fc_req = _T_1 & _axi_req_bits_addr_T > 32'h9FFFFFFF;	// <stdin>:18522:10, IoforMem.scala:69:{34,53,74,93}
  assign io_fc_state = state;	// <stdin>:18522:10, IoforMem.scala:47:24
endmodule

// external module DebugInterface

// external module Interact

module Core(	// <stdin>:18622:10
  input         clock,
                reset,
                io_AXI_Interface_aw_ready,
                io_AXI_Interface_w_ready,
                io_AXI_Interface_b_valid,
                io_AXI_Interface_ar_ready,
                io_AXI_Interface_r_valid,
  input  [63:0] io_AXI_Interface_r_bits_data,
  input         io_AXI_Interface_r_bits_last,
  output        io_AXI_Interface_aw_valid,
  output [31:0] io_AXI_Interface_aw_bits_addr,
  output [7:0]  io_AXI_Interface_aw_bits_len,
  output        io_AXI_Interface_w_valid,
  output [63:0] io_AXI_Interface_w_bits_data,
  output [7:0]  io_AXI_Interface_w_bits_strb,
  output        io_AXI_Interface_w_bits_last,
                io_AXI_Interface_ar_valid,
  output [31:0] io_AXI_Interface_ar_bits_addr,
  output [7:0]  io_AXI_Interface_ar_bits_len);

  wire          _ioformem_io_axi_req_valid;	// Core.scala:108:26
  wire          _ioformem_io_axi_req_bits_rw;	// Core.scala:108:26
  wire [31:0]   _ioformem_io_axi_req_bits_addr;	// Core.scala:108:26
  wire [1023:0] _ioformem_io_axi_req_bits_data;	// Core.scala:108:26
  wire [7:0]    _ioformem_io_axi_req_bits_mask;	// Core.scala:108:26
  wire          _ioformem_io_mem_data_valid;	// Core.scala:108:26
  wire [63:0]   _ioformem_io_mem_data_bits;	// Core.scala:108:26
  wire          _ioformem_io_fc_req;	// Core.scala:108:26
  wire [1:0]    _ioformem_io_fc_state;	// Core.scala:108:26
  wire          _Dcache_io_cpu_resp_valid;	// Core.scala:105:24
  wire [63:0]   _Dcache_io_cpu_resp_bits_data;	// Core.scala:105:24
  wire          _Dcache_io_axi_req_valid;	// Core.scala:105:24
  wire          _Dcache_io_axi_req_bits_rw;	// Core.scala:105:24
  wire [31:0]   _Dcache_io_axi_req_bits_addr;	// Core.scala:105:24
  wire [1023:0] _Dcache_io_axi_req_bits_data;	// Core.scala:105:24
  wire [7:0]    _Dcache_io_axi_req_bits_mask;	// Core.scala:105:24
  wire          _Dcache_io_fccache_req;	// Core.scala:105:24
  wire [2:0]    _Dcache_io_fccache_state;	// Core.scala:105:24
  wire [7:0]    _Dcache_io_fccache_mask;	// Core.scala:105:24
  wire          _Dcache_io_fccache_hit;	// Core.scala:105:24
  wire          _Dcache_io_fccache_cpu_valid;	// Core.scala:105:24
  wire          _Dcache_io_fccache_axi_valid;	// Core.scala:105:24
  wire          _Icache_io_cpu_resp_valid;	// Core.scala:104:24
  wire [63:0]   _Icache_io_cpu_resp_bits_data;	// Core.scala:104:24
  wire          _Icache_io_axi_req_valid;	// Core.scala:104:24
  wire          _Icache_io_axi_req_bits_rw;	// Core.scala:104:24
  wire [31:0]   _Icache_io_axi_req_bits_addr;	// Core.scala:104:24
  wire [1023:0] _Icache_io_axi_req_bits_data;	// Core.scala:104:24
  wire [7:0]    _Icache_io_axi_req_bits_mask;	// Core.scala:104:24
  wire          _Icache_io_fccache_req;	// Core.scala:104:24
  wire [2:0]    _Icache_io_fccache_state;	// Core.scala:104:24
  wire [7:0]    _Icache_io_fccache_mask;	// Core.scala:104:24
  wire          _Icache_io_fccache_hit;	// Core.scala:104:24
  wire          _Icache_io_fccache_cpu_valid;	// Core.scala:104:24
  wire          _Icache_io_fccache_axi_valid;	// Core.scala:104:24
  wire          _arbitor_io_master0_resp_valid;	// Core.scala:101:25
  wire [1023:0] _arbitor_io_master0_resp_bits_data;	// Core.scala:101:25
  wire          _arbitor_io_master1_resp_valid;	// Core.scala:101:25
  wire [1023:0] _arbitor_io_master1_resp_bits_data;	// Core.scala:101:25
  wire          _arbitor_io_master2_resp_valid;	// Core.scala:101:25
  wire [1023:0] _arbitor_io_master2_resp_bits_data;	// Core.scala:101:25
  wire [11:0]   _trap_io_csrtr_rd;	// Core.scala:98:22
  wire          _trap_io_csrtr_csr_wen;	// Core.scala:98:22
  wire [63:0]   _trap_io_csrtr_csr_wdata;	// Core.scala:98:22
  wire          _trap_io_fctr_pop_NOP;	// Core.scala:98:22
  wire [2:0]    _trap_io_fctr_trap_state;	// Core.scala:98:22
  wire          _trap_io_fctr_jump_flag;	// Core.scala:98:22
  wire [31:0]   _trap_io_fctr_jump_pc;	// Core.scala:98:22
  wire [63:0]   _csrs_io_CSRDe_csr_rdata;	// Core.scala:95:22
  wire [63:0]   _csrs_io_CSRTr_MTVEC;	// Core.scala:95:22
  wire [63:0]   _csrs_io_CSRTr_MCAUSE;	// Core.scala:95:22
  wire [63:0]   _csrs_io_CSRTr_MEPC;	// Core.scala:95:22
  wire [63:0]   _csrs_io_CSRTr_MIE;	// Core.scala:95:22
  wire [63:0]   _csrs_io_CSRTr_MIP;	// Core.scala:95:22
  wire [63:0]   _csrs_io_CSRTr_MSTATUS;	// Core.scala:95:22
  wire          _fc_io_fcfe_jump_flag;	// Core.scala:92:20
  wire [31:0]   _fc_io_fcfe_jump_pc;	// Core.scala:92:20
  wire          _fc_io_fcfe_flush;	// Core.scala:92:20
  wire          _fc_io_fcfe_stall;	// Core.scala:92:20
  wire          _fc_io_fcde_flush;	// Core.scala:92:20
  wire          _fc_io_fcde_stall;	// Core.scala:92:20
  wire          _fc_io_fcex_stall;	// Core.scala:92:20
  wire          _fc_io_fcmem_stall;	// Core.scala:92:20
  wire          _fc_io_fcwb_stall;	// Core.scala:92:20
  wire          _fc_io_fcio_stall;	// Core.scala:92:20
  wire          _fc_io_sdb_stall;	// Core.scala:92:20
  wire [63:0]   _regfile_io_RfDe_reg1_rdata;	// Core.scala:89:25
  wire [63:0]   _regfile_io_RfDe_reg2_rdata;	// Core.scala:89:25
  wire          _fw_io_fwde_fw_sel1;	// Core.scala:86:20
  wire          _fw_io_fwde_fw_sel2;	// Core.scala:86:20
  wire [63:0]   _fw_io_fwde_fw_data1;	// Core.scala:86:20
  wire [63:0]   _fw_io_fwde_fw_data2;	// Core.scala:86:20
  wire          _fw_io_fwde_csr_fw_sel;	// Core.scala:86:20
  wire [63:0]   _fw_io_fwde_csr_fw_data;	// Core.scala:86:20
  wire          _clint_io_clmem_Clrvalue_valid;	// Core.scala:83:23
  wire [63:0]   _clint_io_clmem_Clrvalue_bits;	// Core.scala:83:23
  wire          _clint_io_timer_int;	// Core.scala:83:23
  wire [4:0]    _wb_io_rfio_rd;	// Core.scala:30:20
  wire          _wb_io_rfio_reg_wen;	// Core.scala:30:20
  wire [63:0]   _wb_io_rfio_reg_wdata;	// Core.scala:30:20
  wire [4:0]    _wb_io_fwwb_reg_waddr;	// Core.scala:30:20
  wire [63:0]   _wb_io_fwwb_reg_wdata;	// Core.scala:30:20
  wire          _wb_io_fwwb_reg_we;	// Core.scala:30:20
  wire [63:0]   _wb_io_fwwb_csr_wdata;	// Core.scala:30:20
  wire          _wb_io_fwwb_csr_wen;	// Core.scala:30:20
  wire [11:0]   _wb_io_fwwb_csr_waddr;	// Core.scala:30:20
  wire [11:0]   _wb_io_csrs_rd;	// Core.scala:30:20
  wire          _wb_io_csrs_csr_wen;	// Core.scala:30:20
  wire [63:0]   _wb_io_csrs_csr_wdata;	// Core.scala:30:20
  wire [63:0]   _mem_io_mwio_reg_wdata;	// Core.scala:29:21
  wire [4:0]    _mem_io_mwio_reg_waddr;	// Core.scala:29:21
  wire [1:0]    _mem_io_mwio_wb_type;	// Core.scala:29:21
  wire [63:0]   _mem_io_mwio_csr_wdata;	// Core.scala:29:21
  wire          _mem_io_mwio_csr_wen;	// Core.scala:29:21
  wire [11:0]   _mem_io_mwio_csr_waddr;	// Core.scala:29:21
  wire          _mem_io_mwio_has_inst;	// Core.scala:29:21
  wire [4:0]    _mem_io_fwmem_reg_waddr;	// Core.scala:29:21
  wire [63:0]   _mem_io_fwmem_reg_wdata;	// Core.scala:29:21
  wire          _mem_io_fwmem_reg_we;	// Core.scala:29:21
  wire [63:0]   _mem_io_fwmem_csr_wdata;	// Core.scala:29:21
  wire          _mem_io_fwmem_csr_wen;	// Core.scala:29:21
  wire [11:0]   _mem_io_fwmem_csr_waddr;	// Core.scala:29:21
  wire [63:0]   _excute_io_emio_reg_wdata;	// Core.scala:27:24
  wire [4:0]    _excute_io_emio_reg_waddr;	// Core.scala:27:24
  wire [1:0]    _excute_io_emio_wb_type;	// Core.scala:27:24
  wire [2:0]    _excute_io_emio_ld_type;	// Core.scala:27:24
  wire [2:0]    _excute_io_emio_ld_addr_lowbit;	// Core.scala:27:24
  wire [63:0]   _excute_io_emio_csr_wdata;	// Core.scala:27:24
  wire          _excute_io_emio_csr_wen;	// Core.scala:27:24
  wire [11:0]   _excute_io_emio_csr_waddr;	// Core.scala:27:24
  wire          _excute_io_emio_has_inst;	// Core.scala:27:24
  wire          _excute_io_fcex_jump_flag;	// Core.scala:27:24
  wire [31:0]   _excute_io_fcex_jump_pc;	// Core.scala:27:24
  wire          _excute_io_fcex_mul_div;	// Core.scala:27:24
  wire          _excute_io_fcex_mul_div_valid;	// Core.scala:27:24
  wire [63:0]   _excute_io_raddr;	// Core.scala:27:24
  wire [63:0]   _excute_io_waddr;	// Core.scala:27:24
  wire [63:0]   _excute_io_wdata;	// Core.scala:27:24
  wire [7:0]    _excute_io_wmask;	// Core.scala:27:24
  wire          _excute_io_cl_type;	// Core.scala:27:24
  wire [4:0]    _excute_io_fwex_reg_waddr;	// Core.scala:27:24
  wire [63:0]   _excute_io_fwex_reg_wdata;	// Core.scala:27:24
  wire          _excute_io_fwex_reg_we;	// Core.scala:27:24
  wire [63:0]   _excute_io_fwex_csr_wdata;	// Core.scala:27:24
  wire          _excute_io_fwex_csr_wen;	// Core.scala:27:24
  wire [11:0]   _excute_io_fwex_csr_waddr;	// Core.scala:27:24
  wire          _excute_io_clex_valid;	// Core.scala:27:24
  wire [2:0]    _excute_io_clex_ld_type;	// Core.scala:27:24
  wire [63:0]   _excute_io_clex_raddr;	// Core.scala:27:24
  wire [2:0]    _excute_io_clex_sd_type;	// Core.scala:27:24
  wire [63:0]   _excute_io_clex_waddr;	// Core.scala:27:24
  wire [7:0]    _excute_io_clex_wmask;	// Core.scala:27:24
  wire [63:0]   _excute_io_clex_wdata;	// Core.scala:27:24
  wire [4:0]    _decode_io_rfio_reg1_raddr;	// Core.scala:26:24
  wire [4:0]    _decode_io_rfio_reg2_raddr;	// Core.scala:26:24
  wire [63:0]   _decode_io_deio_op_a;	// Core.scala:26:24
  wire [63:0]   _decode_io_deio_op_b;	// Core.scala:26:24
  wire [4:0]    _decode_io_deio_reg_waddr;	// Core.scala:26:24
  wire          _decode_io_deio_branch_type;	// Core.scala:26:24
  wire [63:0]   _decode_io_deio_branch_addr;	// Core.scala:26:24
  wire [5:0]    _decode_io_deio_alu_op;	// Core.scala:26:24
  wire [5:0]    _decode_io_deio_shamt;	// Core.scala:26:24
  wire [1:0]    _decode_io_deio_wb_type;	// Core.scala:26:24
  wire [2:0]    _decode_io_deio_sd_type;	// Core.scala:26:24
  wire [63:0]   _decode_io_deio_reg2_rdata;	// Core.scala:26:24
  wire [2:0]    _decode_io_deio_ld_type;	// Core.scala:26:24
  wire [63:0]   _decode_io_deio_csr_t;	// Core.scala:26:24
  wire [11:0]   _decode_io_deio_csr_waddr;	// Core.scala:26:24
  wire          _decode_io_deio_csr_wen;	// Core.scala:26:24
  wire          _decode_io_deio_has_inst;	// Core.scala:26:24
  wire          _decode_io_jump_flag;	// Core.scala:26:24
  wire [31:0]   _decode_io_jump_pc;	// Core.scala:26:24
  wire          _decode_io_load_use;	// Core.scala:26:24
  wire [4:0]    _decode_io_fwde_reg1_raddr;	// Core.scala:26:24
  wire [4:0]    _decode_io_fwde_reg2_raddr;	// Core.scala:26:24
  wire [11:0]   _decode_io_fwde_csr_raddr;	// Core.scala:26:24
  wire [11:0]   _decode_io_csrs_csr_raddr;	// Core.scala:26:24
  wire [31:0]   _fetch_io_fdio_pc;	// Core.scala:25:23
  wire          _fetch_io_pc_valid;	// Core.scala:25:23
  wire [31:0]   _fetch_io_pc_bits;	// Core.scala:25:23
  reg  [31:0]   fdreg_pc;	// Core.scala:33:24
  reg  [63:0]   dereg_op_a;	// Core.scala:39:24
  reg  [63:0]   dereg_op_b;	// Core.scala:39:24
  reg  [4:0]    dereg_reg_waddr;	// Core.scala:39:24
  reg           dereg_branch_type;	// Core.scala:39:24
  reg  [63:0]   dereg_branch_addr;	// Core.scala:39:24
  reg  [5:0]    dereg_alu_op;	// Core.scala:39:24
  reg  [5:0]    dereg_shamt;	// Core.scala:39:24
  reg  [1:0]    dereg_wb_type;	// Core.scala:39:24
  reg  [2:0]    dereg_sd_type;	// Core.scala:39:24
  reg  [63:0]   dereg_reg2_rdata;	// Core.scala:39:24
  reg  [2:0]    dereg_ld_type;	// Core.scala:39:24
  reg  [63:0]   dereg_csr_t;	// Core.scala:39:24
  reg  [11:0]   dereg_csr_waddr;	// Core.scala:39:24
  reg           dereg_csr_wen;	// Core.scala:39:24
  reg           dereg_has_inst;	// Core.scala:39:24
  reg  [63:0]   emreg_reg_wdata;	// Core.scala:57:24
  reg  [4:0]    emreg_reg_waddr;	// Core.scala:57:24
  reg  [1:0]    emreg_wb_type;	// Core.scala:57:24
  reg  [2:0]    emreg_ld_type;	// Core.scala:57:24
  reg  [2:0]    emreg_ld_addr_lowbit;	// Core.scala:57:24
  reg  [63:0]   emreg_csr_wdata;	// Core.scala:57:24
  reg           emreg_csr_wen;	// Core.scala:57:24
  reg  [11:0]   emreg_csr_waddr;	// Core.scala:57:24
  reg           emreg_has_inst;	// Core.scala:57:24
  reg  [63:0]   mwreg_reg_wdata;	// Core.scala:71:24
  reg  [4:0]    mwreg_reg_waddr;	// Core.scala:71:24
  reg  [1:0]    mwreg_wb_type;	// Core.scala:71:24
  reg  [63:0]   mwreg_csr_wdata;	// Core.scala:71:24
  reg           mwreg_csr_wen;	// Core.scala:71:24
  reg  [11:0]   mwreg_csr_waddr;	// Core.scala:71:24
  reg           mwreg_has_inst;	// Core.scala:71:24
  wire [31:0]   _GEN = _Icache_io_cpu_resp_valid ? _Icache_io_cpu_resp_bits_data[31:0] : 32'h13;	// Core.scala:104:24, :416:24
  wire [63:0]   _DI_io_mem_addr_T = _excute_io_waddr | _excute_io_raddr;	// Core.scala:27:24, :455:93
  always @(posedge clock) begin
    if (reset) begin
      fdreg_pc <= 32'h80000000;	// <stdin>:18643:23, Core.scala:33:24
      dereg_op_a <= 64'h0;	// Core.scala:39:24, :432:36
      dereg_op_b <= 64'h0;	// Core.scala:39:24, :432:36
      dereg_reg_waddr <= 5'h0;	// <stdin>:18659:27, Core.scala:39:24
      dereg_branch_type <= 1'h0;	// <stdin>:18622:10, Core.scala:39:24
      dereg_branch_addr <= 64'h0;	// Core.scala:39:24, :432:36
      dereg_alu_op <= 6'h3F;	// <stdin>:18656:27, Core.scala:39:24
      dereg_shamt <= 6'h0;	// <stdin>:18655:23, Core.scala:39:24
      dereg_wb_type <= 2'h0;	// <stdin>:18654:25, Core.scala:39:24
      dereg_sd_type <= 3'h0;	// <stdin>:18622:10, Core.scala:39:24
      dereg_reg2_rdata <= 64'h0;	// Core.scala:39:24, :432:36
      dereg_ld_type <= 3'h0;	// <stdin>:18622:10, Core.scala:39:24
      dereg_csr_t <= 64'h0;	// Core.scala:39:24, :432:36
      dereg_csr_waddr <= 12'h0;	// <stdin>:18649:27, Core.scala:39:24
      dereg_csr_wen <= 1'h0;	// <stdin>:18622:10, Core.scala:39:24
      emreg_reg_wdata <= 64'h0;	// Core.scala:57:24, :432:36
      emreg_reg_waddr <= 5'h0;	// <stdin>:18659:27, Core.scala:57:24
      emreg_wb_type <= 2'h0;	// <stdin>:18654:25, Core.scala:57:24
      emreg_ld_type <= 3'h0;	// <stdin>:18622:10, Core.scala:57:24
      emreg_ld_addr_lowbit <= 3'h0;	// <stdin>:18622:10, Core.scala:57:24
      emreg_csr_wdata <= 64'h0;	// Core.scala:57:24, :432:36
      emreg_csr_wen <= 1'h0;	// <stdin>:18622:10, Core.scala:57:24
      emreg_csr_waddr <= 12'h0;	// <stdin>:18649:27, Core.scala:57:24
      mwreg_reg_wdata <= 64'h0;	// Core.scala:71:24, :432:36
      mwreg_reg_waddr <= 5'h0;	// <stdin>:18659:27, Core.scala:71:24
      mwreg_wb_type <= 2'h0;	// <stdin>:18654:25, Core.scala:71:24
      mwreg_csr_wdata <= 64'h0;	// Core.scala:71:24, :432:36
      mwreg_csr_wen <= 1'h0;	// <stdin>:18622:10, Core.scala:71:24
      mwreg_csr_waddr <= 12'h0;	// <stdin>:18649:27, Core.scala:71:24
    end
    else begin
      fdreg_pc <= _fetch_io_fdio_pc;	// Core.scala:25:23, :33:24
      if (_fc_io_fcde_stall) begin	// Core.scala:92:20
      end
      else begin	// Core.scala:92:20
        if (_fc_io_fcde_flush) begin	// Core.scala:92:20
          dereg_op_a <= 64'h0;	// Core.scala:39:24, :432:36
          dereg_op_b <= 64'h0;	// Core.scala:39:24, :432:36
          dereg_reg_waddr <= 5'h0;	// <stdin>:18659:27, Core.scala:39:24
          dereg_branch_addr <= 64'h0;	// Core.scala:39:24, :432:36
          dereg_alu_op <= 6'h0;	// <stdin>:18655:23, Core.scala:39:24
          dereg_shamt <= 6'h0;	// <stdin>:18655:23, Core.scala:39:24
          dereg_wb_type <= 2'h0;	// <stdin>:18654:25, Core.scala:39:24
          dereg_sd_type <= 3'h0;	// <stdin>:18622:10, Core.scala:39:24
          dereg_reg2_rdata <= 64'h0;	// Core.scala:39:24, :432:36
          dereg_ld_type <= 3'h0;	// <stdin>:18622:10, Core.scala:39:24
          dereg_csr_t <= 64'h0;	// Core.scala:39:24, :432:36
          dereg_csr_waddr <= 12'h0;	// <stdin>:18649:27, Core.scala:39:24
        end
        else begin	// Core.scala:92:20
          dereg_op_a <= _decode_io_deio_op_a;	// Core.scala:26:24, :39:24
          dereg_op_b <= _decode_io_deio_op_b;	// Core.scala:26:24, :39:24
          dereg_reg_waddr <= _decode_io_deio_reg_waddr;	// Core.scala:26:24, :39:24
          dereg_branch_addr <= _decode_io_deio_branch_addr;	// Core.scala:26:24, :39:24
          dereg_alu_op <= _decode_io_deio_alu_op;	// Core.scala:26:24, :39:24
          dereg_shamt <= _decode_io_deio_shamt;	// Core.scala:26:24, :39:24
          dereg_wb_type <= _decode_io_deio_wb_type;	// Core.scala:26:24, :39:24
          dereg_sd_type <= _decode_io_deio_sd_type;	// Core.scala:26:24, :39:24
          dereg_reg2_rdata <= _decode_io_deio_reg2_rdata;	// Core.scala:26:24, :39:24
          dereg_ld_type <= _decode_io_deio_ld_type;	// Core.scala:26:24, :39:24
          dereg_csr_t <= _decode_io_deio_csr_t;	// Core.scala:26:24, :39:24
          dereg_csr_waddr <= _decode_io_deio_csr_waddr;	// Core.scala:26:24, :39:24
        end
        dereg_branch_type <= ~_fc_io_fcde_flush & _decode_io_deio_branch_type;	// Core.scala:26:24, :39:24, :92:20, Mux.scala:101:16
        dereg_csr_wen <= ~_fc_io_fcde_flush & _decode_io_deio_csr_wen;	// Core.scala:26:24, :39:24, :92:20, Mux.scala:101:16
      end
      if (_fc_io_fcex_stall) begin	// Core.scala:92:20
      end
      else begin	// Core.scala:92:20
        emreg_reg_wdata <= _excute_io_emio_reg_wdata;	// Core.scala:27:24, :57:24
        emreg_reg_waddr <= _excute_io_emio_reg_waddr;	// Core.scala:27:24, :57:24
        emreg_wb_type <= _excute_io_emio_wb_type;	// Core.scala:27:24, :57:24
        emreg_ld_type <= _excute_io_emio_ld_type;	// Core.scala:27:24, :57:24
        emreg_ld_addr_lowbit <= _excute_io_emio_ld_addr_lowbit;	// Core.scala:27:24, :57:24
        emreg_csr_wdata <= _excute_io_emio_csr_wdata;	// Core.scala:27:24, :57:24
        emreg_csr_wen <= _excute_io_emio_csr_wen;	// Core.scala:27:24, :57:24
        emreg_csr_waddr <= _excute_io_emio_csr_waddr;	// Core.scala:27:24, :57:24
      end
      if (_fc_io_fcmem_stall) begin	// Core.scala:92:20
      end
      else begin	// Core.scala:92:20
        mwreg_reg_wdata <= _mem_io_mwio_reg_wdata;	// Core.scala:29:21, :71:24
        mwreg_reg_waddr <= _mem_io_mwio_reg_waddr;	// Core.scala:29:21, :71:24
        mwreg_wb_type <= _mem_io_mwio_wb_type;	// Core.scala:29:21, :71:24
        mwreg_csr_wdata <= _mem_io_mwio_csr_wdata;	// Core.scala:29:21, :71:24
        mwreg_csr_wen <= _mem_io_mwio_csr_wen;	// Core.scala:29:21, :71:24
        mwreg_csr_waddr <= _mem_io_mwio_csr_waddr;	// Core.scala:29:21, :71:24
      end
    end
    if (_fc_io_fcde_stall) begin	// Core.scala:92:20
    end
    else	// Core.scala:92:20
      dereg_has_inst <= ~_fc_io_fcde_flush & _decode_io_deio_has_inst;	// Core.scala:26:24, :39:24, :92:20, Mux.scala:101:16
    if (_fc_io_fcex_stall) begin	// Core.scala:92:20
    end
    else	// Core.scala:92:20
      emreg_has_inst <= _excute_io_emio_has_inst;	// Core.scala:27:24, :57:24
    if (_fc_io_fcmem_stall) begin	// Core.scala:92:20
    end
    else	// Core.scala:92:20
      mwreg_has_inst <= _mem_io_mwio_has_inst;	// Core.scala:29:21, :71:24
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:18622:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:18622:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:18622:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_14;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_15;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_16;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_17;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_18;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_19;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_20;	// <stdin>:18622:10
      automatic logic [31:0] _RANDOM_21;	// <stdin>:18622:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:18622:10
        `INIT_RANDOM_PROLOG_	// <stdin>:18622:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:18622:10
        _RANDOM_0 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_1 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_2 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_3 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_4 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_5 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_6 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_7 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_8 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_9 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_10 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_11 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_12 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_13 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_14 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_15 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_16 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_17 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_18 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_19 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_20 = `RANDOM;	// <stdin>:18622:10
        _RANDOM_21 = `RANDOM;	// <stdin>:18622:10
        fdreg_pc = _RANDOM_0;	// Core.scala:33:24
        dereg_op_a = {_RANDOM_1, _RANDOM_2};	// Core.scala:39:24
        dereg_op_b = {_RANDOM_3, _RANDOM_4};	// Core.scala:39:24
        dereg_reg_waddr = _RANDOM_5[4:0];	// Core.scala:39:24
        dereg_branch_type = _RANDOM_5[5];	// Core.scala:39:24
        dereg_branch_addr = {_RANDOM_5[31:6], _RANDOM_6, _RANDOM_7[5:0]};	// Core.scala:39:24
        dereg_alu_op = _RANDOM_7[11:6];	// Core.scala:39:24
        dereg_shamt = _RANDOM_7[17:12];	// Core.scala:39:24
        dereg_wb_type = _RANDOM_7[19:18];	// Core.scala:39:24
        dereg_sd_type = _RANDOM_7[22:20];	// Core.scala:39:24
        dereg_reg2_rdata = {_RANDOM_7[31:23], _RANDOM_8, _RANDOM_9[22:0]};	// Core.scala:39:24
        dereg_ld_type = _RANDOM_9[25:23];	// Core.scala:39:24
        dereg_csr_t = {_RANDOM_9[31:26], _RANDOM_10, _RANDOM_11[25:0]};	// Core.scala:39:24
        dereg_csr_waddr = {_RANDOM_11[31:26], _RANDOM_12[5:0]};	// Core.scala:39:24
        dereg_csr_wen = _RANDOM_12[6];	// Core.scala:39:24
        dereg_has_inst = _RANDOM_12[7];	// Core.scala:39:24
        emreg_reg_wdata = {_RANDOM_12[31:8], _RANDOM_13, _RANDOM_14[7:0]};	// Core.scala:39:24, :57:24
        emreg_reg_waddr = _RANDOM_14[12:8];	// Core.scala:57:24
        emreg_wb_type = _RANDOM_14[14:13];	// Core.scala:57:24
        emreg_ld_type = _RANDOM_14[17:15];	// Core.scala:57:24
        emreg_ld_addr_lowbit = _RANDOM_14[20:18];	// Core.scala:57:24
        emreg_csr_wdata = {_RANDOM_14[31:21], _RANDOM_15, _RANDOM_16[20:0]};	// Core.scala:57:24
        emreg_csr_wen = _RANDOM_16[21];	// Core.scala:57:24
        emreg_csr_waddr = {_RANDOM_16[31:22], _RANDOM_17[1:0]};	// Core.scala:57:24
        emreg_has_inst = _RANDOM_17[2];	// Core.scala:57:24
        mwreg_reg_wdata = {_RANDOM_17[31:3], _RANDOM_18, _RANDOM_19[2:0]};	// Core.scala:57:24, :71:24
        mwreg_reg_waddr = _RANDOM_19[7:3];	// Core.scala:71:24
        mwreg_wb_type = _RANDOM_19[9:8];	// Core.scala:71:24
        mwreg_csr_wdata = {_RANDOM_19[31:10], _RANDOM_20, _RANDOM_21[9:0]};	// Core.scala:71:24
        mwreg_csr_wen = _RANDOM_21[10];	// Core.scala:71:24
        mwreg_csr_waddr = _RANDOM_21[22:11];	// Core.scala:71:24
        mwreg_has_inst = _RANDOM_21[23];	// Core.scala:71:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:18622:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:18622:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Fetch fetch (	// Core.scala:25:23
    .clock             (clock),
    .reset             (reset),
    .io_fcfe_jump_flag (_fc_io_fcfe_jump_flag),	// Core.scala:92:20
    .io_fcfe_jump_pc   (_fc_io_fcfe_jump_pc),	// Core.scala:92:20
    .io_fcfe_flush     (_fc_io_fcfe_flush),	// Core.scala:92:20
    .io_fcfe_stall     (_fc_io_fcfe_stall),	// Core.scala:92:20
    .io_fdio_pc        (_fetch_io_fdio_pc),
    .io_pc_valid       (_fetch_io_pc_valid),
    .io_pc_bits        (_fetch_io_pc_bits)
  );
  Decode decode (	// Core.scala:26:24
    .clock               (clock),
    .reset               (reset),
    .io_inst_valid       (_Icache_io_cpu_resp_valid),	// Core.scala:104:24
    .io_inst_bits_data   (_Icache_io_cpu_resp_bits_data),	// Core.scala:104:24
    .io_fdio_pc          (fdreg_pc),	// Core.scala:33:24
    .io_rfio_reg1_rdata  (_regfile_io_RfDe_reg1_rdata),	// Core.scala:89:25
    .io_rfio_reg2_rdata  (_regfile_io_RfDe_reg2_rdata),	// Core.scala:89:25
    .io_branch           (_excute_io_fcex_jump_flag),	// Core.scala:27:24
    .io_stall            (_fc_io_fcde_stall),	// Core.scala:92:20
    .io_flush            (_fc_io_fcde_flush),	// Core.scala:92:20
    .io_fwde_fw_sel1     (_fw_io_fwde_fw_sel1),	// Core.scala:86:20
    .io_fwde_fw_sel2     (_fw_io_fwde_fw_sel2),	// Core.scala:86:20
    .io_fwde_fw_data1    (_fw_io_fwde_fw_data1),	// Core.scala:86:20
    .io_fwde_fw_data2    (_fw_io_fwde_fw_data2),	// Core.scala:86:20
    .io_fwde_csr_fw_sel  (_fw_io_fwde_csr_fw_sel),	// Core.scala:86:20
    .io_fwde_csr_fw_data (_fw_io_fwde_csr_fw_data),	// Core.scala:86:20
    .io_csrs_csr_rdata   (_csrs_io_CSRDe_csr_rdata),	// Core.scala:95:22
    .io_rfio_reg1_raddr  (_decode_io_rfio_reg1_raddr),
    .io_rfio_reg2_raddr  (_decode_io_rfio_reg2_raddr),
    .io_deio_op_a        (_decode_io_deio_op_a),
    .io_deio_op_b        (_decode_io_deio_op_b),
    .io_deio_reg_waddr   (_decode_io_deio_reg_waddr),
    .io_deio_branch_type (_decode_io_deio_branch_type),
    .io_deio_branch_addr (_decode_io_deio_branch_addr),
    .io_deio_alu_op      (_decode_io_deio_alu_op),
    .io_deio_shamt       (_decode_io_deio_shamt),
    .io_deio_wb_type     (_decode_io_deio_wb_type),
    .io_deio_sd_type     (_decode_io_deio_sd_type),
    .io_deio_reg2_rdata  (_decode_io_deio_reg2_rdata),
    .io_deio_ld_type     (_decode_io_deio_ld_type),
    .io_deio_csr_t       (_decode_io_deio_csr_t),
    .io_deio_csr_waddr   (_decode_io_deio_csr_waddr),
    .io_deio_csr_wen     (_decode_io_deio_csr_wen),
    .io_deio_has_inst    (_decode_io_deio_has_inst),
    .io_jump_flag        (_decode_io_jump_flag),
    .io_jump_pc          (_decode_io_jump_pc),
    .io_load_use         (_decode_io_load_use),
    .io_fwde_reg1_raddr  (_decode_io_fwde_reg1_raddr),
    .io_fwde_reg2_raddr  (_decode_io_fwde_reg2_raddr),
    .io_fwde_csr_raddr   (_decode_io_fwde_csr_raddr),
    .io_csrs_csr_raddr   (_decode_io_csrs_csr_raddr)
  );
  Excute excute (	// Core.scala:27:24
    .clock                  (clock),
    .reset                  (reset),
    .io_deio_op_a           (dereg_op_a),	// Core.scala:39:24
    .io_deio_op_b           (dereg_op_b),	// Core.scala:39:24
    .io_deio_reg_waddr      (dereg_reg_waddr),	// Core.scala:39:24
    .io_deio_branch_type    (dereg_branch_type),	// Core.scala:39:24
    .io_deio_branch_addr    (dereg_branch_addr),	// Core.scala:39:24
    .io_deio_alu_op         (dereg_alu_op),	// Core.scala:39:24
    .io_deio_shamt          (dereg_shamt),	// Core.scala:39:24
    .io_deio_wb_type        (dereg_wb_type),	// Core.scala:39:24
    .io_deio_sd_type        (dereg_sd_type),	// Core.scala:39:24
    .io_deio_reg2_rdata     (dereg_reg2_rdata),	// Core.scala:39:24
    .io_deio_ld_type        (dereg_ld_type),	// Core.scala:39:24
    .io_deio_csr_t          (dereg_csr_t),	// Core.scala:39:24
    .io_deio_csr_waddr      (dereg_csr_waddr),	// Core.scala:39:24
    .io_deio_csr_wen        (dereg_csr_wen),	// Core.scala:39:24
    .io_deio_has_inst       (dereg_has_inst),	// Core.scala:39:24
    .io_fcex_stall          (_fc_io_fcex_stall),	// Core.scala:92:20
    .io_emio_reg_wdata      (_excute_io_emio_reg_wdata),
    .io_emio_reg_waddr      (_excute_io_emio_reg_waddr),
    .io_emio_wb_type        (_excute_io_emio_wb_type),
    .io_emio_ld_type        (_excute_io_emio_ld_type),
    .io_emio_ld_addr_lowbit (_excute_io_emio_ld_addr_lowbit),
    .io_emio_csr_wdata      (_excute_io_emio_csr_wdata),
    .io_emio_csr_wen        (_excute_io_emio_csr_wen),
    .io_emio_csr_waddr      (_excute_io_emio_csr_waddr),
    .io_emio_has_inst       (_excute_io_emio_has_inst),
    .io_fcex_jump_flag      (_excute_io_fcex_jump_flag),
    .io_fcex_jump_pc        (_excute_io_fcex_jump_pc),
    .io_fcex_mul_div        (_excute_io_fcex_mul_div),
    .io_fcex_mul_div_valid  (_excute_io_fcex_mul_div_valid),
    .io_raddr               (_excute_io_raddr),
    .io_waddr               (_excute_io_waddr),
    .io_wdata               (_excute_io_wdata),
    .io_wmask               (_excute_io_wmask),
    .io_cl_type             (_excute_io_cl_type),
    .io_fwex_reg_waddr      (_excute_io_fwex_reg_waddr),
    .io_fwex_reg_wdata      (_excute_io_fwex_reg_wdata),
    .io_fwex_reg_we         (_excute_io_fwex_reg_we),
    .io_fwex_csr_wdata      (_excute_io_fwex_csr_wdata),
    .io_fwex_csr_wen        (_excute_io_fwex_csr_wen),
    .io_fwex_csr_waddr      (_excute_io_fwex_csr_waddr),
    .io_clex_valid          (_excute_io_clex_valid),
    .io_clex_ld_type        (_excute_io_clex_ld_type),
    .io_clex_raddr          (_excute_io_clex_raddr),
    .io_clex_sd_type        (_excute_io_clex_sd_type),
    .io_clex_waddr          (_excute_io_clex_waddr),
    .io_clex_wmask          (_excute_io_clex_wmask),
    .io_clex_wdata          (_excute_io_clex_wdata)
  );
  Mem mem (	// Core.scala:29:21
    .clock                   (clock),
    .reset                   (reset),
    .io_emio_reg_wdata       (emreg_reg_wdata),	// Core.scala:57:24
    .io_emio_reg_waddr       (emreg_reg_waddr),	// Core.scala:57:24
    .io_emio_wb_type         (emreg_wb_type),	// Core.scala:57:24
    .io_emio_ld_type         (emreg_ld_type),	// Core.scala:57:24
    .io_emio_ld_addr_lowbit  (emreg_ld_addr_lowbit),	// Core.scala:57:24
    .io_emio_csr_wdata       (emreg_csr_wdata),	// Core.scala:57:24
    .io_emio_csr_wen         (emreg_csr_wen),	// Core.scala:57:24
    .io_emio_csr_waddr       (emreg_csr_waddr),	// Core.scala:57:24
    .io_emio_has_inst        (emreg_has_inst),	// Core.scala:57:24
    .io_rdata_valid          (_Dcache_io_cpu_resp_valid),	// Core.scala:105:24
    .io_rdata_bits_data      (_Dcache_io_cpu_resp_bits_data),	// Core.scala:105:24
    .io_rdata_io_data_valid  (_ioformem_io_mem_data_valid),	// Core.scala:108:26
    .io_rdata_io_data_bits   (_ioformem_io_mem_data_bits),	// Core.scala:108:26
    .io_clmem_Clrvalue_valid (_clint_io_clmem_Clrvalue_valid),	// Core.scala:83:23
    .io_clmem_Clrvalue_bits  (_clint_io_clmem_Clrvalue_bits),	// Core.scala:83:23
    .io_stall                (_fc_io_fcmem_stall),	// Core.scala:92:20
    .io_mwio_reg_wdata       (_mem_io_mwio_reg_wdata),
    .io_mwio_reg_waddr       (_mem_io_mwio_reg_waddr),
    .io_mwio_wb_type         (_mem_io_mwio_wb_type),
    .io_mwio_csr_wdata       (_mem_io_mwio_csr_wdata),
    .io_mwio_csr_wen         (_mem_io_mwio_csr_wen),
    .io_mwio_csr_waddr       (_mem_io_mwio_csr_waddr),
    .io_mwio_has_inst        (_mem_io_mwio_has_inst),
    .io_fwmem_reg_waddr      (_mem_io_fwmem_reg_waddr),
    .io_fwmem_reg_wdata      (_mem_io_fwmem_reg_wdata),
    .io_fwmem_reg_we         (_mem_io_fwmem_reg_we),
    .io_fwmem_csr_wdata      (_mem_io_fwmem_csr_wdata),
    .io_fwmem_csr_wen        (_mem_io_fwmem_csr_wen),
    .io_fwmem_csr_waddr      (_mem_io_fwmem_csr_waddr)
  );
  Wb wb (	// Core.scala:30:20
    .io_mwio_reg_wdata (mwreg_reg_wdata),	// Core.scala:71:24
    .io_mwio_reg_waddr (mwreg_reg_waddr),	// Core.scala:71:24
    .io_mwio_wb_type   (mwreg_wb_type),	// Core.scala:71:24
    .io_mwio_csr_wdata (mwreg_csr_wdata),	// Core.scala:71:24
    .io_mwio_csr_wen   (mwreg_csr_wen),	// Core.scala:71:24
    .io_mwio_csr_waddr (mwreg_csr_waddr),	// Core.scala:71:24
    .io_mwio_has_inst  (mwreg_has_inst),	// Core.scala:71:24
    .io_stall          (_fc_io_fcwb_stall),	// Core.scala:92:20
    .io_rfio_rd        (_wb_io_rfio_rd),
    .io_rfio_reg_wen   (_wb_io_rfio_reg_wen),
    .io_rfio_reg_wdata (_wb_io_rfio_reg_wdata),
    .io_fwwb_reg_waddr (_wb_io_fwwb_reg_waddr),
    .io_fwwb_reg_wdata (_wb_io_fwwb_reg_wdata),
    .io_fwwb_reg_we    (_wb_io_fwwb_reg_we),
    .io_fwwb_csr_wdata (_wb_io_fwwb_csr_wdata),
    .io_fwwb_csr_wen   (_wb_io_fwwb_csr_wen),
    .io_fwwb_csr_waddr (_wb_io_fwwb_csr_waddr),
    .io_csrs_rd        (_wb_io_csrs_rd),
    .io_csrs_csr_wen   (_wb_io_csrs_csr_wen),
    .io_csrs_csr_wdata (_wb_io_csrs_csr_wdata)
  );
  CLINT clint (	// Core.scala:83:23
    .clock                   (clock),
    .reset                   (reset),
    .io_clex_valid           (_excute_io_clex_valid),	// Core.scala:27:24
    .io_clex_ld_type         (_excute_io_clex_ld_type),	// Core.scala:27:24
    .io_clex_raddr           (_excute_io_clex_raddr),	// Core.scala:27:24
    .io_clex_sd_type         (_excute_io_clex_sd_type),	// Core.scala:27:24
    .io_clex_waddr           (_excute_io_clex_waddr),	// Core.scala:27:24
    .io_clex_wmask           (_excute_io_clex_wmask),	// Core.scala:27:24
    .io_clex_wdata           (_excute_io_clex_wdata),	// Core.scala:27:24
    .io_clmem_Clrvalue_valid (_clint_io_clmem_Clrvalue_valid),
    .io_clmem_Clrvalue_bits  (_clint_io_clmem_Clrvalue_bits),
    .io_timer_int            (_clint_io_timer_int)
  );
  Forward fw (	// Core.scala:86:20
    .io_fwde_reg1_raddr  (_decode_io_fwde_reg1_raddr),	// Core.scala:26:24
    .io_fwde_reg2_raddr  (_decode_io_fwde_reg2_raddr),	// Core.scala:26:24
    .io_fwde_csr_raddr   (_decode_io_fwde_csr_raddr),	// Core.scala:26:24
    .io_fwex_reg_waddr   (_excute_io_fwex_reg_waddr),	// Core.scala:27:24
    .io_fwex_reg_wdata   (_excute_io_fwex_reg_wdata),	// Core.scala:27:24
    .io_fwex_reg_we      (_excute_io_fwex_reg_we),	// Core.scala:27:24
    .io_fwex_csr_wdata   (_excute_io_fwex_csr_wdata),	// Core.scala:27:24
    .io_fwex_csr_wen     (_excute_io_fwex_csr_wen),	// Core.scala:27:24
    .io_fwex_csr_waddr   (_excute_io_fwex_csr_waddr),	// Core.scala:27:24
    .io_fwmem_reg_waddr  (_mem_io_fwmem_reg_waddr),	// Core.scala:29:21
    .io_fwmem_reg_wdata  (_mem_io_fwmem_reg_wdata),	// Core.scala:29:21
    .io_fwmem_reg_we     (_mem_io_fwmem_reg_we),	// Core.scala:29:21
    .io_fwmem_csr_wdata  (_mem_io_fwmem_csr_wdata),	// Core.scala:29:21
    .io_fwmem_csr_wen    (_mem_io_fwmem_csr_wen),	// Core.scala:29:21
    .io_fwmem_csr_waddr  (_mem_io_fwmem_csr_waddr),	// Core.scala:29:21
    .io_fwwb_reg_waddr   (_wb_io_fwwb_reg_waddr),	// Core.scala:30:20
    .io_fwwb_reg_wdata   (_wb_io_fwwb_reg_wdata),	// Core.scala:30:20
    .io_fwwb_reg_we      (_wb_io_fwwb_reg_we),	// Core.scala:30:20
    .io_fwwb_csr_wdata   (_wb_io_fwwb_csr_wdata),	// Core.scala:30:20
    .io_fwwb_csr_wen     (_wb_io_fwwb_csr_wen),	// Core.scala:30:20
    .io_fwwb_csr_waddr   (_wb_io_fwwb_csr_waddr),	// Core.scala:30:20
    .io_fwde_fw_sel1     (_fw_io_fwde_fw_sel1),
    .io_fwde_fw_sel2     (_fw_io_fwde_fw_sel2),
    .io_fwde_fw_data1    (_fw_io_fwde_fw_data1),
    .io_fwde_fw_data2    (_fw_io_fwde_fw_data2),
    .io_fwde_csr_fw_sel  (_fw_io_fwde_csr_fw_sel),
    .io_fwde_csr_fw_data (_fw_io_fwde_csr_fw_data)
  );
  Regfile regfile (	// Core.scala:89:25
    .clock              (clock),
    .io_RfDe_reg1_raddr (_decode_io_rfio_reg1_raddr),	// Core.scala:26:24
    .io_RfDe_reg2_raddr (_decode_io_rfio_reg2_raddr),	// Core.scala:26:24
    .io_RfWb_rd         (_wb_io_rfio_rd),	// Core.scala:30:20
    .io_RfWb_reg_wen    (_wb_io_rfio_reg_wen),	// Core.scala:30:20
    .io_RfWb_reg_wdata  (_wb_io_rfio_reg_wdata),	// Core.scala:30:20
    .io_RfDe_reg1_rdata (_regfile_io_RfDe_reg1_rdata),
    .io_RfDe_reg2_rdata (_regfile_io_RfDe_reg2_rdata)
  );
  FlowControl fc (	// Core.scala:92:20
    .io_fcde_jump_flag     (_decode_io_jump_flag),	// Core.scala:26:24
    .io_fcde_jump_pc       (_decode_io_jump_pc),	// Core.scala:26:24
    .io_fcde_load_use      (_decode_io_load_use),	// Core.scala:26:24
    .io_fcex_jump_flag     (_excute_io_fcex_jump_flag),	// Core.scala:27:24
    .io_fcex_jump_pc       (_excute_io_fcex_jump_pc),	// Core.scala:27:24
    .io_fcex_mul_div       (_excute_io_fcex_mul_div),	// Core.scala:27:24
    .io_fcex_mul_div_valid (_excute_io_fcex_mul_div_valid),	// Core.scala:27:24
    .io_fctr_pop_NOP       (_trap_io_fctr_pop_NOP),	// Core.scala:98:22
    .io_fctr_trap_state    (_trap_io_fctr_trap_state),	// Core.scala:98:22
    .io_fctr_jump_flag     (_trap_io_fctr_jump_flag),	// Core.scala:98:22
    .io_fctr_jump_pc       (_trap_io_fctr_jump_pc),	// Core.scala:98:22
    .io_fcIcache_req       (_Icache_io_fccache_req),	// Core.scala:104:24
    .io_fcIcache_state     (_Icache_io_fccache_state),	// Core.scala:104:24
    .io_fcIcache_mask      (_Icache_io_fccache_mask),	// Core.scala:104:24
    .io_fcIcache_cpu_valid (_Icache_io_fccache_cpu_valid),	// Core.scala:104:24
    .io_fcIcache_axi_valid (_Icache_io_fccache_axi_valid),	// Core.scala:104:24
    .io_fcDcache_req       (_Dcache_io_fccache_req),	// Core.scala:105:24
    .io_fcDcache_state     (_Dcache_io_fccache_state),	// Core.scala:105:24
    .io_fcDcache_mask      (_Dcache_io_fccache_mask),	// Core.scala:105:24
    .io_fcDcache_hit       (_Dcache_io_fccache_hit),	// Core.scala:105:24
    .io_fcDcache_axi_valid (_Dcache_io_fccache_axi_valid),	// Core.scala:105:24
    .io_fcio_req           (_ioformem_io_fc_req),	// Core.scala:108:26
    .io_fcio_state         (_ioformem_io_fc_state),	// Core.scala:108:26
    .io_fcfe_jump_flag     (_fc_io_fcfe_jump_flag),
    .io_fcfe_jump_pc       (_fc_io_fcfe_jump_pc),
    .io_fcfe_flush         (_fc_io_fcfe_flush),
    .io_fcfe_stall         (_fc_io_fcfe_stall),
    .io_fcde_flush         (_fc_io_fcde_flush),
    .io_fcde_stall         (_fc_io_fcde_stall),
    .io_fcex_stall         (_fc_io_fcex_stall),
    .io_fcmem_stall        (_fc_io_fcmem_stall),
    .io_fcwb_stall         (_fc_io_fcwb_stall),
    .io_fcio_stall         (_fc_io_fcio_stall),
    .io_sdb_stall          (_fc_io_sdb_stall)
  );
  CSRs csrs (	// Core.scala:95:22
    .clock              (clock),
    .reset              (reset),
    .io_CSRDe_csr_raddr (_decode_io_csrs_csr_raddr),	// Core.scala:26:24
    .io_CSRWb_rd        (_wb_io_csrs_rd),	// Core.scala:30:20
    .io_CSRWb_csr_wen   (_wb_io_csrs_csr_wen),	// Core.scala:30:20
    .io_CSRWb_csr_wdata (_wb_io_csrs_csr_wdata),	// Core.scala:30:20
    .io_CSRTr_rd        (_trap_io_csrtr_rd),	// Core.scala:98:22
    .io_CSRTr_csr_wen   (_trap_io_csrtr_csr_wen),	// Core.scala:98:22
    .io_CSRTr_csr_wdata (_trap_io_csrtr_csr_wdata),	// Core.scala:98:22
    .io_timer_int       (_clint_io_timer_int),	// Core.scala:83:23
    .io_CSRDe_csr_rdata (_csrs_io_CSRDe_csr_rdata),
    .io_CSRTr_MTVEC     (_csrs_io_CSRTr_MTVEC),
    .io_CSRTr_MCAUSE    (_csrs_io_CSRTr_MCAUSE),
    .io_CSRTr_MEPC      (_csrs_io_CSRTr_MEPC),
    .io_CSRTr_MIE       (_csrs_io_CSRTr_MIE),
    .io_CSRTr_MIP       (_csrs_io_CSRTr_MIP),
    .io_CSRTr_MSTATUS   (_csrs_io_CSRTr_MSTATUS)
  );
  Trap trap (	// Core.scala:98:22
    .clock              (clock),
    .reset              (reset),
    .io_ex_hasinst      (dereg_has_inst),	// Core.scala:39:24
    .io_mem_hasinst     (emreg_has_inst),	// Core.scala:57:24
    .io_wb_hasinst      (mwreg_has_inst),	// Core.scala:71:24
    .io_csrtr_MTVEC     (_csrs_io_CSRTr_MTVEC),	// Core.scala:95:22
    .io_csrtr_MCAUSE    (_csrs_io_CSRTr_MCAUSE),	// Core.scala:95:22
    .io_csrtr_MEPC      (_csrs_io_CSRTr_MEPC),	// Core.scala:95:22
    .io_csrtr_MIE       (_csrs_io_CSRTr_MIE),	// Core.scala:95:22
    .io_csrtr_MIP       (_csrs_io_CSRTr_MIP),	// Core.scala:95:22
    .io_csrtr_MSTATUS   (_csrs_io_CSRTr_MSTATUS),	// Core.scala:95:22
    .io_inst            (_GEN),	// Core.scala:416:24
    .io_pc              (_fetch_io_pc_bits),	// Core.scala:25:23
    .io_csrtr_rd        (_trap_io_csrtr_rd),
    .io_csrtr_csr_wen   (_trap_io_csrtr_csr_wen),
    .io_csrtr_csr_wdata (_trap_io_csrtr_csr_wdata),
    .io_fctr_pop_NOP    (_trap_io_fctr_pop_NOP),
    .io_fctr_trap_state (_trap_io_fctr_trap_state),
    .io_fctr_jump_flag  (_trap_io_fctr_jump_flag),
    .io_fctr_jump_pc    (_trap_io_fctr_jump_pc)
  );
  AXIArbitor arbitor (	// Core.scala:101:25
    .clock                     (clock),
    .reset                     (reset),
    .io_master0_req_valid      (_ioformem_io_axi_req_valid),	// Core.scala:108:26
    .io_master0_req_bits_rw    (_ioformem_io_axi_req_bits_rw),	// Core.scala:108:26
    .io_master0_req_bits_addr  (_ioformem_io_axi_req_bits_addr),	// Core.scala:108:26
    .io_master0_req_bits_data  (_ioformem_io_axi_req_bits_data),	// Core.scala:108:26
    .io_master0_req_bits_mask  (_ioformem_io_axi_req_bits_mask),	// Core.scala:108:26
    .io_master1_req_valid      (_Dcache_io_axi_req_valid),	// Core.scala:105:24
    .io_master1_req_bits_rw    (_Dcache_io_axi_req_bits_rw),	// Core.scala:105:24
    .io_master1_req_bits_addr  (_Dcache_io_axi_req_bits_addr),	// Core.scala:105:24
    .io_master1_req_bits_data  (_Dcache_io_axi_req_bits_data),	// Core.scala:105:24
    .io_master1_req_bits_mask  (_Dcache_io_axi_req_bits_mask),	// Core.scala:105:24
    .io_master2_req_valid      (_Icache_io_axi_req_valid),	// Core.scala:104:24
    .io_master2_req_bits_rw    (_Icache_io_axi_req_bits_rw),	// Core.scala:104:24
    .io_master2_req_bits_addr  (_Icache_io_axi_req_bits_addr),	// Core.scala:104:24
    .io_master2_req_bits_data  (_Icache_io_axi_req_bits_data),	// Core.scala:104:24
    .io_master2_req_bits_mask  (_Icache_io_axi_req_bits_mask),	// Core.scala:104:24
    .io_AXI_O_aw_ready         (io_AXI_Interface_aw_ready),
    .io_AXI_O_w_ready          (io_AXI_Interface_w_ready),
    .io_AXI_O_b_valid          (io_AXI_Interface_b_valid),
    .io_AXI_O_ar_ready         (io_AXI_Interface_ar_ready),
    .io_AXI_O_r_valid          (io_AXI_Interface_r_valid),
    .io_AXI_O_r_bits_data      (io_AXI_Interface_r_bits_data),
    .io_AXI_O_r_bits_last      (io_AXI_Interface_r_bits_last),
    .io_master0_resp_valid     (_arbitor_io_master0_resp_valid),
    .io_master0_resp_bits_data (_arbitor_io_master0_resp_bits_data),
    .io_master1_resp_valid     (_arbitor_io_master1_resp_valid),
    .io_master1_resp_bits_data (_arbitor_io_master1_resp_bits_data),
    .io_master2_resp_valid     (_arbitor_io_master2_resp_valid),
    .io_master2_resp_bits_data (_arbitor_io_master2_resp_bits_data),
    .io_AXI_O_aw_valid         (io_AXI_Interface_aw_valid),
    .io_AXI_O_aw_bits_addr     (io_AXI_Interface_aw_bits_addr),
    .io_AXI_O_aw_bits_len      (io_AXI_Interface_aw_bits_len),
    .io_AXI_O_w_valid          (io_AXI_Interface_w_valid),
    .io_AXI_O_w_bits_data      (io_AXI_Interface_w_bits_data),
    .io_AXI_O_w_bits_strb      (io_AXI_Interface_w_bits_strb),
    .io_AXI_O_w_bits_last      (io_AXI_Interface_w_bits_last),
    .io_AXI_O_ar_valid         (io_AXI_Interface_ar_valid),
    .io_AXI_O_ar_bits_addr     (io_AXI_Interface_ar_bits_addr),
    .io_AXI_O_ar_bits_len      (io_AXI_Interface_ar_bits_len)
  );
  Cache Icache (	// Core.scala:104:24
    .clock                     (clock),
    .reset                     (reset),
    .io_cpu_req_valid          (_fetch_io_pc_valid),	// Core.scala:25:23
    .io_cpu_req_bits_inst_type (1'h1),	// <stdin>:18622:10
    .io_cpu_req_bits_addr      (_fetch_io_pc_bits),	// Core.scala:25:23
    .io_cpu_req_bits_data      (64'h0),	// Core.scala:432:36
    .io_cpu_req_bits_mask      (8'h0),	// Core.scala:447:33
    .io_axi_resp_valid         (_arbitor_io_master2_resp_valid),	// Core.scala:101:25
    .io_axi_resp_bits_data     (_arbitor_io_master2_resp_bits_data),	// Core.scala:101:25
    .io_cpu_resp_valid         (_Icache_io_cpu_resp_valid),
    .io_cpu_resp_bits_data     (_Icache_io_cpu_resp_bits_data),
    .io_axi_req_valid          (_Icache_io_axi_req_valid),
    .io_axi_req_bits_rw        (_Icache_io_axi_req_bits_rw),
    .io_axi_req_bits_addr      (_Icache_io_axi_req_bits_addr),
    .io_axi_req_bits_data      (_Icache_io_axi_req_bits_data),
    .io_axi_req_bits_mask      (_Icache_io_axi_req_bits_mask),
    .io_fccache_req            (_Icache_io_fccache_req),
    .io_fccache_state          (_Icache_io_fccache_state),
    .io_fccache_mask           (_Icache_io_fccache_mask),
    .io_fccache_hit            (_Icache_io_fccache_hit),
    .io_fccache_cpu_valid      (_Icache_io_fccache_cpu_valid),
    .io_fccache_axi_valid      (_Icache_io_fccache_axi_valid)
  );
  Cache Dcache (	// Core.scala:105:24
    .clock                     (clock),
    .reset                     (reset),
    .io_cpu_req_valid          (((|dereg_ld_type) | (|dereg_sd_type)) & _DI_io_mem_addr_T < 64'hA0000000 &
                ~_excute_io_cl_type),	// Core.scala:27:24, :39:24, :455:{47,51,67,93,112,129,133}
    .io_cpu_req_bits_inst_type (1'h0),	// <stdin>:18622:10
    .io_cpu_req_bits_addr      (_DI_io_mem_addr_T[31:0]),	// Core.scala:455:93, :456:33
    .io_cpu_req_bits_data      (_excute_io_wdata),	// Core.scala:27:24
    .io_cpu_req_bits_mask      (_excute_io_wmask),	// Core.scala:27:24
    .io_axi_resp_valid         (_arbitor_io_master1_resp_valid),	// Core.scala:101:25
    .io_axi_resp_bits_data     (_arbitor_io_master1_resp_bits_data),	// Core.scala:101:25
    .io_cpu_resp_valid         (_Dcache_io_cpu_resp_valid),
    .io_cpu_resp_bits_data     (_Dcache_io_cpu_resp_bits_data),
    .io_axi_req_valid          (_Dcache_io_axi_req_valid),
    .io_axi_req_bits_rw        (_Dcache_io_axi_req_bits_rw),
    .io_axi_req_bits_addr      (_Dcache_io_axi_req_bits_addr),
    .io_axi_req_bits_data      (_Dcache_io_axi_req_bits_data),
    .io_axi_req_bits_mask      (_Dcache_io_axi_req_bits_mask),
    .io_fccache_req            (_Dcache_io_fccache_req),
    .io_fccache_state          (_Dcache_io_fccache_state),
    .io_fccache_mask           (_Dcache_io_fccache_mask),
    .io_fccache_hit            (_Dcache_io_fccache_hit),
    .io_fccache_cpu_valid      (_Dcache_io_fccache_cpu_valid),
    .io_fccache_axi_valid      (_Dcache_io_fccache_axi_valid)
  );
  IoforMem ioformem (	// Core.scala:108:26
    .clock                 (clock),
    .reset                 (reset),
    .io_axi_resp_valid     (_arbitor_io_master0_resp_valid),	// Core.scala:101:25
    .io_axi_resp_bits_data (_arbitor_io_master0_resp_bits_data),	// Core.scala:101:25
    .io_excute_waddr       (_excute_io_waddr[31:0]),	// Core.scala:27:24, :465:30
    .io_excute_raddr       (_excute_io_raddr[31:0]),	// Core.scala:27:24, :466:30
    .io_excute_wdata       (_excute_io_wdata),	// Core.scala:27:24
    .io_excute_wmask       (_excute_io_wmask),	// Core.scala:27:24
    .io_excute_load        (|dereg_ld_type),	// Core.scala:39:24, :469:55
    .io_excute_store       (|dereg_sd_type),	// Core.scala:39:24, :470:56
    .io_fc_stall           (_fc_io_fcio_stall),	// Core.scala:92:20
    .io_axi_req_valid      (_ioformem_io_axi_req_valid),
    .io_axi_req_bits_rw    (_ioformem_io_axi_req_bits_rw),
    .io_axi_req_bits_addr  (_ioformem_io_axi_req_bits_addr),
    .io_axi_req_bits_data  (_ioformem_io_axi_req_bits_data),
    .io_axi_req_bits_mask  (_ioformem_io_axi_req_bits_mask),
    .io_mem_data_valid     (_ioformem_io_mem_data_valid),
    .io_mem_data_bits      (_ioformem_io_mem_data_bits),
    .io_fc_req             (_ioformem_io_fc_req),
    .io_fc_state           (_ioformem_io_fc_state)
  );
  DebugInterface DI (	// Core.scala:485:19
    .clk        (clock),
    .rst        (reset),
    .pc         (_fetch_io_pc_bits),	// Core.scala:25:23
    .pc_req     (_fetch_io_pc_valid),	// Core.scala:25:23
    .inst       (_GEN),	// Core.scala:416:24
    .inst_valid (_Icache_io_cpu_resp_valid & ~_fc_io_fcde_flush),	// Core.scala:92:20, :104:24, :491:{50,70}
    .load_use   (_decode_io_load_use),	// Core.scala:26:24
    .op_a       (dereg_op_a),	// Core.scala:39:24
    .op_b       (dereg_op_b),	// Core.scala:39:24
    .result     (_excute_io_emio_reg_wdata),	// Core.scala:27:24
    .br_yes     (_excute_io_fcex_jump_flag),	// Core.scala:27:24
    .mem_access ((|dereg_ld_type) | (|dereg_sd_type)),	// Core.scala:39:24, :469:55, :470:56, :497:52
    .mem_addr   (_DI_io_mem_addr_T),	// Core.scala:455:93
    .rd         (_wb_io_rfio_rd),	// Core.scala:30:20
    .reg_wen    (_wb_io_rfio_reg_wen),	// Core.scala:30:20
    .reg_wdata  (_wb_io_rfio_reg_wdata),	// Core.scala:30:20
    .csr_wen    (_wb_io_csrs_csr_wen),	// Core.scala:30:20
    .csr_wdata  (_wb_io_csrs_csr_wdata),	// Core.scala:30:20
    .csr_waddr  (_wb_io_csrs_rd),	// Core.scala:30:20
    .sdb_stall  (_fc_io_sdb_stall),	// Core.scala:92:20
    .trap_state (_trap_io_fctr_trap_state)	// Core.scala:98:22
  );
  Interact interact (	// Core.scala:509:26
    .inst (_Icache_io_cpu_resp_valid & ~_fc_io_fcde_flush ? _Icache_io_cpu_resp_bits_data[31:0] :
                32'h0),	// Core.scala:92:20, :104:24, :491:70, :510:{28,54,111}
    .clk  (clock),
    .rst  (reset)
  );
endmodule

// external module Sram

module Soc(	// <stdin>:19053:10
  input clock,
        reset);

  wire        _sram_S_AXI_AWREADY;	// Soc.scala:12:22
  wire        _sram_S_AXI_WREADY;	// Soc.scala:12:22
  wire        _sram_S_AXI_BID;	// Soc.scala:12:22
  wire [1:0]  _sram_S_AXI_BRESP;	// Soc.scala:12:22
  wire        _sram_S_AXI_BVALID;	// Soc.scala:12:22
  wire        _sram_S_AXI_ARREADY;	// Soc.scala:12:22
  wire        _sram_S_AXI_RID;	// Soc.scala:12:22
  wire [63:0] _sram_S_AXI_RDATA;	// Soc.scala:12:22
  wire        _sram_S_AXI_RLAST;	// Soc.scala:12:22
  wire [1:0]  _sram_S_AXI_RRESP;	// Soc.scala:12:22
  wire        _sram_S_AXI_RVALID;	// Soc.scala:12:22
  wire        _core_io_AXI_Interface_aw_valid;	// Soc.scala:11:22
  wire [31:0] _core_io_AXI_Interface_aw_bits_addr;	// Soc.scala:11:22
  wire [7:0]  _core_io_AXI_Interface_aw_bits_len;	// Soc.scala:11:22
  wire        _core_io_AXI_Interface_w_valid;	// Soc.scala:11:22
  wire [63:0] _core_io_AXI_Interface_w_bits_data;	// Soc.scala:11:22
  wire [7:0]  _core_io_AXI_Interface_w_bits_strb;	// Soc.scala:11:22
  wire        _core_io_AXI_Interface_w_bits_last;	// Soc.scala:11:22
  wire        _core_io_AXI_Interface_ar_valid;	// Soc.scala:11:22
  wire [31:0] _core_io_AXI_Interface_ar_bits_addr;	// Soc.scala:11:22
  wire [7:0]  _core_io_AXI_Interface_ar_bits_len;	// Soc.scala:11:22
  Core core (	// Soc.scala:11:22
    .clock                         (clock),
    .reset                         (reset),
    .io_AXI_Interface_aw_ready     (_sram_S_AXI_AWREADY),	// Soc.scala:12:22
    .io_AXI_Interface_w_ready      (_sram_S_AXI_WREADY),	// Soc.scala:12:22
    .io_AXI_Interface_b_valid      (_sram_S_AXI_BVALID),	// Soc.scala:12:22
    .io_AXI_Interface_ar_ready     (_sram_S_AXI_ARREADY),	// Soc.scala:12:22
    .io_AXI_Interface_r_valid      (_sram_S_AXI_RVALID),	// Soc.scala:12:22
    .io_AXI_Interface_r_bits_data  (_sram_S_AXI_RDATA),	// Soc.scala:12:22
    .io_AXI_Interface_r_bits_last  (_sram_S_AXI_RLAST),	// Soc.scala:12:22
    .io_AXI_Interface_aw_valid     (_core_io_AXI_Interface_aw_valid),
    .io_AXI_Interface_aw_bits_addr (_core_io_AXI_Interface_aw_bits_addr),
    .io_AXI_Interface_aw_bits_len  (_core_io_AXI_Interface_aw_bits_len),
    .io_AXI_Interface_w_valid      (_core_io_AXI_Interface_w_valid),
    .io_AXI_Interface_w_bits_data  (_core_io_AXI_Interface_w_bits_data),
    .io_AXI_Interface_w_bits_strb  (_core_io_AXI_Interface_w_bits_strb),
    .io_AXI_Interface_w_bits_last  (_core_io_AXI_Interface_w_bits_last),
    .io_AXI_Interface_ar_valid     (_core_io_AXI_Interface_ar_valid),
    .io_AXI_Interface_ar_bits_addr (_core_io_AXI_Interface_ar_bits_addr),
    .io_AXI_Interface_ar_bits_len  (_core_io_AXI_Interface_ar_bits_len)
  );
  Sram sram (	// Soc.scala:12:22
    .ACLK          (clock),
    .ARESETn       (~reset),	// Soc.scala:15:13
    .S_AXI_AWID    (1'h0),	// Soc.scala:12:22
    .S_AXI_AWADDR  (_core_io_AXI_Interface_aw_bits_addr),	// Soc.scala:11:22
    .S_AXI_AWLEN   (_core_io_AXI_Interface_aw_bits_len),	// Soc.scala:11:22
    .S_AXI_AWSIZE  (3'h3),	// Soc.scala:12:22
    .S_AXI_AWBURST (2'h1),	// Soc.scala:12:22
    .S_AXI_AWLOCK  (1'h0),	// Soc.scala:12:22
    .S_AXI_AWCACHE (4'h2),	// Soc.scala:12:22
    .S_AXI_AWPROT  (3'h0),	// Soc.scala:12:22
    .S_AXI_AWVALID (_core_io_AXI_Interface_aw_valid),	// Soc.scala:11:22
    .S_AXI_WDATA   (_core_io_AXI_Interface_w_bits_data),	// Soc.scala:11:22
    .S_AXI_WSTRB   (_core_io_AXI_Interface_w_bits_strb),	// Soc.scala:11:22
    .S_AXI_WLAST   (_core_io_AXI_Interface_w_bits_last),	// Soc.scala:11:22
    .S_AXI_WVALID  (_core_io_AXI_Interface_w_valid),	// Soc.scala:11:22
    .S_AXI_BREADY  (1'h1),	// Soc.scala:12:22
    .S_AXI_ARID    (1'h0),	// Soc.scala:12:22
    .S_AXI_ARADDR  (_core_io_AXI_Interface_ar_bits_addr),	// Soc.scala:11:22
    .S_AXI_ARLEN   (_core_io_AXI_Interface_ar_bits_len),	// Soc.scala:11:22
    .S_AXI_ARSIZE  (3'h3),	// Soc.scala:12:22
    .S_AXI_ARBURST (2'h1),	// Soc.scala:12:22
    .S_AXI_ARLOCK  (1'h0),	// Soc.scala:12:22
    .S_AXI_ARCACHE (4'h2),	// Soc.scala:12:22
    .S_AXI_ARPROT  (3'h0),	// Soc.scala:12:22
    .S_AXI_ARVALID (_core_io_AXI_Interface_ar_valid),	// Soc.scala:11:22
    .S_AXI_RREADY  (1'h1),	// Soc.scala:12:22
    .S_AXI_AWREADY (_sram_S_AXI_AWREADY),
    .S_AXI_WREADY  (_sram_S_AXI_WREADY),
    .S_AXI_BID     (_sram_S_AXI_BID),
    .S_AXI_BRESP   (_sram_S_AXI_BRESP),
    .S_AXI_BVALID  (_sram_S_AXI_BVALID),
    .S_AXI_ARREADY (_sram_S_AXI_ARREADY),
    .S_AXI_RID     (_sram_S_AXI_RID),
    .S_AXI_RDATA   (_sram_S_AXI_RDATA),
    .S_AXI_RLAST   (_sram_S_AXI_RLAST),
    .S_AXI_RRESP   (_sram_S_AXI_RRESP),
    .S_AXI_RVALID  (_sram_S_AXI_RVALID)
  );
endmodule


// ----- 8< ----- FILE "rv64/./build/DebugInterface.v" ----- 8< -----



import "DPI-C" function void update_debuginfo(input reg[31:0] pc, input pc_req, input reg[31:0] inst, 
  input inst_valid, input load_use, input reg[63:0] op_a, input reg[63:0] op_b, input reg[63:0] result, 
   input br_yes, input reg mem_access, input [63:0] mem_addr,
   input reg[4:0] rd, input reg[63:0] reg_wdata,
  input reg_wen, input csr_wen, input [63:0] csr_wdata, input [11:0] csr_waddr, input sdb_stall, input reg[2:0] trap_state);

module DebugInterface(
                   input        clk,
                   input        rst,            
                   //fetch
                   input [31:0] pc,
                   input        pc_req,

                   input [31:0] inst,
                   input        inst_valid,
                   input        load_use,
                   
                   //decode
                   input [63:0] op_a,
                   input [63:0] op_b,
                   input [63:0] result,

                   //execute
                   input        br_yes,

                   input        mem_access,
                   input [63:0] mem_addr,
       

                   //wb
                   input [4:0] rd,
                   input [63:0] reg_wdata,
                   input        reg_wen,

                   input       csr_wen,
                   input [63:0] csr_wdata,
                   input [11:0]    csr_waddr,

                   input   sdb_stall,

                   input [2:0]  trap_state
);




always@(posedge clk)begin
   if(rst != 'd1)
       update_debuginfo(pc,pc_req,inst,inst_valid,load_use,op_a,op_b,result,br_yes, mem_access, mem_addr, rd,reg_wdata,reg_wen,
       csr_wen,csr_wdata,csr_waddr,sdb_stall,trap_state);
end



endmodule


    

// ----- 8< ----- FILE "rv64/./build/Interact.v" ----- 8< -----


module Interact(input [31:0] inst,
                input  clk,
                input  rst
);
   
   reg ebreak_flag;
   reg [5:0] over_count;

   always@(posedge clk)begin
       if(rst)
           ebreak_flag <= 1'b0;
       else
       if(inst == 32'b00000000000100000000000001110011)begin
           ebreak_flag <= 1'b1;
       end
   end

   always@(posedge clk)begin  //需要等前面指令执行结束，再停止程序
       if(rst)
           over_count <= 'd0;
       else begin
           if(ebreak_flag)begin
               over_count <= over_count + 1'b1;
               if(over_count == 6'd30)begin          
                   $display("ebreak!");
                   $finish;
               end
                   
           end
       end 
           
   end

   
endmodule
        

// ----- 8< ----- FILE "rv64/./build/Sram.v" ----- 8< -----


import "DPI-C" function longint pmem_read(
   input reg[31:0] raddr);

import "DPI-C" function void pmem_write(
   input reg[31:0] waddr, input reg[63:0] wdata, input byte wmask);


module Sram(
   input        ACLK,
   input        ARESETn,

   input       S_AXI_AWID,
   input [31:0] S_AXI_AWADDR,
   input [7:0] S_AXI_AWLEN,
   input [2:0] S_AXI_AWSIZE,
   input [1:0] S_AXI_AWBURST,
   input       S_AXI_AWLOCK,
   input [3:0] S_AXI_AWCACHE,
   input [2:0]  S_AXI_AWPROT,
   input        S_AXI_AWVALID,
   output       S_AXI_AWREADY,

   input [63:0] S_AXI_WDATA,
   input [7:0]  S_AXI_WSTRB,
   input        S_AXI_WLAST,
   input        S_AXI_WVALID,
   output       S_AXI_WREADY,

   output       S_AXI_BID,
   output [1:0] S_AXI_BRESP,
   output       S_AXI_BVALID,
   input        S_AXI_BREADY,

   input        S_AXI_ARID,
   input [31:0] S_AXI_ARADDR,
   input [7:0]  S_AXI_ARLEN,
   input [2:0]  S_AXI_ARSIZE,
   input [1:0]  S_AXI_ARBURST,
   input        S_AXI_ARLOCK,
   input [3:0]  S_AXI_ARCACHE,
   input [2:0]  S_AXI_ARPROT,
   input        S_AXI_ARVALID,
   output       S_AXI_ARREADY,

   output       S_AXI_RID,
   output [63:0]S_AXI_RDATA,
   output       S_AXI_RLAST,
   output [1:0] S_AXI_RRESP,
   output       S_AXI_RVALID,
   input        S_AXI_RREADY
);
//internal reg
reg     [3:0]   w_count;
reg     [3:0]   r_count;

//interface reg_def
reg     [1:0]   bresp;
reg             bvalid;

reg     [63:0]  rdata;
reg             rlast;
reg     [1:0]   rresp;
reg             rvalid;

assign S_AXI_AWREADY = 'd1;  //减少延迟

assign S_AXI_WREADY = 'd1;

assign S_AXI_BID = 'd0;
assign S_AXI_BRESP = bresp;
assign S_AXI_BVALID = bvalid;

assign S_AXI_ARREADY = 'd1;

assign S_AXI_RID = 'd0;
assign S_AXI_RDATA = rdata;
assign S_AXI_RLAST = rlast;
assign S_AXI_RRESP = rresp;
assign S_AXI_RVALID = rvalid;


//aw channel
reg [31:0] awaddr_buffer;

always@(posedge ACLK or negedge ARESETn)begin
    if(!ARESETn)
        awaddr_buffer <= 32'd0;
    else begin
        if(S_AXI_AWVALID && S_AXI_AWREADY)begin
            awaddr_buffer <= S_AXI_AWADDR;
        end
    end
end


//address selection
wire [31:0] awaddr; //True addr
assign awaddr = (S_AXI_WVALID && S_AXI_WREADY && S_AXI_AWVALID && S_AXI_AWREADY) ? S_AXI_AWADDR : awaddr_buffer;

//w channel
always@(posedge ACLK or negedge ARESETn)begin
    if(!ARESETn)begin
        w_count <= 'd0;
    end
    else begin
        if(S_AXI_WVALID && S_AXI_WREADY && S_AXI_WLAST)begin
            w_count <= 'd0;
            pmem_write(awaddr+ w_count*8, S_AXI_WDATA, S_AXI_WSTRB);
        end 
        else if(S_AXI_WVALID && S_AXI_WREADY)begin
            w_count <= w_count + 'd1;
            pmem_write(awaddr+ w_count*8, S_AXI_WDATA, S_AXI_WSTRB);  //应该用size,而不是直接8,方便
        end
        else begin 
            w_count <= w_count;
        end
    end
end

//b channel
wire need_resp;
assign need_resp = (S_AXI_WVALID && S_AXI_WREADY && S_AXI_WLAST) ? 1'd1 : 1'd0;

always@(posedge ACLK or negedge ARESETn)begin
    if(!ARESETn)
        bvalid <= 1'b0;
    else begin
        if(need_resp)begin
            bvalid <= 1'b1;
            bresp <= 2'b00;
        end
        else if(S_AXI_BVALID && S_AXI_BREADY)begin
            bvalid <= 1'b0;
        end
    end
end



//ar channel
reg [31:0] araddr;
reg need_read;

always@(posedge ACLK or negedge ARESETn)begin
    if(!ARESETn)begin
        araddr <= 32'd0;
        need_read <= 1'b0;
    end
    else begin
        if(S_AXI_ARVALID && S_AXI_ARREADY)begin
            araddr <= S_AXI_ARADDR;
            need_read <= 1'b1;
        end
        else if(S_AXI_RLAST)begin
            need_read <= 1'b0;
        end
    end
end

//r channel
always@(posedge ACLK or negedge ARESETn) begin
   if(!ARESETn)begin
       rvalid <= 1'b0;
       rdata <= 64'd0;
       rresp <= 2'd0;
       rlast <= 1'd0;
       r_count <= 'd0;
    end
    else begin
        if(need_read || (S_AXI_ARVALID && S_AXI_ARREADY)) begin //严格最少延迟
            rvalid <= 1'b1;
            rdata <= (S_AXI_ARVALID && S_AXI_ARREADY) ? pmem_read(S_AXI_ARADDR) : pmem_read(araddr+8*r_count);
            rresp <= 2'b00;
            r_count <= r_count + 1'd1;
            r_last <= (r_count == 'd14) ? 1'd1 : 1'd0;
        end
        else if(r_last)begin
            rvalid <= 1'b0;
        end
    end 
end



endmodule
    

// ----- 8< ----- FILE "firrtl_black_box_resource_files.f" ----- 8< -----


