// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_REG_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_REG_INIT
`ifdef RANDOMIZE_MEM_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_MEM_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

// VCS coverage exclude_file
module DataArray_combMem(	// Cache.scala:77:32
  input  [8:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [8:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [63:0] W0_data,
  input  [8:0]  W1_addr,
  input         W1_en,
                W1_clk,
  input  [63:0] W1_data,
  input  [8:0]  W2_addr,
  input         W2_en,
                W2_clk,
  input  [63:0] W2_data,
  input  [8:0]  W3_addr,
  input         W3_en,
                W3_clk,
  input  [63:0] W3_data,
  input  [8:0]  W4_addr,
  input         W4_en,
                W4_clk,
  input  [63:0] W4_data,
  input  [8:0]  W5_addr,
  input         W5_en,
                W5_clk,
  input  [63:0] W5_data,
  output [63:0] R0_data);

  reg [63:0] Memory[0:511];	// Cache.scala:77:32
  reg        _GEN;	// Cache.scala:77:32
  reg [8:0]  _GEN_0;	// Cache.scala:77:32
  always @(posedge R0_clk) begin	// Cache.scala:77:32
    _GEN <= R0_en;	// Cache.scala:77:32
    _GEN_0 <= R0_addr;	// Cache.scala:77:32
  end // always @(posedge)
  always @(posedge W0_clk) begin	// Cache.scala:77:32
    if (W0_en)	// Cache.scala:77:32
      Memory[W0_addr] <= W0_data;	// Cache.scala:77:32
    if (W1_en)	// Cache.scala:77:32
      Memory[W1_addr] <= W1_data;	// Cache.scala:77:32
    if (W2_en)	// Cache.scala:77:32
      Memory[W2_addr] <= W2_data;	// Cache.scala:77:32
    if (W3_en)	// Cache.scala:77:32
      Memory[W3_addr] <= W3_data;	// Cache.scala:77:32
    if (W4_en)	// Cache.scala:77:32
      Memory[W4_addr] <= W4_data;	// Cache.scala:77:32
    if (W5_en)	// Cache.scala:77:32
      Memory[W5_addr] <= W5_data;	// Cache.scala:77:32
  end // always @(posedge)
  `ifndef SYNTHESIS	// Cache.scala:77:32
    `ifdef RANDOMIZE_MEM_INIT	// Cache.scala:77:32
      integer initvar;	// Cache.scala:77:32
      reg [63:0] _RANDOM_MEM;	// Cache.scala:77:32
    `endif // RANDOMIZE_MEM_INIT
    `ifdef RANDOMIZE_REG_INIT	// Cache.scala:77:32
      reg [31:0] _RANDOM;	// Cache.scala:77:32
    `endif // RANDOMIZE_REG_INIT
    initial begin	// Cache.scala:77:32
      `INIT_RANDOM_PROLOG_	// Cache.scala:77:32
      `ifdef RANDOMIZE_MEM_INIT	// Cache.scala:77:32
        for (initvar = 0; initvar < 512; initvar = initvar + 1) begin
          _RANDOM_MEM = {{`RANDOM}, {`RANDOM}};
          Memory[initvar] = _RANDOM_MEM[63:0];
        end	// Cache.scala:77:32
      `endif // RANDOMIZE_MEM_INIT
      `ifdef RANDOMIZE_REG_INIT	// Cache.scala:77:32
        _RANDOM = {`RANDOM};	// Cache.scala:77:32
        _GEN = _RANDOM[0];	// Cache.scala:77:32
        _GEN_0 = _RANDOM[9:1];	// Cache.scala:77:32
      `endif // RANDOMIZE_REG_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign R0_data = _GEN ? Memory[_GEN_0] : 64'bx;	// Cache.scala:77:32
endmodule

// VCS coverage exclude_file
module regs_combMem(	// Regfile.scala:32:19
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [4:0]  R2_addr,
  input         R2_en,
                R2_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [63:0] W0_data,
  input  [4:0]  W1_addr,
  input         W1_en,
                W1_clk,
  input  [63:0] W1_data,
  output [63:0] R0_data,
                R1_data,
                R2_data);

  reg [63:0] Memory[0:31];	// Regfile.scala:32:19
  always @(posedge W0_clk) begin	// Regfile.scala:32:19
    if (W0_en)	// Regfile.scala:32:19
      Memory[W0_addr] <= W0_data;	// Regfile.scala:32:19
    if (W1_en)	// Regfile.scala:32:19
      Memory[W1_addr] <= W1_data;	// Regfile.scala:32:19
  end // always @(posedge)
  `ifndef SYNTHESIS	// Regfile.scala:32:19
    `ifdef RANDOMIZE_MEM_INIT	// Regfile.scala:32:19
      integer initvar;	// Regfile.scala:32:19
      reg [63:0] _RANDOM_MEM;	// Regfile.scala:32:19
    `endif // RANDOMIZE_MEM_INIT
    initial begin	// Regfile.scala:32:19
      `INIT_RANDOM_PROLOG_	// Regfile.scala:32:19
      `ifdef RANDOMIZE_MEM_INIT	// Regfile.scala:32:19
        for (initvar = 0; initvar < 32; initvar = initvar + 1) begin
          _RANDOM_MEM = {{`RANDOM}, {`RANDOM}};
          Memory[initvar] = _RANDOM_MEM[63:0];
        end	// Regfile.scala:32:19
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign R0_data = R0_en ? Memory[R0_addr] : 64'bx;	// Regfile.scala:32:19
  assign R1_data = R1_en ? Memory[R1_addr] : 64'bx;	// Regfile.scala:32:19
  assign R2_data = R2_en ? Memory[R2_addr] : 64'bx;	// Regfile.scala:32:19
endmodule

// VCS coverage exclude_file
module TagArray_combMem(	// Cache.scala:75:23
  input  [8:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [8:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [8:0]  R2_addr,
  input         R2_en,
                R2_clk,
  input  [8:0]  R3_addr,
  input         R3_en,
                R3_clk,
  input  [8:0]  R4_addr,
  input         R4_en,
                R4_clk,
  input  [8:0]  R5_addr,
  input         R5_en,
                R5_clk,
  input  [8:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [20:0] W0_data,
  input  [8:0]  W1_addr,
  input         W1_en,
                W1_clk,
  input  [20:0] W1_data,
  input  [8:0]  W2_addr,
  input         W2_en,
                W2_clk,
  input  [20:0] W2_data,
  input  [8:0]  W3_addr,
  input         W3_en,
                W3_clk,
  input  [20:0] W3_data,
  output [20:0] R0_data,
                R1_data,
                R2_data,
                R3_data,
                R4_data,
                R5_data);

  reg [20:0] Memory[0:511];	// Cache.scala:75:23
  always @(posedge W0_clk) begin	// Cache.scala:75:23
    if (W0_en)	// Cache.scala:75:23
      Memory[W0_addr] <= W0_data;	// Cache.scala:75:23
    if (W1_en)	// Cache.scala:75:23
      Memory[W1_addr] <= W1_data;	// Cache.scala:75:23
    if (W2_en)	// Cache.scala:75:23
      Memory[W2_addr] <= W2_data;	// Cache.scala:75:23
    if (W3_en)	// Cache.scala:75:23
      Memory[W3_addr] <= W3_data;	// Cache.scala:75:23
  end // always @(posedge)
  `ifndef SYNTHESIS	// Cache.scala:75:23
    `ifdef RANDOMIZE_MEM_INIT	// Cache.scala:75:23
      integer initvar;	// Cache.scala:75:23
      reg [31:0] _RANDOM_MEM;	// Cache.scala:75:23
    `endif // RANDOMIZE_MEM_INIT
    initial begin	// Cache.scala:75:23
      `INIT_RANDOM_PROLOG_	// Cache.scala:75:23
      `ifdef RANDOMIZE_MEM_INIT	// Cache.scala:75:23
        for (initvar = 0; initvar < 512; initvar = initvar + 1) begin
          _RANDOM_MEM = {`RANDOM};
          Memory[initvar] = _RANDOM_MEM[20:0];
        end	// Cache.scala:75:23
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign R0_data = R0_en ? Memory[R0_addr] : 21'bx;	// Cache.scala:75:23
  assign R1_data = R1_en ? Memory[R1_addr] : 21'bx;	// Cache.scala:75:23
  assign R2_data = R2_en ? Memory[R2_addr] : 21'bx;	// Cache.scala:75:23
  assign R3_data = R3_en ? Memory[R3_addr] : 21'bx;	// Cache.scala:75:23
  assign R4_data = R4_en ? Memory[R4_addr] : 21'bx;	// Cache.scala:75:23
  assign R5_data = R5_en ? Memory[R5_addr] : 21'bx;	// Cache.scala:75:23
endmodule

module Fetch(	// <stdin>:2:10
  input         clock,
                reset,
                io_fcfe_jump_flag,
  input  [31:0] io_fcfe_jump_pc,
  input         io_fcfe_flush,
                io_fcfe_stall,
  output [31:0] io_fdio_pc,
  output        io_pc_valid,
  output [31:0] io_pc_bits);

  reg         started;	// Fetch.scala:25:26
  reg  [31:0] pc;	// Fetch.scala:28:21
  reg  [31:0] old_pc;	// Fetch.scala:29:25
  wire        _next_pc_T_2 = io_fcfe_flush & io_fcfe_jump_flag;	// Fetch.scala:36:36
  wire [31:0] _next_pc_T_4 = io_fcfe_jump_pc + 32'h4;	// Fetch.scala:36:85
  wire [31:0] _next_pc_T_7 = pc + 32'h4;	// Fetch.scala:28:21, :36:85, :37:37
  wire [31:0] next_pc = _next_pc_T_2 ? _next_pc_T_4 : started ? _next_pc_T_7 : pc;	// Fetch.scala:25:26, :28:21, :36:{36,85}, :37:37, Mux.scala:101:16
  wire        _io_fdio_pc_T_2 = io_fcfe_flush & io_fcfe_jump_flag;	// Fetch.scala:53:36
  wire        _io_pc_bits_T_3 = pc == old_pc;	// Fetch.scala:28:21, :29:25, :54:17
  always @(posedge clock) begin
    if (reset) begin
      started <= 1'h0;	// Fetch.scala:25:26
      pc <= 32'h80000000;	// Fetch.scala:28:21
      old_pc <= 32'h0;	// Fetch.scala:29:25
    end
    else begin
      started <= 1'h1;	// Fetch.scala:25:26, :26:13
      if (io_fcfe_stall)
        pc <= old_pc;	// Fetch.scala:28:21, :29:25
      else begin
        if (_next_pc_T_2)	// Fetch.scala:36:36
          pc <= _next_pc_T_4;	// Fetch.scala:28:21, :36:85
        else if (started)	// Fetch.scala:25:26, :36:36
          pc <= _next_pc_T_7;	// Fetch.scala:28:21, :37:37
        if (_io_fdio_pc_T_2)	// Fetch.scala:53:36
          old_pc <= io_fcfe_jump_pc;	// Fetch.scala:29:25
        else if (_io_pc_bits_T_3) begin	// Fetch.scala:53:36, :54:17
          if (_next_pc_T_2)	// Fetch.scala:36:36
            old_pc <= _next_pc_T_4;	// Fetch.scala:29:25, :36:85
          else if (started)	// Fetch.scala:25:26, :36:36
            old_pc <= _next_pc_T_7;	// Fetch.scala:29:25, :37:37
          else	// Fetch.scala:25:26, :36:36
            old_pc <= pc;	// Fetch.scala:28:21, :29:25
        end
        else	// Fetch.scala:53:36, :54:17
          old_pc <= pc;	// Fetch.scala:28:21, :29:25
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2:10
        started = _RANDOM_0[0];	// Fetch.scala:25:26
        pc = {_RANDOM_0[31:1], _RANDOM_1[0]};	// Fetch.scala:25:26, :28:21
        old_pc = {_RANDOM_1[31:1], _RANDOM_2[0]};	// Fetch.scala:28:21, :29:25
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_fdio_pc = io_fcfe_stall ? old_pc : _io_fdio_pc_T_2 ? io_fcfe_jump_pc : _io_pc_bits_T_3 ? next_pc : pc;	// <stdin>:2:10, Fetch.scala:28:21, :29:25, :53:36, :54:17, Mux.scala:101:16
  assign io_pc_valid = started;	// <stdin>:2:10, Fetch.scala:25:26
  assign io_pc_bits = io_fcfe_stall ? old_pc : io_fcfe_flush & io_fcfe_jump_flag ? io_fcfe_jump_pc :
                _io_pc_bits_T_3 ? next_pc : pc;	// <stdin>:2:10, Fetch.scala:28:21, :29:25, :54:17, :65:36, Mux.scala:101:16
endmodule

module ControlUnit(	// <stdin>:47:10
  input  [31:0] io_inst,
  output [1:0]  io_jump_type,
  output        io_branch_type,
  output [1:0]  io_opa_type,
  output [2:0]  io_opb_type,
                io_imm_type,
  output [5:0]  io_alu_op,
  output [1:0]  io_wb_type,
  output [2:0]  io_sd_type,
                io_ld_type,
  output [1:0]  io_csr_type);

  wire        _controlsig_T_1 = io_inst == 32'h13;	// Lookup.scala:31:38
  wire        _controlsig_T_3 = io_inst[6:0] == 7'h17;	// Lookup.scala:31:38
  wire        _controlsig_T_5 = io_inst[6:0] == 7'h37;	// Lookup.scala:31:38
  wire        _controlsig_T_7 = io_inst[6:0] == 7'h6F;	// Lookup.scala:31:38
  wire [9:0]  _GEN = {io_inst[14:12], io_inst[6:0]};	// Lookup.scala:31:38
  wire        _controlsig_T_9 = _GEN == 10'h67;	// Lookup.scala:31:38
  wire        _controlsig_T_11 = _GEN == 10'h63;	// Lookup.scala:31:38
  wire        _controlsig_T_13 = _GEN == 10'hE3;	// Lookup.scala:31:38
  wire        _controlsig_T_15 = _GEN == 10'h263;	// Lookup.scala:31:38
  wire        _controlsig_T_17 = _GEN == 10'h2E3;	// Lookup.scala:31:38
  wire        _controlsig_T_19 = _GEN == 10'h363;	// Lookup.scala:31:38
  wire        _controlsig_T_264 = _GEN == 10'h3E3;	// Lookup.scala:31:38
  wire        _controlsig_T_23 = _GEN == 10'h3;	// Lookup.scala:31:38
  wire        _controlsig_T_25 = _GEN == 10'h83;	// Lookup.scala:31:38
  wire        _controlsig_T_27 = _GEN == 10'h103;	// Lookup.scala:31:38
  wire        _controlsig_T_29 = _GEN == 10'h203;	// Lookup.scala:31:38
  wire        _controlsig_T_31 = _GEN == 10'h283;	// Lookup.scala:31:38
  wire        _controlsig_T_33 = _GEN == 10'h303;	// Lookup.scala:31:38
  wire        _controlsig_T_35 = _GEN == 10'h183;	// Lookup.scala:31:38
  wire        _controlsig_T_37 = _GEN == 10'h23;	// Lookup.scala:31:38
  wire        _controlsig_T_39 = _GEN == 10'hA3;	// Lookup.scala:31:38
  wire        _controlsig_T_41 = _GEN == 10'h123;	// Lookup.scala:31:38
  wire        _controlsig_T_43 = _GEN == 10'h1A3;	// Lookup.scala:31:38
  wire        _controlsig_T_45 = _GEN == 10'h13;	// Lookup.scala:31:38
  wire        _controlsig_T_47 = _GEN == 10'h113;	// Lookup.scala:31:38
  wire        _controlsig_T_49 = _GEN == 10'h193;	// Lookup.scala:31:38
  wire        _controlsig_T_51 = _GEN == 10'h213;	// Lookup.scala:31:38
  wire        _controlsig_T_53 = _GEN == 10'h313;	// Lookup.scala:31:38
  wire        _controlsig_T_55 = _GEN == 10'h393;	// Lookup.scala:31:38
  wire [15:0] _GEN_0 = {io_inst[31:26], io_inst[14:12], io_inst[6:0]};	// Lookup.scala:31:38
  wire        _controlsig_T_57 = _GEN_0 == 16'h93;	// Lookup.scala:31:38
  wire        _controlsig_T_59 = _GEN_0 == 16'h293;	// Lookup.scala:31:38
  wire        _controlsig_T_61 = _GEN_0 == 16'h4293;	// Lookup.scala:31:38
  wire [16:0] _GEN_1 = {io_inst[31:25], io_inst[14:12], io_inst[6:0]};	// Lookup.scala:31:38
  wire        _controlsig_T_63 = _GEN_1 == 17'h33;	// Lookup.scala:31:38
  wire        _controlsig_T_65 = _GEN_1 == 17'h8033;	// Lookup.scala:31:38
  wire        _controlsig_T_67 = _GEN_0 == 16'hB3;	// Lookup.scala:31:38
  wire        _controlsig_T_69 = _GEN_1 == 17'h133;	// Lookup.scala:31:38
  wire        _controlsig_T_71 = _GEN_1 == 17'h1B3;	// Lookup.scala:31:38
  wire        _controlsig_T_73 = _GEN_1 == 17'h233;	// Lookup.scala:31:38
  wire        _controlsig_T_75 = _GEN_1 == 17'h2B3;	// Lookup.scala:31:38
  wire        _controlsig_T_77 = _GEN_1 == 17'h82B3;	// Lookup.scala:31:38
  wire        _controlsig_T_79 = _GEN_1 == 17'h333;	// Lookup.scala:31:38
  wire        _controlsig_T_81 = _GEN_1 == 17'h3B3;	// Lookup.scala:31:38
  wire        _controlsig_T_83 = _GEN_1 == 17'h433;	// Lookup.scala:31:38
  wire        _controlsig_T_85 = _GEN_1 == 17'h4B3;	// Lookup.scala:31:38
  wire        _controlsig_T_87 = _GEN_1 == 17'h533;	// Lookup.scala:31:38
  wire        _controlsig_T_89 = _GEN_1 == 17'h5B3;	// Lookup.scala:31:38
  wire        _controlsig_T_91 = _GEN_1 == 17'h633;	// Lookup.scala:31:38
  wire        _controlsig_T_93 = _GEN_1 == 17'h6B3;	// Lookup.scala:31:38
  wire        _controlsig_T_95 = _GEN_1 == 17'h733;	// Lookup.scala:31:38
  wire        _controlsig_T_97 = _GEN_1 == 17'h7B3;	// Lookup.scala:31:38
  wire        _controlsig_T_99 = _GEN == 10'h1B;	// Lookup.scala:31:38
  wire        _controlsig_T_101 = _GEN_0 == 16'h9B;	// Lookup.scala:31:38
  wire        _controlsig_T_103 = _GEN_0 == 16'h29B;	// Lookup.scala:31:38
  wire        _controlsig_T_105 = _GEN_0 == 16'h429B;	// Lookup.scala:31:38
  wire        _controlsig_T_107 = _GEN_1 == 17'h3B;	// Lookup.scala:31:38
  wire        _controlsig_T_109 = _GEN_1 == 17'h803B;	// Lookup.scala:31:38
  wire        _controlsig_T_111 = _GEN_1 == 17'hBB;	// Lookup.scala:31:38
  wire        _controlsig_T_113 = _GEN_1 == 17'h2BB;	// Lookup.scala:31:38
  wire        _controlsig_T_115 = _GEN_1 == 17'h82BB;	// Lookup.scala:31:38
  wire        _controlsig_T_117 = _GEN_1 == 17'h43B;	// Lookup.scala:31:38
  wire        _controlsig_T_119 = _GEN_1 == 17'h63B;	// Lookup.scala:31:38
  wire        _controlsig_T_121 = _GEN_1 == 17'h6BB;	// Lookup.scala:31:38
  wire        _controlsig_T_123 = _GEN_1 == 17'h73B;	// Lookup.scala:31:38
  wire        _controlsig_T_125 = _GEN_1 == 17'h7BB;	// Lookup.scala:31:38
  wire        _controlsig_T_127 = _GEN == 10'hF3;	// Lookup.scala:31:38
  wire        _controlsig_T_129 = _GEN == 10'h173;	// Lookup.scala:31:38
  wire        _controlsig_T_131 = _GEN == 10'h1F3;	// Lookup.scala:31:38
  wire        _controlsig_T_133 = _GEN == 10'h2F3;	// Lookup.scala:31:38
  wire        _controlsig_T_135 = _GEN == 10'h373;	// Lookup.scala:31:38
  wire        _controlsig_T_137 = _GEN == 10'h3F3;	// Lookup.scala:31:38
  wire [1:0]  _controlsig_T_750 = {2{_controlsig_T_137}};	// Lookup.scala:31:38, :34:39
  wire        _GEN_2 = _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264 | _controlsig_T_23 | _controlsig_T_25 |
                _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 |
                _controlsig_T_35 | _controlsig_T_37 | _controlsig_T_39 | _controlsig_T_41 |
                _controlsig_T_43 | _controlsig_T_45 | _controlsig_T_47 | _controlsig_T_49 |
                _controlsig_T_51 | _controlsig_T_53 | _controlsig_T_55 | _controlsig_T_57 |
                _controlsig_T_59 | _controlsig_T_61 | _controlsig_T_63 | _controlsig_T_65 |
                _controlsig_T_67 | _controlsig_T_69;	// Lookup.scala:31:38, :34:39
  wire        _GEN_3 = _controlsig_T_71 | _controlsig_T_73 | _controlsig_T_75 | _controlsig_T_77 |
                _controlsig_T_79 | _controlsig_T_81 | _controlsig_T_83 | _controlsig_T_85 |
                _controlsig_T_87 | _controlsig_T_89 | _controlsig_T_91 | _controlsig_T_93 |
                _controlsig_T_95 | _controlsig_T_97 | _controlsig_T_99 | _controlsig_T_101 |
                _controlsig_T_103 | _controlsig_T_105 | _controlsig_T_107 | _controlsig_T_109 |
                _controlsig_T_111 | _controlsig_T_113 | _controlsig_T_115 | _controlsig_T_117 |
                _controlsig_T_119 | _controlsig_T_121 | _controlsig_T_123 | _controlsig_T_125 |
                _controlsig_T_127 | _controlsig_T_129 | _controlsig_T_131;	// Lookup.scala:31:38, :34:39
  wire        _GEN_4 = _controlsig_T_7 | _controlsig_T_9;	// Lookup.scala:31:38, :34:39
  wire        _GEN_5 = _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264;	// Lookup.scala:31:38, :34:39
  wire        _GEN_6 = _controlsig_T_3 | _controlsig_T_5;	// Lookup.scala:31:38, :34:39
  wire        _GEN_7 = _controlsig_T_45 | _controlsig_T_47 | _controlsig_T_49 | _controlsig_T_51 |
                _controlsig_T_53 | _controlsig_T_55 | _controlsig_T_57 | _controlsig_T_59 |
                _controlsig_T_61 | _controlsig_T_63 | _controlsig_T_65 | _controlsig_T_67 |
                _controlsig_T_69 | _controlsig_T_71 | _controlsig_T_73 | _controlsig_T_75 |
                _controlsig_T_77 | _controlsig_T_79 | _controlsig_T_81 | _controlsig_T_83 |
                _controlsig_T_85 | _controlsig_T_87;	// Lookup.scala:31:38, :34:39
  wire        _GEN_8 = _controlsig_T_89 | _controlsig_T_91 | _controlsig_T_93 | _controlsig_T_95 |
                _controlsig_T_97 | _controlsig_T_99 | _controlsig_T_101 | _controlsig_T_103 |
                _controlsig_T_105 | _controlsig_T_107 | _controlsig_T_109 | _controlsig_T_111 |
                _controlsig_T_113 | _controlsig_T_115 | _controlsig_T_117 | _controlsig_T_119 |
                _controlsig_T_121 | _controlsig_T_123 | _controlsig_T_125 | _controlsig_T_127 |
                _controlsig_T_129 | _controlsig_T_131 | ~(_controlsig_T_133 | _controlsig_T_135 |
                _controlsig_T_137);	// Lookup.scala:31:38, :34:39
  wire        _GEN_9 = _controlsig_T_37 | _controlsig_T_39 | _controlsig_T_41 | _controlsig_T_43;	// Lookup.scala:31:38, :34:39
  wire        _GEN_10 = _controlsig_T_3 | _controlsig_T_5 | _controlsig_T_7 | _controlsig_T_9;	// Lookup.scala:31:38, :34:39
  wire        _GEN_11 = _controlsig_T_45 | _controlsig_T_47 | _controlsig_T_49 | _controlsig_T_51 |
                _controlsig_T_53 | _controlsig_T_55 | _controlsig_T_57 | _controlsig_T_59 |
                _controlsig_T_61 | _controlsig_T_63 | _controlsig_T_65 | _controlsig_T_67 |
                _controlsig_T_69 | _controlsig_T_71 | _controlsig_T_73 | _controlsig_T_75 |
                _controlsig_T_77 | _controlsig_T_79 | _controlsig_T_81 | _controlsig_T_83;	// Lookup.scala:31:38, :34:39
  wire        _GEN_12 = _controlsig_T_85 | _controlsig_T_87 | _controlsig_T_89 | _controlsig_T_91 |
                _controlsig_T_93 | _controlsig_T_95 | _controlsig_T_97 | _controlsig_T_99 |
                _controlsig_T_101 | _controlsig_T_103 | _controlsig_T_105 | _controlsig_T_107 |
                _controlsig_T_109 | _controlsig_T_111 | _controlsig_T_113 | _controlsig_T_115 |
                _controlsig_T_117 | _controlsig_T_119 | _controlsig_T_121 | _controlsig_T_123 |
                _controlsig_T_125;	// Lookup.scala:31:38, :34:39
  wire        _GEN_13 = _controlsig_T_1 | _controlsig_T_3 | _controlsig_T_5 | _controlsig_T_7 | _controlsig_T_9 |
                _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264 | _controlsig_T_23 | _controlsig_T_25 |
                _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 |
                _controlsig_T_35 | _controlsig_T_37 | _controlsig_T_39 | _controlsig_T_41 |
                _controlsig_T_43 | _controlsig_T_45 | _controlsig_T_47 | _controlsig_T_49 |
                _controlsig_T_51 | _controlsig_T_53 | _controlsig_T_55 | _controlsig_T_57 |
                _controlsig_T_59 | _controlsig_T_61;	// Lookup.scala:31:38, :34:39
  wire        _GEN_14 = _controlsig_T_63 | _controlsig_T_65 | _controlsig_T_67 | _controlsig_T_69 |
                _controlsig_T_71 | _controlsig_T_73 | _controlsig_T_75 | _controlsig_T_77 |
                _controlsig_T_79 | _controlsig_T_81 | _controlsig_T_83 | _controlsig_T_85 |
                _controlsig_T_87 | _controlsig_T_89 | _controlsig_T_91 | _controlsig_T_93 |
                _controlsig_T_95 | _controlsig_T_97 | _controlsig_T_99 | _controlsig_T_101 |
                _controlsig_T_103 | _controlsig_T_105 | _controlsig_T_107 | _controlsig_T_109 |
                _controlsig_T_111 | _controlsig_T_113 | _controlsig_T_115 | _controlsig_T_117 |
                _controlsig_T_119 | _controlsig_T_121 | _controlsig_T_123 | _controlsig_T_125;	// Lookup.scala:31:38, :34:39
  assign io_jump_type = _controlsig_T_1 | _controlsig_T_3 | _controlsig_T_5 ? 2'h0 : _controlsig_T_7 ? 2'h1 :
                {_controlsig_T_9, 1'h0};	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_branch_type = ~_controlsig_T_1 & ~_controlsig_T_3 & ~_controlsig_T_5 & ~_controlsig_T_7 &
                ~_controlsig_T_9 & (_controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 |
                _controlsig_T_17 | _controlsig_T_19 | _controlsig_T_264);	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_opa_type = _controlsig_T_1 ? 2'h0 : _controlsig_T_3 ? 2'h1 : _controlsig_T_5 ? 2'h0 : _GEN_4 ? 2'h1 :
                _GEN_2 | _GEN_3 ? 2'h2 : _controlsig_T_133 | _controlsig_T_135 ? 2'h3 : _controlsig_T_750;	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_opb_type = _controlsig_T_1 ? 3'h0 : _GEN_6 ? 3'h1 : _GEN_4 ? 3'h3 : _GEN_5 ? 3'h2 : _controlsig_T_23 |
                _controlsig_T_25 | _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 |
                _controlsig_T_33 | _controlsig_T_35 | _controlsig_T_37 | _controlsig_T_39 |
                _controlsig_T_41 | _controlsig_T_43 | _controlsig_T_45 | _controlsig_T_47 |
                _controlsig_T_49 | _controlsig_T_51 | _controlsig_T_53 | _controlsig_T_55 |
                _controlsig_T_57 | _controlsig_T_59 | _controlsig_T_61 ? 3'h1 : _controlsig_T_63 |
                _controlsig_T_65 | _controlsig_T_67 | _controlsig_T_69 | _controlsig_T_71 |
                _controlsig_T_73 | _controlsig_T_75 | _controlsig_T_77 | _controlsig_T_79 |
                _controlsig_T_81 | _controlsig_T_83 | _controlsig_T_85 | _controlsig_T_87 |
                _controlsig_T_89 | _controlsig_T_91 | _controlsig_T_93 | _controlsig_T_95 |
                _controlsig_T_97 ? 3'h2 : _controlsig_T_99 | _controlsig_T_101 | _controlsig_T_103 |
                _controlsig_T_105 ? 3'h1 : _controlsig_T_107 | _controlsig_T_109 | _controlsig_T_111 |
                _controlsig_T_113 | _controlsig_T_115 | _controlsig_T_117 | _controlsig_T_119 |
                _controlsig_T_121 | _controlsig_T_123 | _controlsig_T_125 ? 3'h2 : _controlsig_T_127 ? 3'h0
                : _controlsig_T_129 | _controlsig_T_131 ? 3'h4 : _controlsig_T_133 ? 3'h0 :
                _controlsig_T_135 ? 3'h4 : {_controlsig_T_137, 2'h0};	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_imm_type = _controlsig_T_1 ? 3'h0 : _GEN_6 ? 3'h1 : _controlsig_T_7 ? 3'h2 : _controlsig_T_9 |
                _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264 | _controlsig_T_23 | _controlsig_T_25 |
                _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 |
                _controlsig_T_35 ? 3'h0 : _GEN_9 ? 3'h3 : _GEN_7 | _GEN_8 ? 3'h0 : 3'h5;	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_alu_op = _controlsig_T_1 ? 6'h3F : _GEN_10 ? 6'h0 : _controlsig_T_11 ? 6'h2 : _controlsig_T_13 ?
                6'h3 : _controlsig_T_15 ? 6'h4 : _controlsig_T_17 ? 6'h5 : _controlsig_T_19 ? 6'h6 :
                _controlsig_T_264 ? 6'h7 : _controlsig_T_23 | _controlsig_T_25 | _controlsig_T_27 |
                _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 | _controlsig_T_35 |
                _controlsig_T_37 | _controlsig_T_39 | _controlsig_T_41 | _controlsig_T_43 |
                _controlsig_T_45 ? 6'h0 : _controlsig_T_47 ? 6'h4 : _controlsig_T_49 ? 6'h6 :
                _controlsig_T_51 ? 6'h8 : _controlsig_T_53 ? 6'h9 : _controlsig_T_55 ? 6'h10 :
                _controlsig_T_57 ? 6'hD : _controlsig_T_59 ? 6'hE : _controlsig_T_61 ? 6'hF :
                _controlsig_T_63 ? 6'h0 : _controlsig_T_65 ? 6'h1 : _controlsig_T_67 ? 6'hA :
                _controlsig_T_69 ? 6'h4 : _controlsig_T_71 ? 6'h6 : _controlsig_T_73 ? 6'h8 :
                _controlsig_T_75 ? 6'hB : _controlsig_T_77 ? 6'hC : _controlsig_T_79 ? 6'h9 :
                _controlsig_T_81 ? 6'h10 : _controlsig_T_83 ? 6'h12 : _controlsig_T_85 ? 6'h13 :
                _controlsig_T_87 ? 6'h14 : _controlsig_T_89 ? 6'h15 : _controlsig_T_91 ? 6'h16 :
                _controlsig_T_93 ? 6'h17 : _controlsig_T_95 ? 6'h18 : _controlsig_T_97 ? 6'h19 :
                _controlsig_T_99 ? 6'h1A : _controlsig_T_101 ? 6'h1B : _controlsig_T_103 ? 6'h1C :
                _controlsig_T_105 ? 6'h1D : _controlsig_T_107 ? 6'h1E : _controlsig_T_109 ? 6'h1F :
                _controlsig_T_111 ? 6'h20 : _controlsig_T_113 ? 6'h21 : _controlsig_T_115 ? 6'h22 :
                _controlsig_T_117 ? 6'h23 : _controlsig_T_119 ? 6'h24 : _controlsig_T_121 ? 6'h25 :
                _controlsig_T_123 ? 6'h26 : _controlsig_T_125 ? 6'h27 : _controlsig_T_127 ? 6'h0 :
                _controlsig_T_129 ? 6'h9 : _controlsig_T_131 ? 6'h28 : _controlsig_T_133 ? 6'h0 :
                _controlsig_T_135 ? 6'h9 : _controlsig_T_137 ? 6'h28 : 6'h3F;	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_wb_type = _controlsig_T_1 ? 2'h0 : _GEN_10 ? 2'h1 : _GEN_5 ? 2'h0 : _controlsig_T_23 |
                _controlsig_T_25 | _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 |
                _controlsig_T_33 | _controlsig_T_35 ? 2'h2 : _GEN_9 ? 2'h0 : _GEN_11 | _GEN_12 ? 2'h1 :
                _controlsig_T_127 | _controlsig_T_129 | _controlsig_T_131 | _controlsig_T_133 |
                _controlsig_T_135 ? 2'h3 : _controlsig_T_750;	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_sd_type = _controlsig_T_1 | _controlsig_T_3 | _controlsig_T_5 | _controlsig_T_7 | _controlsig_T_9 |
                _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264 | _controlsig_T_23 | _controlsig_T_25 |
                _controlsig_T_27 | _controlsig_T_29 | _controlsig_T_31 | _controlsig_T_33 |
                _controlsig_T_35 ? 3'h0 : _controlsig_T_37 ? 3'h1 : _controlsig_T_39 ? 3'h2 :
                _controlsig_T_41 ? 3'h3 : {_controlsig_T_43, 2'h0};	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_ld_type = _controlsig_T_1 | _controlsig_T_3 | _controlsig_T_5 | _controlsig_T_7 | _controlsig_T_9 |
                _controlsig_T_11 | _controlsig_T_13 | _controlsig_T_15 | _controlsig_T_17 |
                _controlsig_T_19 | _controlsig_T_264 ? 3'h0 : _controlsig_T_23 ? 3'h1 : _controlsig_T_25 ?
                3'h2 : _controlsig_T_27 ? 3'h3 : _controlsig_T_29 ? 3'h5 : _controlsig_T_31 ? 3'h6 :
                _controlsig_T_33 ? 3'h7 : {_controlsig_T_35, 2'h0};	// <stdin>:47:10, Lookup.scala:31:38, :34:39
  assign io_csr_type = _GEN_13 | _GEN_14 ? 2'h0 : _controlsig_T_127 ? 2'h1 : _controlsig_T_129 ? 2'h2 :
                _controlsig_T_131 ? 2'h3 : _controlsig_T_133 ? 2'h1 : _controlsig_T_135 ? 2'h2 :
                _controlsig_T_750;	// <stdin>:47:10, Lookup.scala:31:38, :34:39
endmodule

module Eximm(	// <stdin>:891:10
  input  [31:0] io_inst,
  input  [2:0]  io_imm_type,
  output [63:0] io_eximm);

  wire [7:0][63:0] _GEN = {{64'h0}, {64'h0}, {{59'h0, io_inst[19:15]}}, {{{52{io_inst[31]}}, io_inst[7],
                io_inst[30:25], io_inst[11:8], 1'h0}}, {{{52{io_inst[31]}}, io_inst[31:25],
                io_inst[11:7]}}, {{{44{io_inst[31]}}, io_inst[19:12], io_inst[20], io_inst[30:21], 1'h0}},
                {{{32{io_inst[31]}}, io_inst[31:12], 12'h0}}, {{{52{io_inst[31]}}, io_inst[31:20]}}};	// Bitwise.scala:77:12, Cat.scala:33:92, Eximm.scala:30:{42,56}, :31:56, :32:{56,72,85}, :33:{56,72}, :34:{69,81,97}, :35:29, Mux.scala:81:{58,61}
  assign io_eximm = _GEN[io_imm_type];	// <stdin>:891:10, Mux.scala:81:{58,61}
endmodule

module Decode(	// <stdin>:952:10
  input         clock,
                reset,
                io_inst_valid,
  input  [63:0] io_inst_bits_data,
  input  [31:0] io_fdio_pc,
  input  [63:0] io_rfio_reg1_rdata,
                io_rfio_reg2_rdata,
  input         io_branch,
                io_stall,
                io_flush,
                io_fwde_fw_sel1,
                io_fwde_fw_sel2,
  input  [63:0] io_fwde_fw_data1,
                io_fwde_fw_data2,
  input         io_fwde_csr_fw_sel,
  input  [63:0] io_fwde_csr_fw_data,
                io_csrs_csr_rdata,
  output [4:0]  io_rfio_reg1_raddr,
                io_rfio_reg2_raddr,
  output [63:0] io_deio_op_a,
                io_deio_op_b,
  output [4:0]  io_deio_reg_waddr,
  output        io_deio_branch_type,
  output [63:0] io_deio_branch_addr,
  output [5:0]  io_deio_alu_op,
                io_deio_shamt,
  output [1:0]  io_deio_wb_type,
  output [2:0]  io_deio_sd_type,
  output [63:0] io_deio_reg2_rdata,
  output [2:0]  io_deio_ld_type,
  output [63:0] io_deio_csr_t,
  output [11:0] io_deio_csr_waddr,
  output        io_deio_csr_wen,
                io_deio_has_inst,
                io_jump_flag,
  output [31:0] io_jump_pc,
  output        io_load_use,
  output [4:0]  io_fwde_reg1_raddr,
                io_fwde_reg2_raddr,
  output [11:0] io_fwde_csr_raddr,
                io_csrs_csr_raddr);

  wire [63:0] _eximm_io_eximm;	// Decode.scala:55:23
  wire [1:0]  _cu_io_jump_type;	// Decode.scala:54:20
  wire [1:0]  _cu_io_opa_type;	// Decode.scala:54:20
  wire [2:0]  _cu_io_opb_type;	// Decode.scala:54:20
  wire [2:0]  _cu_io_imm_type;	// Decode.scala:54:20
  wire [2:0]  _cu_io_sd_type;	// Decode.scala:54:20
  wire [2:0]  _cu_io_ld_type;	// Decode.scala:54:20
  wire [1:0]  _cu_io_csr_type;	// Decode.scala:54:20
  wire [31:0] inst;	// Decode.scala:44:20
  assign inst = io_inst_valid ? io_inst_bits_data[31:0] : 32'h13;	// Decode.scala:63:{10,16}
  reg  [4:0]  lu_rd;	// Decode.scala:73:24
  wire        _io_deio_op_a_T_3 = _cu_io_opa_type == 2'h2;	// Decode.scala:54:20, :81:34
  wire        _load_use_T_12 = inst[19:15] == lu_rd;	// Decode.scala:64:20, :65:16, :73:24, :81:64
  wire        _io_deio_op_b_T_6 = _cu_io_opb_type == 3'h2;	// Decode.scala:54:20, :81:95
  wire        _load_use_T_8 = inst[24:20] == lu_rd;	// Decode.scala:64:20, :66:16, :73:24, :81:125
  wire        _io_jump_pc_T_3 = _cu_io_jump_type == 2'h2;	// Decode.scala:54:20, :81:34, :82:65
  wire        _load_use_T_16 = (_io_deio_op_a_T_3 & _load_use_T_12 | _io_deio_op_b_T_6 & _load_use_T_8 | (|_cu_io_sd_type)
                & _load_use_T_8 | _io_jump_pc_T_3 & _load_use_T_12) & (|lu_rd);	// Decode.scala:54:20, :73:24, :81:{34,57,64,95,118,125}, :82:{20,24,44,65,91}, :83:{7,17}
  wire [63:0] _io_jump_pc_T_4 = io_fwde_fw_sel1 ? io_fwde_fw_data1 : io_rfio_reg1_rdata;	// Decode.scala:102:38
  wire [63:0] _io_deio_reg2_rdata_T = io_fwde_fw_sel2 ? io_fwde_fw_data2 : io_rfio_reg2_rdata;	// Decode.scala:112:38
  wire [63:0] _io_deio_csr_t_T = io_fwde_csr_fw_sel ? io_fwde_csr_fw_data : io_csrs_csr_rdata;	// Decode.scala:114:37
  wire        _io_jump_pc_T = _cu_io_jump_type == 2'h1;	// Decode.scala:54:20, :134:38, Mux.scala:81:61
  wire [31:0] _GEN = _io_jump_pc_T_4[31:0] + _eximm_io_eximm[31:0];	// Decode.scala:55:23, :102:38, :139:121
  always @(posedge clock) begin
    if (reset)
      lu_rd <= 5'h0;	// Decode.scala:73:24
    else if (io_branch)
      lu_rd <= 5'h0;	// Decode.scala:73:24
    else if (io_stall) begin
    end
    else if (_load_use_T_16 | _cu_io_ld_type == 3'h0)	// Decode.scala:54:20, :78:17, :79:32, :83:7
      lu_rd <= 5'h0;	// Decode.scala:73:24
    else	// Decode.scala:54:20, :78:17, :79:32, :83:7
      lu_rd <= inst[11:7];	// Decode.scala:64:20, :67:15, :73:24
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:952:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:952:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:952:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:952:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:952:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:952:10
        `INIT_RANDOM_PROLOG_	// <stdin>:952:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:952:10
        _RANDOM_0 = `RANDOM;	// <stdin>:952:10
        lu_rd = _RANDOM_0[4:0];	// Decode.scala:73:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:952:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:952:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  ControlUnit cu (	// Decode.scala:54:20
    .io_inst        (inst),	// Decode.scala:64:20
    .io_jump_type   (_cu_io_jump_type),
    .io_branch_type (io_deio_branch_type),
    .io_opa_type    (_cu_io_opa_type),
    .io_opb_type    (_cu_io_opb_type),
    .io_imm_type    (_cu_io_imm_type),
    .io_alu_op      (io_deio_alu_op),
    .io_wb_type     (io_deio_wb_type),
    .io_sd_type     (_cu_io_sd_type),
    .io_ld_type     (_cu_io_ld_type),
    .io_csr_type    (_cu_io_csr_type)
  );
  Eximm eximm (	// Decode.scala:55:23
    .io_inst     (inst),	// Decode.scala:64:20
    .io_imm_type (_cu_io_imm_type),	// Decode.scala:54:20
    .io_eximm    (_eximm_io_eximm)
  );
  assign io_rfio_reg1_raddr = inst[19:15];	// <stdin>:952:10, Decode.scala:64:20, :65:16
  assign io_rfio_reg2_raddr = inst[24:20];	// <stdin>:952:10, Decode.scala:64:20, :66:16
  assign io_deio_op_a = (&_cu_io_opa_type) ? _eximm_io_eximm : _io_deio_op_a_T_3 ? _io_jump_pc_T_4 : {32'h0,
                _cu_io_opa_type == 2'h1 ? io_fdio_pc : 32'h0};	// <stdin>:952:10, Decode.scala:54:20, :55:23, :81:34, :102:38, Mux.scala:81:{58,61}
  assign io_deio_op_b = _cu_io_opb_type == 3'h4 ? _io_deio_csr_t_T : _cu_io_opb_type == 3'h3 ? 64'h4 :
                _io_deio_op_b_T_6 ? _io_deio_reg2_rdata_T : _cu_io_opb_type == 3'h1 ? _eximm_io_eximm :
                64'h0;	// <stdin>:952:10, Decode.scala:54:20, :55:23, :81:95, :112:38, :114:37, Mux.scala:81:{58,61}
  assign io_deio_reg_waddr = inst[11:7];	// <stdin>:952:10, Decode.scala:64:20, :67:15
  assign io_deio_branch_addr = {32'h0, io_fdio_pc} + {{52{inst[31]}}, inst[7], inst[30:25], inst[11:8], 1'h0};	// <stdin>:952:10, Cat.scala:33:92, Decode.scala:64:20, :79:17, :120:{39,58,79,88,101}, Mux.scala:81:58
  assign io_deio_shamt = inst[25:20];	// <stdin>:952:10, Decode.scala:64:20, :68:18
  assign io_deio_sd_type = _cu_io_sd_type;	// <stdin>:952:10, Decode.scala:54:20
  assign io_deio_reg2_rdata = _io_deio_reg2_rdata_T;	// <stdin>:952:10, Decode.scala:112:38
  assign io_deio_ld_type = _cu_io_ld_type;	// <stdin>:952:10, Decode.scala:54:20
  assign io_deio_csr_t = _io_deio_csr_t_T;	// <stdin>:952:10, Decode.scala:114:37
  assign io_deio_csr_waddr = (|_cu_io_csr_type) ? inst[31:20] : 12'h0;	// <stdin>:952:10, Decode.scala:54:20, :64:20, :128:{29,45}
  assign io_deio_csr_wen = |_cu_io_csr_type;	// <stdin>:952:10, Decode.scala:54:20, :128:45
  assign io_deio_has_inst = ~(inst == 32'h13 | io_flush);	// <stdin>:952:10, Decode.scala:63:16, :64:20, :131:{28,35,43}
  assign io_jump_flag = _io_jump_pc_T | _io_jump_pc_T_3;	// <stdin>:952:10, Decode.scala:82:65, :134:{38,63}
  assign io_jump_pc = _io_jump_pc_T ? io_fdio_pc + _eximm_io_eximm[31:0] : _io_jump_pc_T_3 ? {_GEN[31:1], 1'h0} :
                32'h80000000;	// <stdin>:952:10, Decode.scala:55:23, :79:17, :82:65, :134:38, :138:71, :139:{121,139}, Mux.scala:101:16
  assign io_load_use = _load_use_T_16;	// <stdin>:952:10, Decode.scala:83:7
  assign io_fwde_reg1_raddr = inst[19:15];	// <stdin>:952:10, Decode.scala:64:20, :65:16
  assign io_fwde_reg2_raddr = inst[24:20];	// <stdin>:952:10, Decode.scala:64:20, :66:16
  assign io_fwde_csr_raddr = inst[31:20];	// <stdin>:952:10, Decode.scala:64:20
  assign io_csrs_csr_raddr = inst[31:20];	// <stdin>:952:10, Decode.scala:64:20
endmodule

module Alu(	// <stdin>:1091:10
  input  [63:0] io_op_a,
                io_op_b,
  input  [5:0]  io_alu_op,
                io_shamt,
  output [63:0] io_result);

  wire [64:0]  _GEN = {io_op_a[63], io_op_a};	// Alu.scala:78:13, :88:40
  wire [64:0]  _GEN_0 = {io_op_b[63], io_op_b};	// Alu.scala:79:13, :88:40
  wire [126:0] _GEN_1 = {63'h0, io_op_a};	// Alu.scala:98:33
  wire [126:0] _GEN_2 = {121'h0, io_op_b[5:0]};	// Alu.scala:98:{33,43}
  wire [63:0]  _GEN_3 = {58'h0, io_op_b[5:0]};	// Alu.scala:98:43, :99:33
  wire [63:0]  _res_T_34 = io_op_a >> _GEN_3;	// Alu.scala:99:33
  wire [63:0]  _res_T_38 = $signed($signed(io_op_a) >>> _GEN_3);	// Alu.scala:99:33, :100:40
  wire [126:0] _res_T_80 = _GEN_1 << io_shamt;	// Alu.scala:98:33, :101:34
  wire [63:0]  _GEN_4 = {58'h0, io_shamt};	// Alu.scala:99:33, :102:34
  wire [63:0]  _res_T_41 = io_op_a >> _GEN_4;	// Alu.scala:102:34
  wire [63:0]  _res_T_44 = $signed($signed(io_op_a) >>> _GEN_4);	// Alu.scala:102:34, :103:41
  wire [63:0]  _res_T_47 = io_op_a & io_op_b;	// Alu.scala:104:33
  wire [63:0]  _res_T_49 = ~_res_T_47;	// Alu.scala:104:33, :105:25
  wire [127:0] _GEN_5 = {{64{io_op_a[63]}}, io_op_a};	// Alu.scala:78:13, :106:34
  wire [127:0] _GEN_6 = _GEN_5 * {{64{io_op_b[63]}}, io_op_b};	// Alu.scala:79:13, :106:34
  wire [127:0] _GEN_7 = {64'h0, io_op_b};	// Alu.scala:108:37, Mux.scala:81:58
  wire [127:0] _GEN_8 = _GEN_5 * _GEN_7;	// Alu.scala:106:34, :108:37
  wire [127:0] _GEN_9 = {64'h0, io_op_a} * _GEN_7;	// Alu.scala:108:37, :109:36, Mux.scala:81:58
  wire [64:0]  _res_T_68 = $signed(_GEN) / $signed(_GEN_0);	// Alu.scala:88:40, :110:40
  wire [63:0]  _res_T_123 = io_op_a / io_op_b;	// Alu.scala:111:34
  wire [63:0]  _res_T_131 = io_op_a % io_op_b;	// Alu.scala:113:34
  wire [31:0]  _res_T_78 = io_op_a[31:0] + io_op_b[31:0];	// Alu.scala:114:36
  wire [31:0]  _GEN_10 = {26'h0, io_shamt};	// Alu.scala:116:42
  wire [31:0]  _res_T_85 = io_op_a[31:0] >> _GEN_10;	// Alu.scala:116:{35,42}
  wire [31:0]  _res_T_89 = $signed($signed(io_op_a[31:0]) >>> _GEN_10);	// Alu.scala:116:{35,42}, :117:49
  wire [31:0]  _res_T_98 = io_op_a[31:0] - io_op_b[31:0];	// Alu.scala:114:36, :119:35
  wire [126:0] _res_T_101 = _GEN_1 << _GEN_2;	// Alu.scala:98:33, :120:35
  wire [31:0]  _GEN_11 = {26'h0, io_op_b[5:0]};	// Alu.scala:98:43, :116:42, :121:41
  wire [31:0]  _res_T_107 = io_op_a[31:0] >> _GEN_11;	// Alu.scala:116:35, :121:41
  wire [31:0]  _res_T_112 = $signed($signed(io_op_a[31:0]) >>> _GEN_11);	// Alu.scala:116:35, :121:41, :122:48
  wire [64:0]  _res_T_120 = $signed(_GEN) / $signed(_GEN_0);	// Alu.scala:88:40, :124:42
  wire [63:0]  _res_T_128 = $signed(io_op_a) % $signed(io_op_b);	// Alu.scala:126:42
  wire [63:0]  _res_T_157 = io_alu_op == 6'h9 ? io_op_a | io_op_b : io_alu_op == 6'h8 ? io_op_a ^ io_op_b : io_alu_op
                == 6'h7 ? {63'h0, io_op_a >= io_op_b} : io_alu_op == 6'h6 ? {63'h0, io_op_a < io_op_b} :
                io_alu_op == 6'h5 ? {63'h0, $signed(io_op_a) >= $signed(io_op_b)} : io_alu_op == 6'h4 ?
                {63'h0, $signed(io_op_a) < $signed(io_op_b)} : io_alu_op == 6'h3 ? {63'h0, io_op_a !=
                io_op_b} : io_alu_op == 6'h2 ? {63'h0, io_op_a == io_op_b} : io_alu_op == 6'h1 ? io_op_a -
                io_op_b : io_alu_op == 6'h0 ? io_op_a + io_op_b : 64'h0;	// Alu.scala:88:40, :89:40, :90:33, :91:33, :92:40, :93:40, :94:34, :95:34, :96:33, :97:32, :98:33, Mux.scala:81:{58,61}
  wire [126:0] _res_T_177 = io_alu_op == 6'h13 ? {{63{_GEN_6[127]}}, _GEN_6[127:64]} : io_alu_op == 6'h12 ?
                {{63{_GEN_6[63]}}, _GEN_6[63:0]} : io_alu_op == 6'h11 ? {{63{_res_T_49[63]}}, _res_T_49} :
                io_alu_op == 6'h10 ? {{63{_res_T_47[63]}}, _res_T_47} : io_alu_op == 6'hF ?
                {{63{_res_T_44[63]}}, _res_T_44} : io_alu_op == 6'hE ? {{63{_res_T_41[63]}}, _res_T_41} :
                io_alu_op == 6'hD ? _res_T_80 : io_alu_op == 6'hC ? {{63{_res_T_38[63]}}, _res_T_38} :
                io_alu_op == 6'hB ? {{63{_res_T_34[63]}}, _res_T_34} : io_alu_op == 6'hA ? _GEN_1 << _GEN_2
                : {{63{_res_T_157[63]}}, _res_T_157};	// Alu.scala:98:33, :99:33, :100:40, :101:34, :102:34, :103:41, :104:33, :105:25, :106:{34,44}, :107:45, Mux.scala:81:{58,61}
  wire [63:0]  _GEN_12 = {{32{_res_T_78[31]}}, _res_T_78};	// Alu.scala:114:36, Mux.scala:81:58
  assign io_result = (&io_alu_op) ? 64'h0 : io_alu_op == 6'h28 ? ~io_op_a & io_op_b : io_alu_op == 6'h27 ?
                {{32{_res_T_131[31]}}, _res_T_131[31:0]} : io_alu_op == 6'h26 ? {{32{_res_T_128[31]}},
                _res_T_128[31:0]} : io_alu_op == 6'h25 ? {{32{_res_T_123[31]}}, _res_T_123[31:0]} :
                io_alu_op == 6'h24 ? {{32{_res_T_120[31]}}, _res_T_120[31:0]} : io_alu_op == 6'h23 ?
                {{32{_GEN_6[31]}}, _GEN_6[31:0]} : io_alu_op == 6'h22 ? {{32{_res_T_112[31]}}, _res_T_112}
                : io_alu_op == 6'h21 ? {{32{_res_T_107[31]}}, _res_T_107} : io_alu_op == 6'h20 ?
                {{32{_res_T_101[31]}}, _res_T_101[31:0]} : io_alu_op == 6'h1F ? {{32{_res_T_98[31]}},
                _res_T_98} : io_alu_op == 6'h1E ? _GEN_12 : io_alu_op == 6'h1D ? {{32{_res_T_89[31]}},
                _res_T_89} : io_alu_op == 6'h1C ? {{32{_res_T_85[31]}}, _res_T_85} : io_alu_op == 6'h1B ?
                {{32{_res_T_80[31]}}, _res_T_80[31:0]} : io_alu_op == 6'h1A ? _GEN_12 : io_alu_op == 6'h19
                ? _res_T_131 : io_alu_op == 6'h18 ? $signed(io_op_a) % $signed(io_op_b) : io_alu_op ==
                6'h17 ? _res_T_123 : io_alu_op == 6'h16 ? _res_T_68[63:0] : io_alu_op == 6'h15 ?
                _GEN_9[127:64] : io_alu_op == 6'h14 ? _GEN_8[127:64] : _res_T_177[63:0];	// <stdin>:1091:10, Alu.scala:101:34, :106:34, :108:{37,47}, :109:{36,46}, :110:40, :111:34, :112:40, :113:34, :115:48, :116:42, :117:49, :119:35, :120:{35,51}, :121:41, :122:48, :123:45, :124:{42,59}, :125:46, :126:{42,59}, :127:46, :129:{27,36}, Mux.scala:81:{58,61}
endmodule

module Excute(	// <stdin>:1333:10
  input  [63:0] io_deio_op_a,
                io_deio_op_b,
  input  [4:0]  io_deio_reg_waddr,
  input         io_deio_branch_type,
  input  [63:0] io_deio_branch_addr,
  input  [5:0]  io_deio_alu_op,
                io_deio_shamt,
  input  [1:0]  io_deio_wb_type,
  input  [2:0]  io_deio_sd_type,
  input  [63:0] io_deio_reg2_rdata,
  input  [2:0]  io_deio_ld_type,
  input  [63:0] io_deio_csr_t,
  input  [11:0] io_deio_csr_waddr,
  input         io_deio_csr_wen,
                io_deio_has_inst,
  output [63:0] io_emio_reg_wdata,
  output [4:0]  io_emio_reg_waddr,
  output [1:0]  io_emio_wb_type,
  output [2:0]  io_emio_ld_type,
                io_emio_ld_addr_lowbit,
  output [63:0] io_emio_csr_wdata,
  output        io_emio_csr_wen,
  output [11:0] io_emio_csr_waddr,
  output        io_emio_has_inst,
                io_jump_flag,
  output [31:0] io_jump_pc,
  output [63:0] io_raddr,
                io_waddr,
                io_wdata,
  output [7:0]  io_wmask,
  output [4:0]  io_fwex_reg_waddr,
  output [63:0] io_fwex_reg_wdata,
  output        io_fwex_reg_we,
  output [63:0] io_fwex_csr_wdata,
  output        io_fwex_csr_wen,
  output [11:0] io_fwex_csr_waddr,
  output        io_clex_valid,
  output [2:0]  io_clex_ld_type,
  output [63:0] io_clex_raddr,
  output [2:0]  io_clex_sd_type,
  output [63:0] io_clex_waddr,
  output [7:0]  io_clex_wmask,
  output [63:0] io_clex_wdata);

  wire [63:0] _io_raddr_T_3;	// Excute.scala:64:20
  wire [63:0] _alu_io_result;	// Excute.scala:35:21
  wire        _CLINT_type_T_6 = ((|io_deio_ld_type) | (|io_deio_sd_type)) & (|(_alu_io_result[63:25])) & _alu_io_result <
                64'h200C000;	// Excute.scala:35:21, :40:{36,44,63}, :41:{24,42,60}
  assign _io_raddr_T_3 = (|io_deio_ld_type) & ~_CLINT_type_T_6 ? _alu_io_result : 64'h0;	// Excute.scala:35:21, :40:36, :41:42, :64:{20,48,63}
  wire        _io_clex_wmask_T_2 = io_deio_sd_type == 3'h2;	// Mux.scala:81:61
  wire [1:0]  _GEN = {1'h0, io_deio_sd_type == 3'h1};	// Mux.scala:81:{58,61}
  wire        _io_clex_wmask_T_4 = io_deio_sd_type == 3'h3;	// Mux.scala:81:61
  wire        _io_clex_wmask_T_6 = io_deio_sd_type == 3'h4;	// Mux.scala:81:61
  wire        _io_fwex_reg_wdata_T = io_deio_wb_type == 2'h1;	// Excute.scala:96:40
  Alu alu (	// Excute.scala:35:21
    .io_op_a   (io_deio_op_a),
    .io_op_b   (io_deio_op_b),
    .io_alu_op (io_deio_alu_op),
    .io_shamt  (io_deio_shamt),
    .io_result (_alu_io_result)
  );
  assign io_emio_reg_wdata = io_deio_csr_wen ? io_deio_csr_t : _alu_io_result;	// <stdin>:1333:10, Excute.scala:35:21, :45:29
  assign io_emio_reg_waddr = io_deio_reg_waddr;	// <stdin>:1333:10
  assign io_emio_wb_type = io_deio_wb_type;	// <stdin>:1333:10
  assign io_emio_ld_type = io_deio_ld_type;	// <stdin>:1333:10
  assign io_emio_ld_addr_lowbit = _io_raddr_T_3[2:0];	// <stdin>:1333:10, Excute.scala:50:39, :64:20
  assign io_emio_csr_wdata = _alu_io_result;	// <stdin>:1333:10, Excute.scala:35:21
  assign io_emio_csr_wen = io_deio_csr_wen;	// <stdin>:1333:10
  assign io_emio_csr_waddr = io_deio_csr_waddr;	// <stdin>:1333:10
  assign io_emio_has_inst = io_deio_has_inst;	// <stdin>:1333:10
  assign io_jump_flag = io_deio_branch_type & (|_alu_io_result);	// <stdin>:1333:10, Excute.scala:35:21, :60:{50,69}
  assign io_jump_pc = io_deio_branch_addr[31:0];	// <stdin>:1333:10, Excute.scala:61:16
  assign io_raddr = _io_raddr_T_3;	// <stdin>:1333:10, Excute.scala:64:20
  assign io_waddr = (|io_deio_sd_type) & ~_CLINT_type_T_6 ? _alu_io_result : 64'h0;	// <stdin>:1333:10, Excute.scala:35:21, :40:63, :41:42, :64:{20,63}, :66:{20,47}
  assign io_wdata = io_deio_reg2_rdata;	// <stdin>:1333:10
  assign io_wmask = _io_clex_wmask_T_6 ? 8'hFF : {4'h0, _io_clex_wmask_T_4 ? 4'hF : {2'h0, _io_clex_wmask_T_2 ?
                2'h3 : _GEN}};	// <stdin>:1333:10, Mux.scala:81:{58,61}
  assign io_fwex_reg_waddr = io_deio_reg_waddr;	// <stdin>:1333:10
  assign io_fwex_reg_wdata = _io_fwex_reg_wdata_T ? _alu_io_result : (&io_deio_wb_type) ? io_deio_csr_t : 64'h0;	// <stdin>:1333:10, Excute.scala:35:21, :64:20, :96:{40,70}, Mux.scala:101:16
  assign io_fwex_reg_we = _io_fwex_reg_wdata_T | (&io_deio_wb_type);	// <stdin>:1333:10, Excute.scala:96:{40,51,70}
  assign io_fwex_csr_wdata = _alu_io_result;	// <stdin>:1333:10, Excute.scala:35:21
  assign io_fwex_csr_wen = io_deio_csr_wen;	// <stdin>:1333:10
  assign io_fwex_csr_waddr = io_deio_csr_waddr;	// <stdin>:1333:10
  assign io_clex_valid = _CLINT_type_T_6;	// <stdin>:1333:10, Excute.scala:41:42
  assign io_clex_ld_type = io_deio_ld_type;	// <stdin>:1333:10
  assign io_clex_raddr = _alu_io_result;	// <stdin>:1333:10, Excute.scala:35:21
  assign io_clex_sd_type = io_deio_sd_type;	// <stdin>:1333:10
  assign io_clex_waddr = _alu_io_result;	// <stdin>:1333:10, Excute.scala:35:21
  assign io_clex_wmask = _io_clex_wmask_T_6 ? 8'hFF : {4'h0, _io_clex_wmask_T_4 ? 4'hF : {2'h0, _io_clex_wmask_T_2 ?
                2'h3 : _GEN}};	// <stdin>:1333:10, Mux.scala:81:{58,61}
  assign io_clex_wdata = io_deio_reg2_rdata;	// <stdin>:1333:10
endmodule

module Mem(	// <stdin>:1419:10
  input         clock,
                reset,
  input  [63:0] io_emio_reg_wdata,
  input  [4:0]  io_emio_reg_waddr,
  input  [1:0]  io_emio_wb_type,
  input  [2:0]  io_emio_ld_type,
                io_emio_ld_addr_lowbit,
  input  [63:0] io_emio_csr_wdata,
  input         io_emio_csr_wen,
  input  [11:0] io_emio_csr_waddr,
  input         io_emio_has_inst,
                io_rdata_valid,
  input  [63:0] io_rdata_bits_data,
  input         io_rdata_io_valid,
  input  [63:0] io_rdata_io_bits_data,
  input         io_clmem_Clrvalue_valid,
  input  [63:0] io_clmem_Clrvalue_bits,
  input         io_stall,
  output [63:0] io_mwio_reg_wdata,
  output [4:0]  io_mwio_reg_waddr,
  output [1:0]  io_mwio_wb_type,
  output [63:0] io_mwio_csr_wdata,
  output        io_mwio_csr_wen,
  output [11:0] io_mwio_csr_waddr,
  output        io_mwio_has_inst,
  output [4:0]  io_fwmem_reg_waddr,
  output [63:0] io_fwmem_reg_wdata,
  output        io_fwmem_reg_we,
  output [63:0] io_fwmem_csr_wdata,
  output        io_fwmem_csr_wen,
  output [11:0] io_fwmem_csr_waddr);

  reg              clmemvalid_buffer;	// Mem.scala:30:36
  reg              rdatavalid_buffer;	// Mem.scala:31:36
  reg              rdataiovalid_buffer;	// Mem.scala:32:38
  reg  [63:0]      clmem_buffer;	// Mem.scala:33:31
  reg  [63:0]      rdata_buffer;	// Mem.scala:34:31
  reg  [63:0]      rdataio_buffer;	// Mem.scala:35:33
  wire [63:0]      get_value;	// Mem.scala:59:25
  assign get_value = io_clmem_Clrvalue_valid ? io_clmem_Clrvalue_bits : io_rdata_valid ? io_rdata_bits_data :
                io_rdata_io_valid ? io_rdata_io_bits_data : clmemvalid_buffer ? clmem_buffer :
                rdatavalid_buffer ? rdata_buffer : rdataiovalid_buffer ? rdataio_buffer : 64'h0;	// Mem.scala:30:36, :31:36, :32:38, :33:31, :34:31, :35:33, :66:15, Mux.scala:101:16
  wire [63:0]      rvalue;	// Mem.scala:81:22
  wire             _rvalue_T_148 = io_emio_ld_addr_lowbit == 3'h2;	// Mux.scala:81:61
  wire             _rvalue_T_162 = io_emio_ld_addr_lowbit == 3'h4;	// Mux.scala:81:61
  wire             _rvalue_T_152 = io_emio_ld_addr_lowbit == 3'h6;	// Mux.scala:81:61
  wire [7:0][63:0] _GEN = {{{{56{get_value[63]}}, get_value[63:56]}}, {{{56{get_value[55]}}, get_value[55:48]}},
                {{{56{get_value[47]}}, get_value[47:40]}}, {{{56{get_value[39]}}, get_value[39:32]}},
                {{{56{get_value[31]}}, get_value[31:24]}}, {{{56{get_value[23]}}, get_value[23:16]}},
                {{{56{get_value[15]}}, get_value[15:8]}}, {{{56{get_value[7]}}, get_value[7:0]}}};	// Bitwise.scala:77:12, Cat.scala:33:92, Mem.scala:87:{50,65}, :88:{50,66}, :89:{50,66}, :90:{50,66}, :91:{50,66}, :92:{50,66}, :93:{50,66}, :94:{50,66}, Mux.scala:81:{58,61}
  wire             _rvalue_T_160 = io_emio_ld_addr_lowbit == 3'h0;	// Mux.scala:81:61
  wire [7:0][7:0]  _GEN_0 = {{get_value[7:0]}, {get_value[7:0]}, {get_value[47:40]}, {get_value[39:32]},
                {get_value[31:24]}, {get_value[23:16]}, {get_value[15:8]}, {get_value[7:0]}};	// Mem.scala:87:{50,65}, :88:66, :89:66, :90:66, :91:66, :92:66, Mux.scala:81:{58,61}
  wire [7:0][63:0] _GEN_1 = {{_rvalue_T_162 ? {32'h0, get_value[63:32]} : _rvalue_T_160 ? {32'h0, get_value[31:0]} :
                64'h0}, {_rvalue_T_152 ? {48'h0, get_value[63:48]} : _rvalue_T_162 ? {48'h0,
                get_value[47:32]} : _rvalue_T_148 ? {48'h0, get_value[31:16]} : _rvalue_T_160 ? {48'h0,
                get_value[15:0]} : 64'h0}, {{56'h0, (&io_emio_ld_addr_lowbit) ? get_value[63:56] :
                _rvalue_T_152 ? get_value[55:48] : _GEN_0[io_emio_ld_addr_lowbit]}}, {get_value},
                {_rvalue_T_162 ? {{32{get_value[63]}}, get_value[63:32]} : _rvalue_T_160 ?
                {{32{get_value[31]}}, get_value[31:0]} : 64'h0}, {_rvalue_T_152 ? {{48{get_value[63]}},
                get_value[63:48]} : _rvalue_T_162 ? {{48{get_value[47]}}, get_value[47:32]} : _rvalue_T_148
                ? {{48{get_value[31]}}, get_value[31:16]} : _rvalue_T_160 ? {{48{get_value[15]}},
                get_value[15:0]} : 64'h0}, {_GEN[io_emio_ld_addr_lowbit]}, {64'h0}};	// Bitwise.scala:77:12, Cat.scala:33:92, Mem.scala:33:31, :87:50, :88:50, :90:50, :92:50, :93:66, :94:{50,66}, :99:66, :100:66, :101:66, :102:66, :107:66, :108:66, Mux.scala:81:{58,61}
  assign rvalue = _GEN_1[io_emio_ld_type];	// Mem.scala:83:12, Mux.scala:81:{58,61}
  wire             _io_fwmem_reg_wdata_T = io_emio_wb_type == 2'h1;	// Mem.scala:147:30
  wire             _io_fwmem_reg_wdata_T_3 = io_emio_wb_type == 2'h2;	// Mem.scala:148:30, Mux.scala:81:61
  always @(posedge clock) begin
    if (reset) begin
      clmemvalid_buffer <= 1'h0;	// Mem.scala:30:36
      rdatavalid_buffer <= 1'h0;	// Mem.scala:30:36, :31:36
      rdataiovalid_buffer <= 1'h0;	// Mem.scala:30:36, :32:38
      clmem_buffer <= 64'h0;	// Mem.scala:33:31
      rdata_buffer <= 64'h0;	// Mem.scala:33:31, :34:31
      rdataio_buffer <= 64'h0;	// Mem.scala:33:31, :35:33
    end
    else begin
      automatic logic _T = io_clmem_Clrvalue_valid & io_stall;	// Mem.scala:37:34
      automatic logic _T_3 = io_rdata_valid & io_stall;	// Mem.scala:44:25
      automatic logic _T_6 = io_rdata_io_valid & io_stall;	// Mem.scala:51:28
      clmemvalid_buffer <= _T | ~(~io_stall & clmemvalid_buffer) & clmemvalid_buffer;	// Mem.scala:30:36, :37:{34,46}, :38:27, :40:{16,26,47}, :41:27
      rdatavalid_buffer <= _T_3 | ~(~io_stall & rdatavalid_buffer) & rdatavalid_buffer;	// Mem.scala:31:36, :44:{25,37}, :45:27, :47:{16,26,47}, :48:27
      rdataiovalid_buffer <= _T_6 | ~(~io_stall & rdataiovalid_buffer) & rdataiovalid_buffer;	// Mem.scala:32:38, :51:{28,40}, :52:29, :54:{16,26,49}, :55:29
      if (_T)	// Mem.scala:37:34
        clmem_buffer <= io_clmem_Clrvalue_bits;	// Mem.scala:33:31
      if (_T_3)	// Mem.scala:44:25
        rdata_buffer <= io_rdata_bits_data;	// Mem.scala:34:31
      if (_T_6)	// Mem.scala:51:28
        rdataio_buffer <= io_rdata_io_bits_data;	// Mem.scala:35:33
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1419:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1419:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1419:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1419:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1419:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1419:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1419:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:1419:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:1419:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:1419:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:1419:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1419:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1419:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1419:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1419:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1419:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1419:10
        _RANDOM_3 = `RANDOM;	// <stdin>:1419:10
        _RANDOM_4 = `RANDOM;	// <stdin>:1419:10
        _RANDOM_5 = `RANDOM;	// <stdin>:1419:10
        _RANDOM_6 = `RANDOM;	// <stdin>:1419:10
        clmemvalid_buffer = _RANDOM_0[0];	// Mem.scala:30:36
        rdatavalid_buffer = _RANDOM_0[1];	// Mem.scala:30:36, :31:36
        rdataiovalid_buffer = _RANDOM_0[2];	// Mem.scala:30:36, :32:38
        clmem_buffer = {_RANDOM_0[31:3], _RANDOM_1, _RANDOM_2[2:0]};	// Mem.scala:30:36, :33:31
        rdata_buffer = {_RANDOM_2[31:3], _RANDOM_3, _RANDOM_4[2:0]};	// Mem.scala:33:31, :34:31
        rdataio_buffer = {_RANDOM_4[31:3], _RANDOM_5, _RANDOM_6[2:0]};	// Mem.scala:34:31, :35:33
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1419:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1419:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_mwio_reg_wdata = _io_fwmem_reg_wdata_T | (&io_emio_wb_type) ? io_emio_reg_wdata : _io_fwmem_reg_wdata_T_3 ?
                rvalue : 64'h0;	// <stdin>:1419:10, Mem.scala:33:31, :147:{30,41,60}, :148:30, Mux.scala:101:16
  assign io_mwio_reg_waddr = io_emio_reg_waddr;	// <stdin>:1419:10
  assign io_mwio_wb_type = io_emio_wb_type;	// <stdin>:1419:10
  assign io_mwio_csr_wdata = io_emio_csr_wdata;	// <stdin>:1419:10
  assign io_mwio_csr_wen = io_emio_csr_wen;	// <stdin>:1419:10
  assign io_mwio_csr_waddr = io_emio_csr_waddr;	// <stdin>:1419:10
  assign io_mwio_has_inst = io_emio_has_inst;	// <stdin>:1419:10
  assign io_fwmem_reg_waddr = io_emio_reg_waddr;	// <stdin>:1419:10
  assign io_fwmem_reg_wdata = _io_fwmem_reg_wdata_T | (&io_emio_wb_type) ? io_emio_reg_wdata : _io_fwmem_reg_wdata_T_3 ?
                rvalue : 64'h0;	// <stdin>:1419:10, Mem.scala:33:31, :147:{30,60}, :148:30, :162:41, Mux.scala:101:16
  assign io_fwmem_reg_we = |io_emio_wb_type;	// <stdin>:1419:10, Mem.scala:159:40
  assign io_fwmem_csr_wdata = io_emio_csr_wdata;	// <stdin>:1419:10
  assign io_fwmem_csr_wen = io_emio_csr_wen;	// <stdin>:1419:10
  assign io_fwmem_csr_waddr = io_emio_csr_waddr;	// <stdin>:1419:10
endmodule

module Wb(	// <stdin>:1678:10
  input  [63:0] io_mwio_reg_wdata,
  input  [4:0]  io_mwio_reg_waddr,
  input  [1:0]  io_mwio_wb_type,
  input  [63:0] io_mwio_csr_wdata,
  input         io_mwio_csr_wen,
  input  [11:0] io_mwio_csr_waddr,
  input         io_mwio_has_inst,
                io_stall,
  output [4:0]  io_rfio_rd,
  output        io_rfio_reg_wen,
  output [63:0] io_rfio_reg_wdata,
  output [4:0]  io_fwwb_reg_waddr,
  output [63:0] io_fwwb_reg_wdata,
  output        io_fwwb_reg_we,
  output [63:0] io_fwwb_csr_wdata,
  output        io_fwwb_csr_wen,
  output [11:0] io_fwwb_csr_waddr,
                io_csrs_rd,
  output        io_csrs_csr_wen,
  output [63:0] io_csrs_csr_wdata);

  assign io_rfio_rd = io_mwio_reg_waddr;	// <stdin>:1678:10
  assign io_rfio_reg_wen = ~io_stall & (|io_mwio_wb_type);	// <stdin>:1678:10, Wb.scala:32:{27,59}
  assign io_rfio_reg_wdata = io_mwio_reg_wdata;	// <stdin>:1678:10
  assign io_fwwb_reg_waddr = io_mwio_reg_waddr;	// <stdin>:1678:10
  assign io_fwwb_reg_wdata = io_mwio_reg_wdata;	// <stdin>:1678:10
  assign io_fwwb_reg_we = |io_mwio_wb_type;	// <stdin>:1678:10, Wb.scala:32:59
  assign io_fwwb_csr_wdata = io_mwio_csr_wdata;	// <stdin>:1678:10
  assign io_fwwb_csr_wen = io_mwio_csr_wen;	// <stdin>:1678:10
  assign io_fwwb_csr_waddr = io_mwio_csr_waddr;	// <stdin>:1678:10
  assign io_csrs_rd = io_mwio_csr_waddr;	// <stdin>:1678:10
  assign io_csrs_csr_wen = ~io_stall & io_mwio_csr_wen;	// <stdin>:1678:10, Wb.scala:32:27, :47:27
  assign io_csrs_csr_wdata = io_mwio_csr_wdata;	// <stdin>:1678:10
endmodule

module CLINT(	// <stdin>:1702:10
  input         clock,
                reset,
                io_clex_valid,
  input  [2:0]  io_clex_ld_type,
  input  [63:0] io_clex_raddr,
  input  [2:0]  io_clex_sd_type,
  input  [63:0] io_clex_waddr,
  input  [7:0]  io_clex_wmask,
  input  [63:0] io_clex_wdata,
  output        io_clmem_Clrvalue_valid,
  output [63:0] io_clmem_Clrvalue_bits,
  output        io_timer_int);

  reg [31:0] MSIP;	// CLINT.scala:33:23
  reg [63:0] MTIMECMP;	// CLINT.scala:34:27
  reg [63:0] MTIME;	// CLINT.scala:35:24
  reg [63:0] rvalue_buf;	// CLINT.scala:38:29
  reg        valid_buf;	// CLINT.scala:39:28
  always @(posedge clock) begin
    if (reset) begin
      MSIP <= 32'h0;	// CLINT.scala:33:23
      MTIMECMP <= 64'h0;	// CLINT.scala:34:27
      MTIME <= 64'h0;	// CLINT.scala:34:27, :35:24
      rvalue_buf <= 64'h0;	// CLINT.scala:34:27, :38:29
      valid_buf <= 1'h0;	// CLINT.scala:39:28
    end
    else begin
      automatic logic _T_1;	// CLINT.scala:58:34
      automatic logic _T_2;	// CLINT.scala:58:34
      automatic logic _T_3;	// CLINT.scala:58:34
      automatic logic _T_5 = io_clex_waddr == 64'h2000000;	// CLINT.scala:58:34, :76:34
      automatic logic _T_10 = io_clex_waddr == 64'h2004000;	// CLINT.scala:58:34, :76:34
      _T_1 = io_clex_raddr == 64'h2000000;	// CLINT.scala:58:34
      _T_2 = io_clex_raddr == 64'h2004000;	// CLINT.scala:58:34
      _T_3 = io_clex_raddr == 64'h200BFF8;	// CLINT.scala:58:34
      if (~io_clex_valid | (|io_clex_ld_type) | ~((|io_clex_sd_type) & _T_5)) begin	// CLINT.scala:47:10, :51:24, :56:{30,34}, :72:{36,40}, :76:34
      end
      else if (&io_clex_wmask)	// CLINT.scala:47:10, :51:24, :56:{30,34}, :72:{36,40}, :76:34, :80:42
        MSIP <= io_clex_wdata[31:0];	// CLINT.scala:33:23, :82:50
      else if (io_clex_wmask == 8'hF)	// CLINT.scala:47:10, :51:24, :56:{30,34}, :72:{36,40}, :76:34, :80:42
        MSIP <= io_clex_wdata[31:0];	// CLINT.scala:33:23, :85:50
      else if (io_clex_wmask == 8'h3)	// CLINT.scala:47:10, :51:24, :56:{30,34}, :72:{36,40}, :76:34, :80:42
        MSIP <= {MSIP[31:16], io_clex_wdata[15:0]};	// CLINT.scala:33:23, :88:{45,67}, Cat.scala:33:92
      else if (io_clex_wmask == 8'h1)	// CLINT.scala:47:10, :51:24, :56:{30,34}, :72:{36,40}, :76:34, :80:42
        MSIP <= {MSIP[31:8], io_clex_wdata[7:0]};	// CLINT.scala:33:23, :91:{45,66}, Cat.scala:33:92
      if (~io_clex_valid | (|io_clex_ld_type) | ~(|io_clex_sd_type) | _T_5 | ~_T_10) begin	// CLINT.scala:47:10, :48:14, :51:24, :56:{30,34}, :72:{36,40}, :76:34
      end
      else if (&io_clex_wmask)	// CLINT.scala:47:10, :48:14, :51:24, :56:{30,34}, :72:{36,40}, :76:34, :98:42
        MTIMECMP <= io_clex_wdata;	// CLINT.scala:34:27
      else if (io_clex_wmask == 8'hF)	// CLINT.scala:47:10, :48:14, :51:24, :56:{30,34}, :72:{36,40}, :76:34, :80:42, :98:42
        MTIMECMP <= {MTIMECMP[63:32], io_clex_wdata[31:0]};	// CLINT.scala:34:27, :103:{53,75}, Cat.scala:33:92
      else if (io_clex_wmask == 8'h3)	// CLINT.scala:47:10, :48:14, :51:24, :56:{30,34}, :72:{36,40}, :76:34, :80:42, :98:42
        MTIMECMP <= {MTIMECMP[63:16], io_clex_wdata[15:0]};	// CLINT.scala:34:27, :106:{53,75}, Cat.scala:33:92
      else if (io_clex_wmask == 8'h1)	// CLINT.scala:47:10, :48:14, :51:24, :56:{30,34}, :72:{36,40}, :76:34, :80:42, :98:42
        MTIMECMP <= {MTIMECMP[63:8], io_clex_wdata[7:0]};	// CLINT.scala:34:27, :109:{53,74}, Cat.scala:33:92
      if (~io_clex_valid | (|io_clex_ld_type) | ~(|io_clex_sd_type) | _T_5 | _T_10 | io_clex_waddr !=
                                                64'h200BFF8)	// CLINT.scala:47:10, :48:14, :49:11, :51:24, :56:{30,34}, :58:34, :72:{36,40}, :76:34
        MTIME <= MTIME + 64'h1;	// CLINT.scala:35:24, :49:20
      else if (&io_clex_wmask)	// CLINT.scala:47:10, :48:14, :49:11, :51:24, :56:{30,34}, :58:34, :72:{36,40}, :76:34, :116:42
        MTIME <= io_clex_wdata;	// CLINT.scala:35:24
      else if (io_clex_wmask == 8'hF)	// CLINT.scala:47:10, :48:14, :49:11, :51:24, :56:{30,34}, :58:34, :72:{36,40}, :76:34, :80:42, :116:42
        MTIME <= {MTIME[63:32], io_clex_wdata[31:0]};	// CLINT.scala:35:24, :121:{47,69}, Cat.scala:33:92
      else if (io_clex_wmask == 8'h3)	// CLINT.scala:47:10, :48:14, :49:11, :51:24, :56:{30,34}, :58:34, :72:{36,40}, :76:34, :80:42, :116:42
        MTIME <= {MTIME[63:16], io_clex_wdata[15:0]};	// CLINT.scala:35:24, :124:{47,69}, Cat.scala:33:92
      else if (io_clex_wmask == 8'h1)	// CLINT.scala:47:10, :48:14, :49:11, :51:24, :56:{30,34}, :58:34, :72:{36,40}, :76:34, :80:42, :116:42
        MTIME <= {MTIME[63:8], io_clex_wdata[7:0]};	// CLINT.scala:35:24, :127:{47,68}, Cat.scala:33:92
      if (io_clex_valid & (|io_clex_ld_type)) begin	// CLINT.scala:45:16, :51:24, :56:{30,34}
        if (_T_1)	// CLINT.scala:58:34
          rvalue_buf <= {32'h0, MSIP};	// CLINT.scala:33:23, :38:29, :61:32
        else if (_T_2)	// CLINT.scala:58:34
          rvalue_buf <= MTIMECMP;	// CLINT.scala:34:27, :38:29
        else if (_T_3)	// CLINT.scala:58:34
          rvalue_buf <= MTIME;	// CLINT.scala:35:24, :38:29
        else	// CLINT.scala:58:34
          rvalue_buf <= 64'h0;	// CLINT.scala:34:27, :38:29
      end
      else	// CLINT.scala:45:16, :51:24, :56:{30,34}
        rvalue_buf <= 64'h0;	// CLINT.scala:34:27, :38:29
      valid_buf <= io_clex_valid & (|io_clex_ld_type) & (_T_1 | _T_2 | _T_3);	// CLINT.scala:39:28, :44:15, :51:24, :56:{30,34}, :58:34, :60:31
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1702:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1702:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1702:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1702:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1702:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1702:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1702:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:1702:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:1702:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:1702:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:1702:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:1702:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1702:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1702:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1702:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1702:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1702:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1702:10
        _RANDOM_3 = `RANDOM;	// <stdin>:1702:10
        _RANDOM_4 = `RANDOM;	// <stdin>:1702:10
        _RANDOM_5 = `RANDOM;	// <stdin>:1702:10
        _RANDOM_6 = `RANDOM;	// <stdin>:1702:10
        _RANDOM_7 = `RANDOM;	// <stdin>:1702:10
        MSIP = _RANDOM_0;	// CLINT.scala:33:23
        MTIMECMP = {_RANDOM_1, _RANDOM_2};	// CLINT.scala:34:27
        MTIME = {_RANDOM_3, _RANDOM_4};	// CLINT.scala:35:24
        rvalue_buf = {_RANDOM_5, _RANDOM_6};	// CLINT.scala:38:29
        valid_buf = _RANDOM_7[0];	// CLINT.scala:39:28
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1702:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1702:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_clmem_Clrvalue_valid = valid_buf;	// <stdin>:1702:10, CLINT.scala:39:28
  assign io_clmem_Clrvalue_bits = rvalue_buf;	// <stdin>:1702:10, CLINT.scala:38:29
  assign io_timer_int = MTIME >= MTIMECMP;	// <stdin>:1702:10, CLINT.scala:34:27, :35:24, :140:28
endmodule

module Forward(	// <stdin>:1833:10
  input  [4:0]  io_fwde_reg1_raddr,
                io_fwde_reg2_raddr,
  input  [11:0] io_fwde_csr_raddr,
  input  [4:0]  io_fwex_reg_waddr,
  input  [63:0] io_fwex_reg_wdata,
  input         io_fwex_reg_we,
  input  [63:0] io_fwex_csr_wdata,
  input         io_fwex_csr_wen,
  input  [11:0] io_fwex_csr_waddr,
  input  [4:0]  io_fwmem_reg_waddr,
  input  [63:0] io_fwmem_reg_wdata,
  input         io_fwmem_reg_we,
  input  [63:0] io_fwmem_csr_wdata,
  input         io_fwmem_csr_wen,
  input  [11:0] io_fwmem_csr_waddr,
  input  [4:0]  io_fwwb_reg_waddr,
  input  [63:0] io_fwwb_reg_wdata,
  input         io_fwwb_reg_we,
  input  [63:0] io_fwwb_csr_wdata,
  input         io_fwwb_csr_wen,
  input  [11:0] io_fwwb_csr_waddr,
  output        io_fwde_fw_sel1,
                io_fwde_fw_sel2,
  output [63:0] io_fwde_fw_data1,
                io_fwde_fw_data2,
  output        io_fwde_csr_fw_sel,
  output [63:0] io_fwde_csr_fw_data);

  wire reg1_ex_hazard = (|io_fwde_reg1_raddr) & io_fwex_reg_we & io_fwex_reg_waddr == io_fwde_reg1_raddr;	// Forward.scala:46:{46,73,95}
  wire reg2_ex_hazard = (|io_fwde_reg2_raddr) & io_fwex_reg_we & io_fwex_reg_waddr == io_fwde_reg2_raddr;	// Forward.scala:47:{46,73,95}
  wire reg1_mem_hazard = (|io_fwde_reg1_raddr) & io_fwmem_reg_we & io_fwmem_reg_waddr == io_fwde_reg1_raddr;	// Forward.scala:46:46, :49:{75,98}
  wire reg2_mem_hazard = (|io_fwde_reg2_raddr) & io_fwmem_reg_we & io_fwmem_reg_waddr == io_fwde_reg2_raddr;	// Forward.scala:47:46, :50:{75,98}
  wire reg1_wb_hazard = (|io_fwde_reg1_raddr) & io_fwwb_reg_we & io_fwwb_reg_waddr == io_fwde_reg1_raddr;	// Forward.scala:46:46, :52:{73,95}
  wire reg2_wb_hazard = (|io_fwde_reg2_raddr) & io_fwwb_reg_we & io_fwwb_reg_waddr == io_fwde_reg2_raddr;	// Forward.scala:47:46, :53:{73,95}
  wire csr_ex_harzard = io_fwex_csr_wen & io_fwex_csr_waddr == io_fwde_csr_raddr;	// Forward.scala:74:{42,64}
  wire csr_mem_harzard = io_fwmem_csr_wen & io_fwmem_csr_waddr == io_fwde_csr_raddr;	// Forward.scala:75:{44,67}
  wire csr_wb_harzard = io_fwwb_csr_wen & io_fwwb_csr_waddr == io_fwde_csr_raddr;	// Forward.scala:76:{42,64}
  assign io_fwde_fw_sel1 = reg1_ex_hazard | reg1_mem_hazard | reg1_wb_hazard;	// <stdin>:1833:10, Forward.scala:46:73, :49:75, :52:73, :55:57
  assign io_fwde_fw_sel2 = reg2_ex_hazard | reg2_mem_hazard | reg2_wb_hazard;	// <stdin>:1833:10, Forward.scala:47:73, :50:75, :53:73, :56:57
  assign io_fwde_fw_data1 = reg1_ex_hazard ? io_fwex_reg_wdata : reg1_mem_hazard ? io_fwmem_reg_wdata : reg1_wb_hazard
                ? io_fwwb_reg_wdata : 64'h0;	// <stdin>:1833:10, Forward.scala:46:73, :49:75, :52:73, Mux.scala:101:16
  assign io_fwde_fw_data2 = reg2_ex_hazard ? io_fwex_reg_wdata : reg2_mem_hazard ? io_fwmem_reg_wdata : reg2_wb_hazard
                ? io_fwwb_reg_wdata : 64'h0;	// <stdin>:1833:10, Forward.scala:47:73, :50:75, :53:73, Mux.scala:101:16
  assign io_fwde_csr_fw_sel = csr_ex_harzard | csr_mem_harzard | csr_wb_harzard;	// <stdin>:1833:10, Forward.scala:74:42, :75:44, :76:42, :78:60
  assign io_fwde_csr_fw_data = csr_ex_harzard ? io_fwex_csr_wdata : csr_mem_harzard ? io_fwmem_csr_wdata : csr_wb_harzard
                ? io_fwwb_csr_wdata : 64'h0;	// <stdin>:1833:10, Forward.scala:74:42, :75:44, :76:42, Mux.scala:101:16
endmodule

module Regfile(	// <stdin>:1890:10
  input         clock,
  input  [4:0]  io_RfDe_reg1_raddr,
                io_RfDe_reg2_raddr,
                io_RfWb_rd,
  input         io_RfWb_reg_wen,
  input  [63:0] io_RfWb_reg_wdata,
  output [63:0] io_RfDe_reg1_rdata,
                io_RfDe_reg2_rdata);

  wire [63:0] _regs_ext_R0_data;	// Regfile.scala:32:19
  wire [63:0] _regs_ext_R1_data;	// Regfile.scala:32:19
  wire [63:0] _regs_ext_R2_data;	// Regfile.scala:32:19
  regs_combMem regs_ext (	// Regfile.scala:32:19
    .R0_addr (io_RfWb_rd),
    .R0_en   (1'h1),	// <stdin>:1890:10
    .R0_clk  (clock),
    .R1_addr (io_RfDe_reg1_raddr),
    .R1_en   (1'h1),	// <stdin>:1890:10
    .R1_clk  (clock),
    .R2_addr (io_RfDe_reg2_raddr),
    .R2_en   (1'h1),	// <stdin>:1890:10
    .R2_clk  (clock),
    .W0_addr (5'h0),	// Regfile.scala:37:9
    .W0_en   (1'h1),	// <stdin>:1890:10
    .W0_clk  (clock),
    .W0_data (64'h0),	// Regfile.scala:37:13
    .W1_addr (io_RfWb_rd),
    .W1_en   (1'h1),	// <stdin>:1890:10
    .W1_clk  (clock),
    .W1_data (io_RfWb_reg_wen & (|io_RfWb_rd) ? io_RfWb_reg_wdata : _regs_ext_R0_data),	// Regfile.scala:32:19, :39:{28,45,60}
    .R0_data (_regs_ext_R0_data),
    .R1_data (_regs_ext_R1_data),
    .R2_data (_regs_ext_R2_data)
  );
  assign io_RfDe_reg1_rdata = (|io_RfDe_reg1_raddr) ? _regs_ext_R1_data : 64'h0;	// <stdin>:1890:10, Regfile.scala:32:19, :37:13, :48:{30,50}
  assign io_RfDe_reg2_rdata = (|io_RfDe_reg2_raddr) ? _regs_ext_R2_data : 64'h0;	// <stdin>:1890:10, Regfile.scala:32:19, :37:13, :49:{30,50}
endmodule

module FlowControl(	// <stdin>:1913:10
  input         io_fcde_jump_flag,
  input  [31:0] io_fcde_jump_pc,
  input         io_fcde_load_use,
                io_fcex_jump_flag,
  input  [31:0] io_fcex_jump_pc,
  input         io_fctr_pop_NOP,
  input  [2:0]  io_fctr_trap_state,
  input         io_fctr_jump_flag,
  input  [31:0] io_fctr_jump_pc,
  input         io_fcIcache_req,
  input  [2:0]  io_fcIcache_state,
  input  [7:0]  io_fcIcache_mask,
  input         io_fcIcache_cpu_valid,
                io_fcIcache_axi_valid,
                io_fcDcache_req,
  input  [2:0]  io_fcDcache_state,
  input  [7:0]  io_fcDcache_mask,
  input         io_fcDcache_hit,
                io_fcDcache_axi_valid,
                io_fcio_req,
                io_fcio_valid,
  output        io_fcfe_jump_flag,
  output [31:0] io_fcfe_jump_pc,
  output        io_fcfe_flush,
                io_fcfe_stall,
                io_fcde_flush,
                io_fcde_stall,
                io_fcex_stall,
                io_fcmem_stall,
                io_fcwb_stall,
                io_sdb_stall);

  wire Icache_stall;	// <stdin>:1918:5
  wire Dcache_stall;	// <stdin>:1920:5
  wire IO_stall;	// <stdin>:1922:5
  wire _T_8 = io_fcIcache_state == 3'h0;	// FlowControl.scala:141:34, :143:34
  assign Icache_stall = ~io_fcIcache_cpu_valid & io_fcIcache_state != 3'h1 & ~(io_fcIcache_state == 3'h4 &
                io_fcIcache_axi_valid) & ((|io_fcIcache_state) | _T_8 & io_fcIcache_req &
                (|io_fcIcache_mask) | _T_8 & io_fcIcache_req & ~(|io_fcIcache_mask) & ~io_fcDcache_hit);	// FlowControl.scala:133:32, :134:22, :135:{34,60}, :137:{34,65,90}, :138:22, :141:{34,42}, :142:22, :143:{34,61,81,85}, :145:{64,86,89}
  wire _T_25 = io_fcDcache_state == 3'h0;	// FlowControl.scala:141:34, :161:34
  assign Dcache_stall = io_fcDcache_state != 3'h1 & ~(io_fcDcache_state == 3'h4 & io_fcDcache_axi_valid) &
                ~((&io_fcDcache_state) & io_fcDcache_axi_valid) & ((|io_fcDcache_state) | _T_25 &
                io_fcDcache_req & (|io_fcDcache_mask) | _T_25 & io_fcDcache_req & ~(|io_fcDcache_mask) &
                ~io_fcDcache_hit);	// FlowControl.scala:135:34, :137:34, :153:{28,54}, :154:22, :155:{34,65,90}, :156:22, :157:{34,59,84}, :158:22, :159:{34,42}, :160:22, :161:{34,61,81,85}, :163:{64,86,89}
  assign IO_stall = ~io_fcio_valid & io_fcio_req;	// FlowControl.scala:172:24, :173:18, :174:28
  wire _SFBundle_T_3 = io_fctr_trap_state == 3'h4 | (&io_fctr_trap_state);	// FlowControl.scala:137:34, :186:{33,47,70}
  wire _SFBundle_T_21_0 = io_fctr_pop_NOP | io_fctr_trap_state == 3'h1 | io_fctr_trap_state == 3'h2 |
                io_fctr_trap_state == 3'h3 | io_fctr_trap_state == 3'h5 | io_fctr_trap_state == 3'h6;	// FlowControl.scala:135:34, :187:{60,93}, :188:{36,71,87,109}
  wire SFBundle_0 = IO_stall | Icache_stall | Dcache_stall | io_fcde_load_use | ~_SFBundle_T_3 &
                _SFBundle_T_21_0;	// FlowControl.scala:186:47, :188:87, Mux.scala:101:16
  wire SFBundle_1 = IO_stall | Icache_stall | Dcache_stall;	// Mux.scala:101:16
  wire SFBundle_2 = IO_stall | Icache_stall | Dcache_stall;	// Mux.scala:101:16
  wire SFBundle_4 = IO_stall | Icache_stall | Dcache_stall;	// Mux.scala:101:16
  assign io_fcfe_jump_flag = io_fcde_jump_flag | io_fcex_jump_flag | io_fctr_jump_flag;	// <stdin>:1913:10, FlowControl.scala:208:65
  assign io_fcfe_jump_pc = io_fctr_jump_flag ? io_fctr_jump_pc : io_fcex_jump_flag ? io_fcex_jump_pc :
                io_fcde_jump_flag ? io_fcde_jump_pc : 32'h80000000;	// <stdin>:1913:10, Mux.scala:101:16
  assign io_fcfe_flush = ~IO_stall & ~Icache_stall & ~Dcache_stall & ~io_fcde_load_use & (_SFBundle_T_3 |
                ~_SFBundle_T_21_0 & (io_fctr_jump_flag | io_fcex_jump_flag | io_fcde_jump_flag));	// <stdin>:1913:10, FlowControl.scala:186:47, :188:87, Mux.scala:101:16
  assign io_fcfe_stall = SFBundle_0;	// <stdin>:1913:10, Mux.scala:101:16
  assign io_fcde_flush = ~IO_stall & ~Icache_stall & ~Dcache_stall & (io_fcde_load_use | _SFBundle_T_3 |
                _SFBundle_T_21_0 | ~io_fctr_jump_flag & io_fcex_jump_flag);	// <stdin>:1913:10, FlowControl.scala:186:47, :188:87, Mux.scala:101:16
  assign io_fcde_stall = SFBundle_1;	// <stdin>:1913:10, Mux.scala:101:16
  assign io_fcex_stall = SFBundle_2;	// <stdin>:1913:10, Mux.scala:101:16
  assign io_fcmem_stall = IO_stall | Icache_stall | Dcache_stall;	// <stdin>:1913:10, Mux.scala:101:16
  assign io_fcwb_stall = SFBundle_4;	// <stdin>:1913:10, Mux.scala:101:16
  assign io_sdb_stall = SFBundle_0 & SFBundle_1 & SFBundle_2 & SFBundle_4;	// <stdin>:1913:10, FlowControl.scala:222:67, Mux.scala:101:16
endmodule

module CSRs(	// <stdin>:2152:10
  input         clock,
                reset,
  input  [11:0] io_CSRDe_csr_raddr,
                io_CSRWb_rd,
  input         io_CSRWb_csr_wen,
  input  [63:0] io_CSRWb_csr_wdata,
  input  [11:0] io_CSRTr_rd,
  input         io_CSRTr_csr_wen,
  input  [63:0] io_CSRTr_csr_wdata,
  input         io_timer_int,
  output [63:0] io_CSRDe_csr_rdata,
                io_CSRTr_MTVEC,
                io_CSRTr_MCAUSE,
                io_CSRTr_MEPC,
                io_CSRTr_MIE,
                io_CSRTr_MIP,
                io_CSRTr_MSTATUS);

  reg [63:0] MTVEC;	// CSRs.scala:43:24
  reg [63:0] MCAUSE;	// CSRs.scala:44:25
  reg [63:0] MEPC;	// CSRs.scala:45:23
  reg [63:0] MIE;	// CSRs.scala:46:22
  reg [63:0] MIP;	// CSRs.scala:47:22
  reg [63:0] MSTATUS;	// CSRs.scala:48:26
  reg [63:0] MSCRATCH;	// CSRs.scala:49:27
  always @(posedge clock) begin
    if (reset) begin
      MTVEC <= 64'h0;	// CSRs.scala:43:24
      MCAUSE <= 64'h0;	// CSRs.scala:43:24, :44:25
      MEPC <= 64'h0;	// CSRs.scala:43:24, :45:23
      MIE <= 64'h0;	// CSRs.scala:43:24, :46:22
      MIP <= 64'h0;	// CSRs.scala:43:24, :47:22
      MSTATUS <= 64'h0;	// CSRs.scala:43:24, :48:26
      MSCRATCH <= 64'h0;	// CSRs.scala:43:24, :49:27
    end
    else begin
      automatic logic [11:0] _T = io_CSRWb_rd | io_CSRTr_rd;	// CSRs.scala:56:24
      automatic logic        _T_1 = _T == 12'h305;	// CSRs.scala:56:{24,38}
      automatic logic        _T_2 = _T == 12'h342;	// CSRs.scala:56:{24,38}
      automatic logic        _T_3 = _T == 12'h341;	// CSRs.scala:56:{24,38}
      automatic logic        _T_4 = _T == 12'h304;	// CSRs.scala:56:{24,38}
      automatic logic        _T_5 = _T == 12'h344;	// CSRs.scala:56:{24,38}
      automatic logic        _T_6 = _T == 12'h300;	// CSRs.scala:56:{24,38}
      if (_T_1) begin	// CSRs.scala:56:38
        if (io_CSRWb_csr_wen)
          MTVEC <= io_CSRWb_csr_wdata;	// CSRs.scala:43:24
        else if (io_CSRTr_csr_wen)
          MTVEC <= io_CSRTr_csr_wdata;	// CSRs.scala:43:24
        else
          MTVEC <= 64'h0;	// CSRs.scala:43:24
      end
      if (_T_1 | ~_T_2) begin	// CSRs.scala:44:25, :56:38
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:44:25, :56:38
        MCAUSE <= io_CSRWb_csr_wdata;	// CSRs.scala:44:25
      else if (io_CSRTr_csr_wen)	// CSRs.scala:44:25, :56:38
        MCAUSE <= io_CSRTr_csr_wdata;	// CSRs.scala:44:25
      else	// CSRs.scala:44:25, :56:38
        MCAUSE <= 64'h0;	// CSRs.scala:43:24, :44:25
      if (_T_1 | _T_2 | ~_T_3) begin	// CSRs.scala:45:23, :56:38
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:45:23, :56:38
        MEPC <= io_CSRWb_csr_wdata;	// CSRs.scala:45:23
      else if (io_CSRTr_csr_wen)	// CSRs.scala:45:23, :56:38
        MEPC <= io_CSRTr_csr_wdata;	// CSRs.scala:45:23
      else	// CSRs.scala:45:23, :56:38
        MEPC <= 64'h0;	// CSRs.scala:43:24, :45:23
      if (_T_1 | _T_2 | _T_3 | ~_T_4) begin	// CSRs.scala:46:22, :56:38
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:46:22, :56:38
        MIE <= io_CSRWb_csr_wdata;	// CSRs.scala:46:22
      else if (io_CSRTr_csr_wen)	// CSRs.scala:46:22, :56:38
        MIE <= io_CSRTr_csr_wdata;	// CSRs.scala:46:22
      else	// CSRs.scala:46:22, :56:38
        MIE <= 64'h0;	// CSRs.scala:43:24, :46:22
      if (_T_1 | _T_2 | _T_3 | _T_4 | ~_T_5) begin	// CSRs.scala:52:23, :56:38
        if (io_timer_int)
          MIP <= {MIP[63:8], 1'h1, MIP[6:0]};	// CSRs.scala:47:22, :53:{23,39}, Cat.scala:33:92
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:52:23, :56:38
        MIP <= io_CSRWb_csr_wdata;	// CSRs.scala:47:22
      else if (io_CSRTr_csr_wen)	// CSRs.scala:52:23, :56:38
        MIP <= io_CSRTr_csr_wdata;	// CSRs.scala:47:22
      else	// CSRs.scala:52:23, :56:38
        MIP <= 64'h0;	// CSRs.scala:43:24, :47:22
      if (_T_1 | _T_2 | _T_3 | _T_4 | _T_5 | ~_T_6) begin	// CSRs.scala:48:26, :56:38
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:48:26, :56:38
        MSTATUS <= io_CSRWb_csr_wdata;	// CSRs.scala:48:26
      else if (io_CSRTr_csr_wen)	// CSRs.scala:48:26, :56:38
        MSTATUS <= io_CSRTr_csr_wdata;	// CSRs.scala:48:26
      else	// CSRs.scala:48:26, :56:38
        MSTATUS <= 64'h0;	// CSRs.scala:43:24, :48:26
      if (_T_1 | _T_2 | _T_3 | _T_4 | _T_5 | _T_6 | _T != 12'h340) begin	// CSRs.scala:49:27, :56:{24,38}
      end
      else if (io_CSRWb_csr_wen)	// CSRs.scala:49:27, :56:{24,38}
        MSCRATCH <= io_CSRWb_csr_wdata;	// CSRs.scala:49:27
      else if (io_CSRTr_csr_wen)	// CSRs.scala:49:27, :56:{24,38}
        MSCRATCH <= io_CSRTr_csr_wdata;	// CSRs.scala:49:27
      else	// CSRs.scala:49:27, :56:{24,38}
        MSCRATCH <= 64'h0;	// CSRs.scala:43:24, :49:27
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2152:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2152:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2152:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2152:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2152:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2152:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2152:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:2152:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:2152:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:2152:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:2152:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:2152:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:2152:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:2152:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:2152:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:2152:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:2152:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:2152:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2152:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2152:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2152:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2152:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2152:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2152:10
        _RANDOM_3 = `RANDOM;	// <stdin>:2152:10
        _RANDOM_4 = `RANDOM;	// <stdin>:2152:10
        _RANDOM_5 = `RANDOM;	// <stdin>:2152:10
        _RANDOM_6 = `RANDOM;	// <stdin>:2152:10
        _RANDOM_7 = `RANDOM;	// <stdin>:2152:10
        _RANDOM_8 = `RANDOM;	// <stdin>:2152:10
        _RANDOM_9 = `RANDOM;	// <stdin>:2152:10
        _RANDOM_10 = `RANDOM;	// <stdin>:2152:10
        _RANDOM_11 = `RANDOM;	// <stdin>:2152:10
        _RANDOM_12 = `RANDOM;	// <stdin>:2152:10
        _RANDOM_13 = `RANDOM;	// <stdin>:2152:10
        MTVEC = {_RANDOM_0, _RANDOM_1};	// CSRs.scala:43:24
        MCAUSE = {_RANDOM_2, _RANDOM_3};	// CSRs.scala:44:25
        MEPC = {_RANDOM_4, _RANDOM_5};	// CSRs.scala:45:23
        MIE = {_RANDOM_6, _RANDOM_7};	// CSRs.scala:46:22
        MIP = {_RANDOM_8, _RANDOM_9};	// CSRs.scala:47:22
        MSTATUS = {_RANDOM_10, _RANDOM_11};	// CSRs.scala:48:26
        MSCRATCH = {_RANDOM_12, _RANDOM_13};	// CSRs.scala:49:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2152:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2152:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_CSRDe_csr_rdata = io_CSRDe_csr_raddr == 12'h340 ? MSCRATCH : io_CSRDe_csr_raddr == 12'h300 ? MSTATUS :
                io_CSRDe_csr_raddr == 12'h344 | io_CSRDe_csr_raddr == 12'h304 ? MIE : io_CSRDe_csr_raddr ==
                12'h341 ? MEPC : io_CSRDe_csr_raddr == 12'h342 ? MCAUSE : io_CSRDe_csr_raddr == 12'h305 ?
                MTVEC : 64'h0;	// <stdin>:2152:10, CSRs.scala:43:24, :44:25, :45:23, :46:22, :48:26, :49:27, :56:38, Mux.scala:81:{58,61}
  assign io_CSRTr_MTVEC = MTVEC;	// <stdin>:2152:10, CSRs.scala:43:24
  assign io_CSRTr_MCAUSE = MCAUSE;	// <stdin>:2152:10, CSRs.scala:44:25
  assign io_CSRTr_MEPC = MEPC;	// <stdin>:2152:10, CSRs.scala:45:23
  assign io_CSRTr_MIE = MIE;	// <stdin>:2152:10, CSRs.scala:46:22
  assign io_CSRTr_MIP = MIP;	// <stdin>:2152:10, CSRs.scala:47:22
  assign io_CSRTr_MSTATUS = MSTATUS;	// <stdin>:2152:10, CSRs.scala:48:26
endmodule

module Trap(	// <stdin>:2241:10
  input         clock,
                reset,
                io_ex_hasinst,
                io_mem_hasinst,
                io_wb_hasinst,
  input  [63:0] io_csrtr_MTVEC,
                io_csrtr_MCAUSE,
                io_csrtr_MEPC,
                io_csrtr_MIE,
                io_csrtr_MIP,
                io_csrtr_MSTATUS,
  input  [31:0] io_inst,
                io_pc,
  output [11:0] io_csrtr_rd,
  output        io_csrtr_csr_wen,
  output [63:0] io_csrtr_csr_wdata,
  output        io_fctr_pop_NOP,
  output [2:0]  io_fctr_trap_state,
  output        io_fctr_jump_flag,
  output [31:0] io_fctr_jump_pc);

  reg  [63:0]      cause;	// Trap.scala:45:24
  reg  [31:0]      pc;	// Trap.scala:46:21
  reg  [2:0]       state;	// Trap.scala:48:24
  wire             _T = state == 3'h0;	// Trap.scala:48:24, :64:18
  wire             _T_2 = io_inst == 32'h73 & io_csrtr_MSTATUS[3];	// Trap.scala:52:36, :71:{26,57}
  wire             _T_3 = io_inst == 32'h30200073;	// Trap.scala:80:32
  wire             _T_7 = io_csrtr_MIP[7] & io_csrtr_MSTATUS[3] & io_csrtr_MIE[7];	// Trap.scala:52:36, :85:{36,57,72}
  wire             _T_24 = io_csrtr_MCAUSE == 64'h8000000000000007;	// Trap.scala:131:36
  wire [7:0][63:0] _GEN = {{{io_csrtr_MSTATUS[63:4], io_csrtr_MSTATUS[7], io_csrtr_MSTATUS[2:0]}}, {_T_24 ?
                {io_csrtr_MIP[63:8], 1'h0, io_csrtr_MIP[6:0]} : 64'h0}, {64'h0}, {{io_csrtr_MSTATUS[63:8],
                io_csrtr_MSTATUS[3], io_csrtr_MSTATUS[6:4], 1'h0, io_csrtr_MSTATUS[2:0]}}, {cause},
                {{32'h0, pc}}, {64'h0}, {64'h0}};	// Cat.scala:33:92, Trap.scala:45:24, :46:21, :52:36, :58:24, :64:18, :67:32, :104:32, :111:32, :119:{32,55,100,133}, :131:36, :133:{40,59,84}, :143:{32,55,79,100}
  wire [7:0][11:0] _GEN_0 = {{12'h300}, {_T_24 ? 12'h344 : 12'h0}, {12'h0}, {12'h300}, {12'h342}, {12'h341}, {12'h0},
                {12'h0}};	// Trap.scala:61:17, :64:18, :69:25, :106:25, :113:25, :121:25, :131:36, :135:33, :145:25
  wire             _T_26 = state == 3'h4;	// Trap.scala:48:24, :115:19, :154:18
  always @(posedge clock) begin
    if (reset) begin
      cause <= 64'h0;	// Trap.scala:45:24
      pc <= 32'h0;	// Trap.scala:46:21
      state <= 3'h0;	// Trap.scala:48:24
    end
    else begin
      automatic logic            _GEN_1;	// Trap.scala:46:21, :80:62, :85:76
      automatic logic            _GEN_2 = io_ex_hasinst | io_mem_hasinst | io_wb_hasinst;	// Trap.scala:48:24, :99:70, :100:23
      automatic logic [7:0][2:0] _GEN_3;	// Trap.scala:48:24, :64:18, :71:74, :99:70, :108:19, :115:19, :123:19, :126:70, :139:19, :147:19
      _GEN_1 = _T_3 | ~_T_7;	// Trap.scala:46:21, :80:{32,62}, :85:{57,76}
      if (_T) begin	// Trap.scala:64:18
        if (_T_2)	// Trap.scala:71:57
          cause <= 64'hB;	// Trap.scala:45:24, :75:23
        else if (_GEN_1) begin	// Trap.scala:46:21, :71:57, :80:62, :85:76
        end
        else	// Trap.scala:46:21, :71:57, :80:62, :85:76
          cause <= 64'h8000000000000007;	// Trap.scala:45:24, :131:36
      end
      if (_T & (_T_2 | ~_GEN_1))	// Trap.scala:46:21, :64:18, :71:{57,74}, :74:20, :80:62, :85:76
        pc <= io_pc;	// Trap.scala:46:21
      _GEN_3 = {{3'h0}, {3'h7}, {_GEN_2 ? state : 3'h6}, {3'h0}, {3'h4}, {3'h3}, {_GEN_2 ? state : 3'h2},
                                                {_T_2 ? 3'h1 : _T_3 ? 3'h5 : _T_7 ? 3'h1 : state}};	// Trap.scala:48:24, :64:18, :71:{57,74}, :79:23, :80:{32,62}, :83:23, :85:{57,76}, :94:23, :99:70, :100:23, :108:19, :115:19, :123:19, :126:70, :127:23, :139:19, :147:19
      state <= _GEN_3[state];	// Trap.scala:48:24, :64:18, :71:74, :99:70, :108:19, :115:19, :123:19, :126:70, :139:19, :147:19
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2241:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2241:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2241:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2241:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2241:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2241:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2241:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:2241:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2241:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2241:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2241:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2241:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2241:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2241:10
        _RANDOM_3 = `RANDOM;	// <stdin>:2241:10
        cause = {_RANDOM_0, _RANDOM_1};	// Trap.scala:45:24
        pc = _RANDOM_2;	// Trap.scala:46:21
        state = _RANDOM_3[2:0];	// Trap.scala:48:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2241:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2241:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_csrtr_rd = _GEN_0[state];	// <stdin>:2241:10, Trap.scala:48:24, :61:17, :64:18, :69:25, :106:25, :113:25, :121:25, :131:36, :145:25
  assign io_csrtr_csr_wen = ~_T & state != 3'h1 & (state == 3'h2 | state == 3'h3 | state == 3'h4 | state != 3'h5 &
                (state == 3'h6 ? _T_24 : (&state)));	// <stdin>:2241:10, Trap.scala:48:24, :59:22, :64:18, :68:30, :79:23, :83:23, :100:23, :105:30, :108:19, :115:19, :127:23, :131:36
  assign io_csrtr_csr_wdata = _GEN[state];	// <stdin>:2241:10, Trap.scala:48:24, :58:24, :64:18, :67:32, :104:32, :111:32, :119:32, :131:36, :143:32
  assign io_fctr_pop_NOP = _T & (_T_2 | _T_3 | _T_7);	// <stdin>:2241:10, Trap.scala:62:21, :64:18, :71:{57,74}, :78:33, :80:{32,62}, :85:57
  assign io_fctr_trap_state = state;	// <stdin>:2241:10, Trap.scala:48:24
  assign io_fctr_jump_flag = _T_26 | (&state);	// <stdin>:2241:10, Trap.scala:48:24, :154:18, :156:31
  assign io_fctr_jump_pc = _T_26 ? io_csrtr_MTVEC[31:0] : (&state) ? io_csrtr_MEPC[31:0] : 32'h0;	// <stdin>:2241:10, Trap.scala:46:21, :48:24, :153:21, :154:18, :157:29, :161:29
endmodule

module AXIArbitor(	// <stdin>:2375:10
  input         clock,
                reset,
                io_master0_req_valid,
                io_master0_req_bits_rw,
  input  [31:0] io_master0_req_bits_addr,
  input  [63:0] io_master0_req_bits_data,
  input  [7:0]  io_master0_req_bits_mask,
  input         io_master1_req_valid,
                io_master1_req_bits_rw,
  input  [31:0] io_master1_req_bits_addr,
  input  [63:0] io_master1_req_bits_data,
  input  [7:0]  io_master1_req_bits_mask,
  input         io_master2_req_valid,
                io_master2_req_bits_rw,
  input  [31:0] io_master2_req_bits_addr,
  input  [63:0] io_master2_req_bits_data,
  input  [7:0]  io_master2_req_bits_mask,
  input         io_AXI_O_aw_ready,
                io_AXI_O_w_ready,
                io_AXI_O_b_valid,
                io_AXI_O_ar_ready,
                io_AXI_O_r_valid,
  input  [63:0] io_AXI_O_r_bits_data,
  output        io_master0_resp_valid,
  output [63:0] io_master0_resp_bits_data,
  output        io_master1_resp_valid,
  output [63:0] io_master1_resp_bits_data,
  output        io_master2_resp_valid,
  output [63:0] io_master2_resp_bits_data,
  output        io_AXI_O_aw_valid,
  output [31:0] io_AXI_O_aw_bits_addr,
  output        io_AXI_O_w_valid,
  output [63:0] io_AXI_O_w_bits_data,
  output [7:0]  io_AXI_O_w_bits_strb,
  output        io_AXI_O_ar_valid,
  output [31:0] io_AXI_O_ar_bits_addr,
  output        io_AXI_O_r_ready);

  wire [3:0]       master_choose;	// <stdin>:2380:5
  assign master_choose = io_master0_req_valid ? 4'h9 : io_master1_req_valid ? 4'hA : io_master2_req_valid ? 4'hC :
                4'h0;	// <stdin>:2381:22, AXIArbitor.scala:51:19, Mux.scala:101:16
  reg  [3:0]       choose_buffer;	// AXIArbitor.scala:59:32
  wire [31:0]      _addr_T_6 = choose_buffer[0] ? io_master0_req_bits_addr : choose_buffer[1] ? io_master1_req_bits_addr :
                choose_buffer[2] ? io_master2_req_bits_addr : 32'h0;	// AXIArbitor.scala:59:32, :84:30, :85:30, :86:30, Mux.scala:101:16
  reg  [1:0]       state;	// AXIArbitor.scala:125:24
  reg              aw_comp;	// AXIArbitor.scala:127:26
  reg              w_comp;	// AXIArbitor.scala:128:25
  wire             _T = state == 2'h0;	// AXIArbitor.scala:125:24, :166:18
  wire             _T_2 = state == 2'h1;	// AXIArbitor.scala:125:24, :166:18, :176:27
  wire             _GEN = ~_T & _T_2 & ~aw_comp;	// AXIArbitor.scala:127:26, :148:23, :166:18, :182:37
  wire             _GEN_0 = _T | ~(_T_2 & choose_buffer[3]);	// AXIArbitor.scala:59:32, :80:28, :149:27, :166:18, :183:35
  wire             _GEN_1 = ~_T & _T_2 & ~w_comp;	// AXIArbitor.scala:128:25, :148:23, :152:22, :166:18, :188:36
  wire             _T_4 = aw_comp & w_comp & ~_T & _T_2 & io_AXI_O_b_valid;	// AXIArbitor.scala:127:26, :128:25, :148:23, :166:18, :197:36
  wire             _GEN_2 = ~(choose_buffer[0]) & choose_buffer[1];	// AXIArbitor.scala:59:32, :84:30, :85:30, :143:27, :202:39, :204:45
  wire             _GEN_3 = ~(choose_buffer[0]) & ~(choose_buffer[1]);	// AXIArbitor.scala:59:32, :84:30, :85:30, :143:27, :145:27, :202:39, :204:45, :207:43
  wire             _T_7 = state == 2'h2;	// AXIArbitor.scala:125:24, :166:18, :174:27
  wire             _GEN_4 = ~_T & ~_T_2 & _T_7;	// AXIArbitor.scala:127:26, :148:23, :158:23, :166:18
  wire             _GEN_5 = ~_T & ~_T_2 & ~_T_7 & (&state);	// AXIArbitor.scala:125:24, :127:26, :148:23, :162:22, :166:18
  wire             _GEN_6 = ~_T & ~_T_2 & ~_T_7 & (&state) & io_AXI_O_r_valid & _GEN_5;	// AXIArbitor.scala:125:24, :127:26, :139:12, :148:23, :162:22, :166:18
  wire [3:0][63:0] _GEN_7 = {{_T_2 | _T_7 | ~((&state) & _GEN_6 & choose_buffer[0]) ? 64'h0 : io_AXI_O_r_bits_data},
                {64'h0}, {64'h0}, {64'h0}};	// AXIArbitor.scala:59:32, :84:30, :125:24, :139:12, :142:31, :166:18, :225:25, Mux.scala:101:16
  wire [3:0][63:0] _GEN_8 = {{_T_2 | _T_7 | ~(&state) | ~_GEN_6 | choose_buffer[0] | ~(choose_buffer[1]) ? 64'h0 :
                io_AXI_O_r_bits_data}, {64'h0}, {64'h0}, {64'h0}};	// AXIArbitor.scala:59:32, :84:30, :85:30, :125:24, :139:12, :144:31, :145:27, :166:18, :204:45, :207:43, :225:25, :228:39, Mux.scala:101:16
  wire [3:0][63:0] _GEN_9 = {{_T_2 | _T_7 | ~(&state) | ~_GEN_6 | choose_buffer[0] | choose_buffer[1] ? 64'h0 :
                io_AXI_O_r_bits_data}, {64'h0}, {64'h0}, {64'h0}};	// AXIArbitor.scala:59:32, :84:30, :85:30, :125:24, :139:12, :144:31, :146:31, :166:18, :225:25, :228:39, Mux.scala:101:16
  always @(posedge clock) begin
    if (reset) begin
      choose_buffer <= 4'h0;	// <stdin>:2381:22, AXIArbitor.scala:59:32
      state <= 2'h0;	// AXIArbitor.scala:125:24
      aw_comp <= 1'h0;	// AXIArbitor.scala:127:26, Mux.scala:101:16
      w_comp <= 1'h0;	// AXIArbitor.scala:128:25, Mux.scala:101:16
    end
    else begin
      automatic logic [3:0][1:0] _GEN_10;	// AXIArbitor.scala:166:18, :170:35, :197:46, :218:26
      if (_T) begin	// AXIArbitor.scala:166:18
        if (master_choose[3])	// AXIArbitor.scala:68:33
          choose_buffer <= master_choose;	// AXIArbitor.scala:59:32, :68:33
        else	// AXIArbitor.scala:68:33
          choose_buffer <= 4'h0;	// <stdin>:2381:22, AXIArbitor.scala:59:32
      end
      _GEN_10 = {{(&state) & _GEN_6 ? 2'h0 : state}, {~_T & ~_T_2 & _T_7 & _GEN_4 & io_AXI_O_ar_ready ?
                                                2'h3 : state}, {_T_4 ? 2'h0 : state}, {master_choose[3] ? (master_choose[3] &
                                                (master_choose[0] ? io_master0_req_bits_rw : master_choose[1] ? io_master1_req_bits_rw :
                                                master_choose[2] & io_master2_req_bits_rw) ? 2'h2 : 2'h1) : state}};	// AXIArbitor.scala:68:{19,33}, :72:30, :73:30, :74:30, :125:24, :127:26, :138:13, :139:12, :148:23, :158:23, :166:18, :170:35, :173:30, :174:27, :176:27, :197:{36,46}, :198:23, :218:26, :219:23, :225:25, Mux.scala:101:16
      state <= _GEN_10[state];	// AXIArbitor.scala:125:24, :166:18, :170:35, :197:46, :218:26
      if (_T | ~_T_2) begin	// AXIArbitor.scala:127:26, :166:18
      end
      else begin	// AXIArbitor.scala:127:26, :166:18
        aw_comp <= ~_T_4 & (_GEN & io_AXI_O_aw_ready | aw_comp);	// AXIArbitor.scala:127:26, :148:23, :166:18, :185:{21,27,46}, :197:{36,46}, :199:25
        w_comp <= ~_T_4 & (_GEN_1 & io_AXI_O_w_ready | w_comp);	// AXIArbitor.scala:128:25, :152:22, :166:18, :185:21, :191:{20,26,44}, :197:{36,46}, :199:25, :200:24
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2375:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2375:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2375:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2375:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2375:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2375:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2375:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2375:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2375:10
        choose_buffer = _RANDOM_0[3:0];	// AXIArbitor.scala:59:32
        state = _RANDOM_0[5:4];	// AXIArbitor.scala:59:32, :125:24
        aw_comp = _RANDOM_0[6];	// AXIArbitor.scala:59:32, :127:26
        w_comp = _RANDOM_0[7];	// AXIArbitor.scala:59:32, :128:25
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2375:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2375:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_master0_resp_valid = ~_T & (_T_2 ? _T_4 & choose_buffer[0] : ~_T_7 & (&state) & _GEN_6 & choose_buffer[0]);	// <stdin>:2375:10, AXIArbitor.scala:59:32, :84:30, :125:24, :139:12, :141:27, :148:23, :162:22, :166:18, :197:{36,46}, :202:39
  assign io_master0_resp_bits_data = _GEN_7[state];	// <stdin>:2375:10, AXIArbitor.scala:125:24, :142:31, :166:18
  assign io_master1_resp_valid = ~_T & (_T_2 ? _T_4 & _GEN_2 : ~_T_7 & (&state) & _GEN_6 & _GEN_2);	// <stdin>:2375:10, AXIArbitor.scala:125:24, :139:12, :143:27, :148:23, :162:22, :166:18, :197:{36,46}, :202:39, :204:45
  assign io_master1_resp_bits_data = _GEN_8[state];	// <stdin>:2375:10, AXIArbitor.scala:125:24, :144:31, :166:18
  assign io_master2_resp_valid = ~_T & (_T_2 ? _T_4 & _GEN_3 : ~_T_7 & (&state) & _GEN_6 & _GEN_3);	// <stdin>:2375:10, AXIArbitor.scala:125:24, :139:12, :145:27, :148:23, :162:22, :166:18, :197:{36,46}, :202:39, :204:45
  assign io_master2_resp_bits_data = _GEN_9[state];	// <stdin>:2375:10, AXIArbitor.scala:125:24, :146:31, :166:18
  assign io_AXI_O_aw_valid = _GEN;	// <stdin>:2375:10, AXIArbitor.scala:148:23, :166:18
  assign io_AXI_O_aw_bits_addr = _GEN_0 ? 32'h0 : _addr_T_6;	// <stdin>:2375:10, AXIArbitor.scala:149:27, :166:18, Mux.scala:101:16
  assign io_AXI_O_w_valid = _GEN_1;	// <stdin>:2375:10, AXIArbitor.scala:152:22, :166:18
  assign io_AXI_O_w_bits_data = _GEN_0 ? 64'h0 : choose_buffer[0] ? io_master0_req_bits_data : choose_buffer[1] ?
                io_master1_req_bits_data : choose_buffer[2] ? io_master2_req_bits_data : 64'h0;	// <stdin>:2375:10, AXIArbitor.scala:59:32, :84:30, :85:30, :86:30, :149:27, :153:26, :166:18, Mux.scala:101:16
  assign io_AXI_O_w_bits_strb = _GEN_0 ? 8'h0 : choose_buffer[0] ? io_master0_req_bits_mask : choose_buffer[1] ?
                io_master1_req_bits_mask : choose_buffer[2] ? io_master2_req_bits_mask : 8'h0;	// <stdin>:2375:10, AXIArbitor.scala:59:32, :84:30, :85:30, :86:30, :149:27, :154:26, :166:18, Mux.scala:101:16
  assign io_AXI_O_ar_valid = _GEN_4;	// <stdin>:2375:10, AXIArbitor.scala:158:23, :166:18
  assign io_AXI_O_ar_bits_addr = _T | _T_2 | ~(_T_7 & choose_buffer[3]) ? 32'h0 : _addr_T_6;	// <stdin>:2375:10, AXIArbitor.scala:59:32, :80:28, :159:27, :166:18, :214:35, Mux.scala:101:16
  assign io_AXI_O_r_ready = _GEN_5;	// <stdin>:2375:10, AXIArbitor.scala:162:22, :166:18
endmodule

module Cache(	// <stdin>:2554:10, :3615:10
  input         clock,
                reset,
                io_cpu_req_valid,
                io_cpu_req_bits_inst_type,
  input  [31:0] io_cpu_req_bits_addr,
  input  [63:0] io_cpu_req_bits_data,
  input  [7:0]  io_cpu_req_bits_mask,
  input         io_axi_resp_valid,
  input  [63:0] io_axi_resp_bits_data,
  output        io_cpu_resp_valid,
  output [63:0] io_cpu_resp_bits_data,
  output        io_axi_req_valid,
                io_axi_req_bits_rw,
  output [31:0] io_axi_req_bits_addr,
  output [63:0] io_axi_req_bits_data,
  output [7:0]  io_axi_req_bits_mask,
  output        io_fccache_req,
  output [2:0]  io_fccache_state,
  output [7:0]  io_fccache_mask,
  output        io_fccache_hit,
                io_fccache_cpu_valid,
                io_fccache_axi_valid);

  wire [31:0]       _GEN;	// Cache.scala:170:18, :179:35
  wire              _GEN_0;	// <stdin>:2627:18, :3688:18, Cache.scala:170:18
  wire [63:0]       _DataArray_ext_R0_data;	// Cache.scala:77:32
  wire [20:0]       _TagArray_ext_R0_data;	// Cache.scala:75:23
  wire [20:0]       _TagArray_ext_R1_data;	// Cache.scala:75:23
  wire [20:0]       _TagArray_ext_R2_data;	// Cache.scala:75:23
  wire [20:0]       _TagArray_ext_R3_data;	// Cache.scala:75:23
  wire [20:0]       _TagArray_ext_R4_data;	// Cache.scala:75:23
  wire [20:0]       _TagArray_ext_R5_data;	// Cache.scala:75:23
  reg  [2:0]        state;	// Cache.scala:64:24
  reg  [20:0]       tag;	// Cache.scala:67:18
  reg  [7:0]        index;	// Cache.scala:68:20
  reg  [2:0]        offset;	// Cache.scala:69:21
  reg  [511:0]      valid;	// Cache.scala:71:24
  reg  [511:0]      dirty;	// Cache.scala:72:24
  reg  [511:0]      replace;	// Cache.scala:73:26
  wire              hit0;	// <stdin>:2575:5, :3636:5
  wire              hit1;	// <stdin>:2577:5, :3638:5
  wire [511:0]      _hit0_T_7 = valid >> {503'h0, io_cpu_req_bits_addr[10:3], 1'h0};	// <stdin>:2554:10, :3615:10, Cache.scala:71:24, :91:{43,100}
  assign hit0 = _TagArray_ext_R4_data == io_cpu_req_bits_addr[31:11] & _hit0_T_7[0];	// Cache.scala:75:23, :91:{10,58,82,92,100}
  wire [9:0]        _GEN_1 = {1'h0, io_cpu_req_bits_addr[10:3], 1'h0};	// <stdin>:2554:10, :3615:10, Cache.scala:91:43, :92:141
  wire [511:0]      _hit1_T_11 = valid >> _GEN_1 + 10'h1;	// Cache.scala:71:24, :92:{57,106,141}
  assign hit1 = _TagArray_ext_R5_data == io_cpu_req_bits_addr[31:11] & _hit1_T_11[0];	// Cache.scala:75:23, :91:82, :92:{10,64,98,106}
  reg               inDataOneArray;	// Cache.scala:103:33
  reg               victim;	// Cache.scala:115:21
  reg  [31:0]       addr;	// Cache.scala:118:23
  reg  [63:0]       data;	// Cache.scala:119:23
  reg  [7:0]        mask;	// Cache.scala:120:23
  reg               inst_type;	// Cache.scala:122:28
  reg               whitNum;	// Cache.scala:125:26
  wire              _T_3 = hit0 | hit1;	// Cache.scala:129:28
  reg               cpu_resp_valid;	// Cache.scala:138:33
  reg  [63:0]       cpu_resp_bits_data;	// Cache.scala:139:37
  reg               axi_req_valid;	// Cache.scala:140:32
  reg               axi_req_bits_rw;	// Cache.scala:141:34
  reg  [31:0]       axi_req_bits_addr;	// Cache.scala:142:36
  reg  [7:0]        axi_req_bits_mask;	// Cache.scala:144:36
  wire              _T_379 = offset == 3'h0;	// Cache.scala:64:24, :69:21, :150:35
  wire              _T = state == 3'h0;	// Cache.scala:64:24, :170:18
  wire [31:0]       _GEN_2 = {23'h0, io_cpu_req_bits_addr[10:3], 1'h0};	// <stdin>:2554:10, :3615:10, Cache.scala:91:43, :197:46
  wire [1023:0]     _GEN_3 = {1015'h0, io_cpu_req_bits_addr[10:3], 1'h0};	// <stdin>:2554:10, :3615:10, Cache.scala:91:43, :243:55
  wire [1023:0]     _replace0_T_2 = 1024'h1 << _GEN_3;	// Cache.scala:243:55
  wire [1023:0]     _replace1_T_4 = 1024'h1 << _GEN_1 + 10'h1;	// Cache.scala:92:{57,141}, :243:55, :244:{55,90}
  wire [1023:0]     _replace0_T_10 = 1024'h1 << _GEN_3;	// Cache.scala:243:55, :262:55
  wire              _GEN_4 = ~io_cpu_req_valid | (|io_cpu_req_bits_mask) | ~_T_3;	// <stdin>:2623:14, :3684:14, Cache.scala:129:28, :179:35, :181:{43,47}, :218:38
  wire [1023:0]     _replace1_T_14 = 1024'h1 << _GEN_1 + 10'h1;	// Cache.scala:92:{57,141}, :243:55, :263:{55,90}
  wire              _T_4 = state == 3'h5;	// Cache.scala:64:24, :170:18, :269:31
  wire [511:0]      _GEN_5 = {503'h0, index, 1'h0};	// <stdin>:2554:10, :3615:10, Cache.scala:68:20, :91:100, :287:40
  wire [511:0]      _replace_wire_T_1 = replace >> _GEN_5;	// Cache.scala:73:26, :287:40
  wire [9:0]        _GEN_6 = {1'h0, index, 1'h0};	// <stdin>:2554:10, :3615:10, Cache.scala:68:20, :290:34
  wire [9:0]        _GEN_7 = {9'h0, _GEN_0};	// <stdin>:2627:18, :3688:18, Cache.scala:170:18, :290:34
  wire [511:0]      _T_8 = dirty >> _GEN_6 + _GEN_7;	// Cache.scala:72:24, :290:{23,34}
  wire [8:0]        _GEN_8 = {index, 1'h0};	// <stdin>:2554:10, :3615:10, Cache.scala:68:20, :290:34
  wire [8:0]        _GEN_9 = {8'h0, _GEN_0};	// <stdin>:2627:18, :3688:18, Cache.scala:120:23, :170:18, :290:34
  wire              _T_10 = state == 3'h6;	// Cache.scala:64:24, :170:18, :291:23
  wire [8:0]        _GEN_10 = {8'h0, victim};	// Cache.scala:115:21, :120:23, :313:57
  wire [9:0]        _GEN_11 = {9'h0, victim};	// Cache.scala:115:21, :290:34, :313:57
  wire [1023:0]     _GEN_12 = {1015'h0, index, 1'h0};	// <stdin>:2554:10, :3615:10, Cache.scala:68:20, :243:55, :348:47
  wire [1023:0]     _replace0_T_17 = 1024'h1 << _GEN_12;	// Cache.scala:243:55, :348:47
  wire [1023:0]     _replace1_T_23 = 1024'h1 << _GEN_6 + 10'h1;	// Cache.scala:92:57, :243:55, :290:34, :349:{47,60}
  wire              _GEN_13 = io_axi_resp_valid & victim;	// Cache.scala:75:23, :115:21, :340:36, :345:29
  wire              _GEN_14 = ~_T & ~_T_4 & ~_T_10 & (&state) & _GEN_13;	// Cache.scala:64:24, :75:23, :170:18, :340:36, :345:29
  wire [1023:0]     _replace0_T_24 = 1024'h1 << _GEN_12;	// Cache.scala:243:55, :348:47, :357:47
  wire [1023:0]     _replace1_T_32 = 1024'h1 << _GEN_6 + 10'h1;	// Cache.scala:92:57, :243:55, :290:34, :358:{47,60}
  wire              _GEN_15 = io_axi_resp_valid & ~victim;	// Cache.scala:75:23, :115:21, :340:36, :345:29, :361:29
  wire              _GEN_16 = ~_T & ~_T_4 & ~_T_10 & (&state) & _GEN_15;	// Cache.scala:64:24, :75:23, :170:18, :340:36, :345:29
  wire              _T_25 = state == 3'h1;	// Cache.scala:64:24, :170:18, :183:31
  wire              _T_107 = offset == 3'h4;	// Cache.scala:69:21, Mux.scala:81:61
  wire [7:0][63:0]  _GEN_17 = {{{data[7:0], _DataArray_ext_R0_data[55:0]}}, {{_DataArray_ext_R0_data[63:56], data[7:0],
                _DataArray_ext_R0_data[47:0]}}, {{_DataArray_ext_R0_data[63:48], data[7:0],
                _DataArray_ext_R0_data[39:0]}}, {{_DataArray_ext_R0_data[63:40], data[7:0],
                _DataArray_ext_R0_data[31:0]}}, {{_DataArray_ext_R0_data[63:32], data[7:0],
                _DataArray_ext_R0_data[23:0]}}, {{_DataArray_ext_R0_data[63:24], data[7:0],
                _DataArray_ext_R0_data[15:0]}}, {{_DataArray_ext_R0_data[63:16], data[7:0],
                _DataArray_ext_R0_data[7:0]}}, {{_DataArray_ext_R0_data[63:8], data[7:0]}}};	// Cache.scala:77:32, :119:23, :150:{56,76}, :393:{56,68}, :394:{56,88}, :395:{56,88}, :396:88, :397:56, :398:{56,88}, :399:{56,88}, :400:67, Cat.scala:33:92, Mux.scala:81:{58,61}
  wire [1023:0]     _replace0_T_31 = 1024'h1 << _GEN_12;	// Cache.scala:243:55, :348:47, :428:43
  wire [1023:0]     _replace1_T_41 = 1024'h1 << _GEN_6 + 10'h1;	// Cache.scala:92:57, :243:55, :290:34, :429:{43,56}
  wire              _T_193 = offset == 3'h4;	// Cache.scala:69:21, Mux.scala:81:61
  wire [7:0][63:0]  _GEN_18 = {{{data[7:0], _DataArray_ext_R0_data[55:0]}}, {{_DataArray_ext_R0_data[63:56], data[7:0],
                _DataArray_ext_R0_data[47:0]}}, {{_DataArray_ext_R0_data[63:48], data[7:0],
                _DataArray_ext_R0_data[39:0]}}, {{_DataArray_ext_R0_data[63:40], data[7:0],
                _DataArray_ext_R0_data[31:0]}}, {{_DataArray_ext_R0_data[63:32], data[7:0],
                _DataArray_ext_R0_data[23:0]}}, {{_DataArray_ext_R0_data[63:24], data[7:0],
                _DataArray_ext_R0_data[15:0]}}, {{_DataArray_ext_R0_data[63:16], data[7:0],
                _DataArray_ext_R0_data[7:0]}}, {{_DataArray_ext_R0_data[63:8], data[7:0]}}};	// Cache.scala:77:32, :119:23, :150:{56,76}, :441:{56,68}, :442:{56,88}, :443:{56,88}, :444:88, :445:56, :446:{56,88}, :447:{56,88}, :448:67, Cat.scala:33:92, Mux.scala:81:{58,61}
  wire [1023:0]     _replace0_T_38 = 1024'h1 << _GEN_12;	// Cache.scala:243:55, :348:47, :476:43
  wire [1023:0]     _replace1_T_50 = 1024'h1 << _GEN_6 + 10'h1;	// Cache.scala:92:57, :243:55, :290:34, :477:{43,56}
  wire              _T_200 = state == 3'h2;	// Cache.scala:64:24, :170:18, :206:31
  wire [511:0]      _replace_wire_T_5 = replace >> _GEN_5;	// Cache.scala:73:26, :287:40, :486:40
  assign _GEN_0 = ~_T & (_T_4 ? _replace_wire_T_1[0] : ~_T_10 & ~(&state) & ~_T_25 & _T_200 &
                _replace_wire_T_5[0]);	// <stdin>:2627:18, :3688:18, Cache.scala:64:24, :75:23, :77:32, :170:18, :287:{26,40}, :486:40
  wire [511:0]      _T_204 = dirty >> _GEN_6 + _GEN_7;	// Cache.scala:72:24, :290:34, :489:{23,34}
  wire              _T_206 = state == 3'h3;	// Cache.scala:64:24, :170:18, :490:23
  wire [7:0][31:0]  _GEN_19 = {{32'h0}, {{22'h0, _GEN_6 + _GEN_11}}, {_T_8[0] ? {22'h0, _GEN_6 + _GEN_7} : 32'h0},
                {32'h0}, {{22'h0, _GEN_6 + _GEN_11}}, {_T_204[0] ? {22'h0, _GEN_6 + _GEN_7} : 32'h0},
                {32'h0}, {io_cpu_req_valid ? ((|io_cpu_req_bits_mask) ? (_T_3 ? _GEN_2 : 32'h0) : _T_3 ?
                (hit0 ? _GEN_2 : {22'h0, _GEN_1 + 10'h1}) : 32'h0) : 32'h0}};	// Cache.scala:92:{57,141}, :101:22, :118:23, :129:28, :170:18, :179:35, :181:{43,47}, :182:38, :194:35, :197:46, :218:38, :223:35, :239:46, :259:{46,83}, :290:{23,34,50}, :299:{34,47}, :313:57, :319:{30,43}, :489:{23,50}, :497:{34,47}, :515:{30,43}
  assign _GEN = _GEN_19[state];	// Cache.scala:64:24, :101:22, :170:18, :179:35, :290:50, :319:30, :489:50, :515:30
  wire              _T_207 = state == 3'h4;	// Cache.scala:64:24, :170:18, Mux.scala:81:61
  wire              _GEN_20 = _T_207 & io_axi_resp_valid;	// Cache.scala:64:24, :170:18, :536:36
  wire [1023:0]     _replace0_T_45 = 1024'h1 << _GEN_12;	// Cache.scala:243:55, :348:47, :545:47
  wire [1023:0]     _replace1_T_59 = 1024'h1 << _GEN_6 + 10'h1;	// Cache.scala:92:57, :243:55, :290:34, :546:{47,60}
  wire              _GEN_21 = ~_T & ~_T_4 & ~_T_10 & ~(&state) & ~_T_25 & ~_T_200 & ~_T_206 & _T_207 & _GEN_13;	// <stdin>:2627:18, :3688:18, Cache.scala:64:24, :75:23, :77:32, :115:21, :170:18, :340:36, :345:29
  wire              _T_293 = offset == 3'h4;	// Cache.scala:69:21, Mux.scala:81:61
  wire [7:0][63:0]  _GEN_22 = {{{data[7:0], io_axi_resp_bits_data[55:0]}}, {{io_axi_resp_bits_data[63:56], data[7:0],
                io_axi_resp_bits_data[47:0]}}, {{io_axi_resp_bits_data[63:48], data[7:0],
                io_axi_resp_bits_data[39:0]}}, {{io_axi_resp_bits_data[63:40], data[7:0],
                io_axi_resp_bits_data[31:0]}}, {{io_axi_resp_bits_data[63:32], data[7:0],
                io_axi_resp_bits_data[23:0]}}, {{io_axi_resp_bits_data[63:24], data[7:0],
                io_axi_resp_bits_data[15:0]}}, {{io_axi_resp_bits_data[63:16], data[7:0],
                io_axi_resp_bits_data[7:0]}}, {{io_axi_resp_bits_data[63:8], data[7:0]}}};	// Cache.scala:119:23, :559:{65,77}, :560:{65,106}, :561:{65,106}, :562:{65,106}, :563:{65,106}, :564:{65,106}, :565:{65,106}, :566:76, Cat.scala:33:92, Mux.scala:81:{58,61}
  wire              _GEN_23 = _T_200 | _T_206 | ~_GEN_20;	// Cache.scala:64:24, :71:24, :72:24, :170:18, :536:36
  wire [1023:0]     _replace0_T_52 = 1024'h1 << _GEN_12;	// Cache.scala:243:55, :348:47, :596:47
  wire [7:0][511:0] _GEN_24 = {{io_axi_resp_valid ? (victim ? replace | _replace0_T_17[511:0] : ~(~replace |
                _replace0_T_24[511:0])) : 512'h0}, {512'h0}, {512'h0}, {_GEN_23 ? 512'h0 : victim ? replace
                | _replace0_T_45[511:0] : ~(~replace | _replace0_T_52[511:0])}, {512'h0}, {512'h0},
                {whitNum ? replace | _replace0_T_31[511:0] : ~(~replace | _replace0_T_38[511:0])}, {_GEN_4
                ? 512'h0 : hit0 ? ~(~replace | _replace0_T_2[511:0]) : replace | _replace0_T_10[511:0]}};	// <stdin>:2623:14, :3684:14, Cache.scala:71:24, :72:24, :73:26, :115:21, :125:26, :129:28, :170:18, :179:35, :181:47, :223:35, :243:{38,55}, :262:{38,55}, :340:36, :345:29, :348:{30,47}, :357:{30,47}, :384:26, :428:{26,43}, :476:{26,43}, :542:29, :545:{30,47}, :596:{30,47}
  wire [511:0]      _GEN_25 = _GEN_24[state];	// <stdin>:2623:14, :3684:14, Cache.scala:64:24, :170:18, :179:35, :340:36, :384:26
  wire [1023:0]     _replace1_T_68 = 1024'h1 << _GEN_6 + 10'h1;	// Cache.scala:92:57, :243:55, :290:34, :597:{47,60}
  wire [7:0][511:0] _GEN_26 = {{io_axi_resp_valid ? (victim ? ~(~replace | _replace1_T_23[511:0]) : replace |
                _replace1_T_32[511:0]) : 512'h0}, {512'h0}, {512'h0}, {_GEN_23 ? 512'h0 : victim ?
                ~(~replace | _replace1_T_59[511:0]) : replace | _replace1_T_68[511:0]}, {512'h0}, {512'h0},
                {whitNum ? ~(~replace | _replace1_T_41[511:0]) : replace | _replace1_T_50[511:0]}, {_GEN_4
                ? 512'h0 : hit0 ? replace | _replace1_T_4[511:0] : ~(~replace | _replace1_T_14[511:0])}};	// <stdin>:2623:14, :2625:14, :3684:14, :3686:14, Cache.scala:71:24, :72:24, :73:26, :115:21, :125:26, :129:28, :170:18, :179:35, :181:47, :223:35, :244:{38,55}, :262:55, :263:{38,55}, :340:36, :345:29, :348:47, :349:{30,47}, :358:{30,47}, :384:26, :428:43, :429:{26,43}, :477:{26,43}, :542:29, :545:47, :546:{30,47}, :597:{30,47}
  wire [511:0]      _GEN_27 = _GEN_26[state];	// <stdin>:2625:14, :3686:14, Cache.scala:64:24, :170:18, :179:35, :340:36, :384:26
  wire              _GEN_28 = ~_T & ~_T_4 & ~_T_10 & ~(&state) & ~_T_25 & ~_T_200 & ~_T_206 & _T_207 & _GEN_15;	// <stdin>:2627:18, :3688:18, Cache.scala:64:24, :75:23, :77:32, :115:21, :170:18, :340:36, :345:29
  wire              _T_381 = offset == 3'h4;	// Cache.scala:69:21, Mux.scala:81:61
  wire [7:0][63:0]  _GEN_29 = {{{data[7:0], io_axi_resp_bits_data[55:0]}}, {{io_axi_resp_bits_data[63:56], data[7:0],
                io_axi_resp_bits_data[47:0]}}, {{io_axi_resp_bits_data[63:48], data[7:0],
                io_axi_resp_bits_data[39:0]}}, {{io_axi_resp_bits_data[63:40], data[7:0],
                io_axi_resp_bits_data[31:0]}}, {{io_axi_resp_bits_data[63:32], data[7:0],
                io_axi_resp_bits_data[23:0]}}, {{io_axi_resp_bits_data[63:24], data[7:0],
                io_axi_resp_bits_data[15:0]}}, {{io_axi_resp_bits_data[63:16], data[7:0],
                io_axi_resp_bits_data[7:0]}}, {{io_axi_resp_bits_data[63:8], data[7:0]}}};	// Cache.scala:119:23, :609:{65,77}, :610:{65,106}, :611:{65,106}, :612:{65,106}, :613:{65,106}, :614:{65,106}, :615:{65,106}, :616:76, Cat.scala:33:92, Mux.scala:81:{58,61}
  always @(posedge clock) begin
    automatic logic _GEN_30;	// Cache.scala:67:18, :170:18, :179:35
    _GEN_30 = _T & io_cpu_req_valid & ((|io_cpu_req_bits_mask) | ~_T_3);	// <stdin>:2623:14, :3684:14, Cache.scala:67:18, :129:28, :170:18, :179:35, :181:{43,47}, :182:38, :218:38
    if (reset) begin
      state <= 3'h0;	// Cache.scala:64:24
      valid <= 512'h0;	// Cache.scala:71:24
      dirty <= 512'h0;	// Cache.scala:71:24, :72:24
      replace <= 512'h0;	// Cache.scala:71:24, :73:26
      inDataOneArray <= 1'h0;	// <stdin>:2554:10, :3615:10, Cache.scala:103:33
      addr <= 32'h0;	// Cache.scala:118:23
      data <= 64'h0;	// Cache.scala:119:23, :143:36
      mask <= 8'h0;	// Cache.scala:120:23
      inst_type <= 1'h0;	// <stdin>:2554:10, :3615:10, Cache.scala:122:28
      whitNum <= 1'h0;	// <stdin>:2554:10, :3615:10, Cache.scala:125:26
      cpu_resp_valid <= 1'h0;	// <stdin>:2554:10, :3615:10, Cache.scala:138:33
      cpu_resp_bits_data <= 64'h0;	// Cache.scala:139:37, :143:36
      axi_req_valid <= 1'h0;	// <stdin>:2554:10, :3615:10, Cache.scala:140:32
      axi_req_bits_rw <= 1'h0;	// <stdin>:2554:10, :3615:10, Cache.scala:141:34
      axi_req_bits_addr <= 32'h0;	// Cache.scala:118:23, :142:36
      axi_req_bits_mask <= 8'h0;	// Cache.scala:120:23, :144:36
    end
    else begin
      automatic logic              _GEN_31;	// Cache.scala:177:28, :179:35, :181:47
      automatic logic [7:0][2:0]   _GEN_32;	// Cache.scala:170:18, :179:35, :290:50, :325:36, :340:36, :382:19, :489:50, :520:36
      automatic logic [1023:0]     _valid_T_26 = 1024'h1 << _GEN_12;	// Cache.scala:243:55, :348:47, :594:42
      automatic logic [1023:0]     _valid_T_19 = 1024'h1 << _GEN_6 + 10'h1;	// Cache.scala:92:57, :243:55, :290:34, :543:{42,55}
      automatic logic [1023:0]     _valid_T_10 = 1024'h1 << _GEN_12;	// Cache.scala:243:55, :348:47, :355:42
      automatic logic [1023:0]     _valid_T_3 = 1024'h1 << _GEN_6 + 10'h1;	// Cache.scala:92:57, :243:55, :290:34, :346:{42,55}
      automatic logic [7:0][511:0] _GEN_33;	// Cache.scala:71:24, :170:18, :340:36
      automatic logic [1023:0]     _dirty_T_42 = 1024'h1 << _GEN_12;	// Cache.scala:243:55, :348:47, :595:42
      automatic logic [1023:0]     _dirty_T_35 = 1024'h1 << _GEN_6 + 10'h1;	// Cache.scala:92:57, :243:55, :290:34, :544:{42,55}
      automatic logic [1023:0]     _dirty_T_26 = 1024'h1 << _GEN_12;	// Cache.scala:243:55, :348:47, :475:38
      automatic logic [1023:0]     _dirty_T_19 = 1024'h1 << _GEN_6 + 10'h1;	// Cache.scala:92:57, :243:55, :290:34, :427:{38,51}
      automatic logic [1023:0]     _dirty_T_10 = 1024'h1 << _GEN_12;	// Cache.scala:243:55, :348:47, :356:42
      automatic logic [1023:0]     _dirty_T_3 = 1024'h1 << _GEN_6 + 10'h1;	// Cache.scala:92:57, :243:55, :290:34, :347:{42,55}
      automatic logic [7:0][511:0] _GEN_34;	// Cache.scala:72:24, :170:18, :340:36, :384:26
      automatic logic [7:0][511:0] _GEN_35;	// Cache.scala:73:26, :170:18, :179:35, :340:36, :384:26
      automatic logic [7:0]        _GEN_36;	// Cache.scala:103:33, :170:18, :179:35, :290:50, :325:36, :489:50, :520:36
      automatic logic [7:0][31:0]  _GEN_37;	// Cache.scala:142:36, :170:18, :290:50, :325:36, :337:31, :489:50, :520:36, :533:31
      automatic logic [7:0][7:0]   _GEN_38;	// Cache.scala:144:36, :170:18, :290:50, :322:31, :489:50, :518:31
      _GEN_31 = io_cpu_req_valid & ~(|io_cpu_req_bits_mask) & _T_3;	// Cache.scala:129:28, :177:28, :179:35, :181:{43,47}, :218:38
      _GEN_32 = {{io_axi_resp_valid ? 3'h0 : state}, {io_axi_resp_valid ? 3'h7 : state}, {{2'h3,
                                                ~(_T_8[0])}}, {_GEN_20 ? 3'h0 : state}, {io_axi_resp_valid ? 3'h4 : state}, {_T_204[0] ?
                                                3'h3 : 3'h4}, {3'h0}, {io_cpu_req_valid ? ((|io_cpu_req_bits_mask) ? (_T_3 ? 3'h1 : 3'h2) :
                                                _T_3 ? 3'h0 : 3'h5) : state}};	// Cache.scala:64:24, :129:28, :170:18, :179:35, :181:{43,47}, :182:38, :183:31, :206:31, :218:38, :219:31, :269:31, :290:{23,50}, :291:23, :304:23, :325:36, :326:23, :340:36, :341:23, :382:19, :489:{23,50}, :490:23, :502:23, :520:36, :521:23, :536:36, Mux.scala:81:61
      state <= _GEN_32[state];	// Cache.scala:64:24, :170:18, :179:35, :290:50, :325:36, :340:36, :382:19, :489:50, :520:36
      _GEN_33 = {{io_axi_resp_valid ? (victim ? valid | _valid_T_3[511:0] : valid | _valid_T_10[511:0]) :
                                                valid}, {valid}, {valid}, {_T_25 | _T_200 | _T_206 | ~_GEN_20 ? valid : victim ? valid |
                                                _valid_T_19[511:0] : valid | _valid_T_26[511:0]}, {valid}, {valid}, {valid}, {valid}};	// Cache.scala:64:24, :71:24, :115:21, :170:18, :340:36, :345:29, :346:{27,42}, :355:{27,42}, :536:36, :542:29, :543:{27,42}, :594:{27,42}
      valid <= _GEN_33[state];	// Cache.scala:64:24, :71:24, :170:18, :340:36
      _GEN_34 = {{io_axi_resp_valid ? (victim ? ~(~dirty | _dirty_T_3[511:0]) : ~(~dirty |
                                                _dirty_T_10[511:0])) : dirty}, {dirty}, {dirty}, {_GEN_23 ? dirty : victim ? dirty |
                                                _dirty_T_35[511:0] : dirty | _dirty_T_42[511:0]}, {dirty}, {dirty}, {whitNum ? dirty |
                                                _dirty_T_19[511:0] : dirty | _dirty_T_26[511:0]}, {dirty}};	// Cache.scala:72:24, :115:21, :125:26, :170:18, :340:36, :345:29, :347:{27,42}, :356:{27,42}, :384:26, :427:{23,38}, :475:{23,38}, :542:29, :544:{27,42}, :595:{27,42}
      dirty <= _GEN_34[state];	// Cache.scala:64:24, :72:24, :170:18, :340:36, :384:26
      _GEN_35 = {{io_axi_resp_valid ? (victim ? _GEN_25 | _GEN_27 : _GEN_25 | _GEN_27) : replace},
                                                {replace}, {replace}, {_GEN_23 ? replace : victim ? _GEN_25 | _GEN_27 : _GEN_25 | _GEN_27},
                                                {replace}, {replace}, {whitNum ? _GEN_25 | _GEN_27 : _GEN_25 | _GEN_27}, {_GEN_4 ? replace
                                                : hit0 ? _GEN_25 | _GEN_27 : _GEN_25 | _GEN_27}};	// <stdin>:2623:14, :3684:14, Cache.scala:72:24, :73:26, :115:21, :125:26, :129:28, :170:18, :179:35, :181:47, :223:35, :245:{37,49}, :264:{37,49}, :340:36, :345:29, :350:{29,41}, :359:{29,41}, :384:26, :430:{25,37}, :478:{25,37}, :542:29, :547:{29,41}, :598:{29,41}
      replace <= _GEN_35[state];	// Cache.scala:64:24, :73:26, :170:18, :179:35, :340:36, :384:26
      _GEN_36 = {{inDataOneArray}, {~io_axi_resp_valid}, {_T_8[0] | inDataOneArray}, {inDataOneArray},
                                                {~io_axi_resp_valid}, {_T_204[0] | inDataOneArray}, {inDataOneArray}, {_GEN_31}};	// Cache.scala:103:33, :170:18, :177:28, :179:35, :181:47, :290:{23,50}, :297:32, :317:28, :325:36, :328:32, :489:{23,50}, :495:32, :520:36
      inDataOneArray <= _GEN_36[state];	// Cache.scala:64:24, :103:33, :170:18, :179:35, :290:50, :325:36, :489:50, :520:36
      if (_GEN_30) begin	// Cache.scala:67:18, :170:18, :179:35
        addr <= io_cpu_req_bits_addr;	// Cache.scala:118:23
        data <= io_cpu_req_bits_data;	// Cache.scala:119:23
        mask <= io_cpu_req_bits_mask;	// Cache.scala:120:23
      end
      if (_T) begin	// Cache.scala:170:18
        inst_type <= io_cpu_req_valid & ~(|io_cpu_req_bits_mask) & io_cpu_req_bits_inst_type;	// Cache.scala:122:28, :175:23, :177:28, :179:35, :181:{43,47}, :218:38
        cpu_resp_valid <= _GEN_31;	// Cache.scala:138:33, :177:28, :179:35, :181:47
      end
      else begin	// Cache.scala:170:18
        cpu_resp_valid <= ~_T_4 & ~_T_10 & ((&state) ? io_axi_resp_valid : _T_25 | ~_T_200 & ~_T_206 & _T_207 &
                                                                io_axi_resp_valid);	// Cache.scala:64:24, :75:23, :115:21, :138:33, :166:20, :170:18, :340:36, :482:28
        if (_T_4)	// Cache.scala:170:18
          axi_req_bits_rw <= ~(_T_8[0]);	// Cache.scala:141:34, :290:{23,50}, :291:23, :304:23
        else if (_T_10)	// Cache.scala:170:18
          axi_req_bits_rw <= io_axi_resp_valid;	// Cache.scala:141:34
        else	// Cache.scala:170:18
          axi_req_bits_rw <= (&state) | (_T_25 ? axi_req_bits_rw : _T_200 ? ~(_T_204[0]) : _T_206 ? io_axi_resp_valid :
                                                                                _T_207 | axi_req_bits_rw);	// Cache.scala:64:24, :141:34, :170:18, :338:29, :489:{23,50}, :499:33, :506:33, :520:36, :534:29
      end
      if (_T & io_cpu_req_valid & (|io_cpu_req_bits_mask) & _T_3)	// Cache.scala:125:26, :129:28, :170:18, :179:35, :181:43
        whitNum <= ~hit0;	// Cache.scala:125:26, :129:28, :194:35, :195:37, :200:37
      if (_T | _T_4 | _T_10 | ~((&state) & io_axi_resp_valid)) begin	// Cache.scala:64:24, :139:37, :170:18, :340:36
      end
      else if (inst_type)	// Cache.scala:64:24, :122:28, :139:37, :170:18, :340:36
        cpu_resp_bits_data <= {32'h0, _T_379 ? io_axi_resp_bits_data[31:0] : io_axi_resp_bits_data[63:32]};	// Cache.scala:118:23, :139:37, :150:35, :369:41, :370:{44,83}, :372:{44,83}
      else	// Cache.scala:64:24, :122:28, :139:37, :170:18, :340:36
        cpu_resp_bits_data <= io_axi_resp_bits_data;	// Cache.scala:139:37
      axi_req_valid <= ~_T & (_T_4 | _T_10 | ((&state) ? ~io_axi_resp_valid : ~_T_25 & (_T_200 | _T_206 | _T_207 &
                                                ~io_axi_resp_valid)));	// <stdin>:2627:18, :3688:18, Cache.scala:64:24, :75:23, :140:32, :167:19, :170:18, :290:50, :317:28, :325:36, :328:32, :340:36, :489:50, :536:36
      _GEN_37 = {{{addr[31:3], 3'h0}}, {{io_axi_resp_valid ? addr[31:3] : {_TagArray_ext_R1_data, index},
                                                3'h0}}, {{_T_8[0] ? {_TagArray_ext_R0_data, index} : addr[31:3], 3'h0}}, {{addr[31:3],
                                                3'h0}}, {{io_axi_resp_valid ? addr[31:3] : {_TagArray_ext_R3_data, index}, 3'h0}},
                                                {{_T_204[0] ? {_TagArray_ext_R2_data, index} : addr[31:3], 3'h0}}, {axi_req_bits_addr},
                                                {axi_req_bits_addr}};	// Cache.scala:64:24, :68:20, :75:23, :118:23, :142:36, :170:18, :290:{23,50}, :294:35, :307:{35,46}, :313:31, :325:36, :331:{35,46}, :337:{31,42}, :489:{23,50}, :493:35, :505:{35,46}, :511:31, :520:36, :526:{35,46}, :533:{31,42}, Cat.scala:33:92
      axi_req_bits_addr <= _GEN_37[state];	// Cache.scala:64:24, :142:36, :170:18, :290:50, :325:36, :337:31, :489:50, :520:36, :533:31
      _GEN_38 = {{axi_req_bits_mask}, {8'hFF}, {_T_8[0] ? 8'hFF : axi_req_bits_mask}, {axi_req_bits_mask},
                                                {8'hFF}, {_T_204[0] ? 8'hFF : axi_req_bits_mask}, {axi_req_bits_mask}, {axi_req_bits_mask}};	// Cache.scala:144:36, :170:18, :290:{23,50}, :302:35, :322:31, :489:{23,50}, :500:35, :518:31
      axi_req_bits_mask <= _GEN_38[state];	// Cache.scala:64:24, :144:36, :170:18, :290:50, :322:31, :489:50, :518:31
    end
    if (_GEN_30) begin	// Cache.scala:67:18, :170:18, :179:35
      tag <= io_cpu_req_bits_addr[31:11];	// Cache.scala:67:18, :91:82
      index <= io_cpu_req_bits_addr[10:3];	// Cache.scala:68:20, :91:43
    end
    if (_T) begin	// Cache.scala:170:18
      if (io_cpu_req_valid) begin
        if (|io_cpu_req_bits_mask) begin	// Cache.scala:181:43
          if (_T_3)	// Cache.scala:129:28
            offset <= io_cpu_req_bits_addr[2:0];	// Cache.scala:69:21, :188:55
          else	// Cache.scala:129:28
            offset <= io_cpu_req_bits_addr[2:0];	// Cache.scala:69:21, :211:55
        end
        else if (_T_3)	// Cache.scala:129:28, :181:43
          offset <= io_cpu_req_bits_addr[2:0];	// Cache.scala:69:21, :221:55
        else	// Cache.scala:129:28, :181:43
          offset <= io_cpu_req_bits_addr[2:0];	// Cache.scala:69:21, :274:55
      end
      else
        offset <= 3'h0;	// Cache.scala:64:24, :69:21
    end
    victim <= ~_T & (_T_4 | ~(_T_10 | (&state) | _T_25 | ~_T_200) ? _GEN_0 : victim);	// <stdin>:2627:18, :3688:18, Cache.scala:64:24, :75:23, :115:21, :170:18, :173:20, :288:20
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2554:10, :3615:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2554:10, :3615:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2554:10, :3615:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_14;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_15;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_16;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_17;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_18;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_19;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_20;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_21;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_22;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_23;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_24;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_25;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_26;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_27;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_28;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_29;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_30;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_31;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_32;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_33;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_34;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_35;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_36;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_37;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_38;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_39;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_40;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_41;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_42;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_43;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_44;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_45;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_46;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_47;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_48;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_49;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_50;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_51;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_52;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_53;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_54;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_55;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_56;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_57;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_58;	// <stdin>:2554:10, :3615:10
      automatic logic [31:0] _RANDOM_59;	// <stdin>:2554:10, :3615:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2554:10, :3615:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2554:10, :3615:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2554:10, :3615:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_3 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_4 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_5 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_6 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_7 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_8 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_9 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_10 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_11 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_12 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_13 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_14 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_15 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_16 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_17 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_18 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_19 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_20 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_21 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_22 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_23 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_24 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_25 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_26 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_27 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_28 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_29 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_30 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_31 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_32 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_33 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_34 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_35 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_36 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_37 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_38 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_39 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_40 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_41 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_42 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_43 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_44 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_45 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_46 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_47 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_48 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_49 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_50 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_51 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_52 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_53 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_54 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_55 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_56 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_57 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_58 = `RANDOM;	// <stdin>:2554:10, :3615:10
        _RANDOM_59 = `RANDOM;	// <stdin>:2554:10, :3615:10
        state = _RANDOM_0[2:0];	// Cache.scala:64:24
        tag = _RANDOM_0[23:3];	// Cache.scala:64:24, :67:18
        index = _RANDOM_0[31:24];	// Cache.scala:64:24, :68:20
        offset = _RANDOM_1[2:0];	// Cache.scala:69:21
        valid = {_RANDOM_1[31:3], _RANDOM_2, _RANDOM_3, _RANDOM_4, _RANDOM_5, _RANDOM_6, _RANDOM_7,
                                                                _RANDOM_8, _RANDOM_9, _RANDOM_10, _RANDOM_11, _RANDOM_12, _RANDOM_13, _RANDOM_14,
                                                                _RANDOM_15, _RANDOM_16, _RANDOM_17[2:0]};	// Cache.scala:69:21, :71:24
        dirty = {_RANDOM_17[31:3], _RANDOM_18, _RANDOM_19, _RANDOM_20, _RANDOM_21, _RANDOM_22, _RANDOM_23,
                                                                _RANDOM_24, _RANDOM_25, _RANDOM_26, _RANDOM_27, _RANDOM_28, _RANDOM_29, _RANDOM_30,
                                                                _RANDOM_31, _RANDOM_32, _RANDOM_33[2:0]};	// Cache.scala:71:24, :72:24
        replace = {_RANDOM_33[31:3], _RANDOM_34, _RANDOM_35, _RANDOM_36, _RANDOM_37, _RANDOM_38, _RANDOM_39,
                                                                _RANDOM_40, _RANDOM_41, _RANDOM_42, _RANDOM_43, _RANDOM_44, _RANDOM_45, _RANDOM_46,
                                                                _RANDOM_47, _RANDOM_48, _RANDOM_49[2:0]};	// Cache.scala:72:24, :73:26
        inDataOneArray = _RANDOM_49[3];	// Cache.scala:73:26, :103:33
        victim = _RANDOM_49[4];	// Cache.scala:73:26, :115:21
        addr = {_RANDOM_49[31:5], _RANDOM_50[4:0]};	// Cache.scala:73:26, :118:23
        data = {_RANDOM_50[31:5], _RANDOM_51, _RANDOM_52[4:0]};	// Cache.scala:118:23, :119:23
        mask = _RANDOM_52[12:5];	// Cache.scala:119:23, :120:23
        inst_type = _RANDOM_52[13];	// Cache.scala:119:23, :122:28
        whitNum = _RANDOM_54[14];	// Cache.scala:125:26
        cpu_resp_valid = _RANDOM_54[15];	// Cache.scala:125:26, :138:33
        cpu_resp_bits_data = {_RANDOM_54[31:16], _RANDOM_55, _RANDOM_56[15:0]};	// Cache.scala:125:26, :139:37
        axi_req_valid = _RANDOM_56[16];	// Cache.scala:139:37, :140:32
        axi_req_bits_rw = _RANDOM_56[17];	// Cache.scala:139:37, :141:34
        axi_req_bits_addr = {_RANDOM_56[31:18], _RANDOM_57[17:0]};	// Cache.scala:139:37, :142:36
        axi_req_bits_mask = _RANDOM_59[25:18];	// Cache.scala:144:36
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2554:10, :3615:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2554:10, :3615:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  TagArray_combMem TagArray_ext (	// Cache.scala:75:23
    .R0_addr (_GEN_8 + _GEN_9),	// Cache.scala:290:34, :294:61
    .R0_en   (~_T & _T_4 & _T_8[0]),	// Cache.scala:75:23, :170:18, :290:23
    .R0_clk  (clock),
    .R1_addr (_GEN_8 + _GEN_10),	// Cache.scala:290:34, :313:57
    .R1_en   (~_T & ~_T_4 & _T_10),	// Cache.scala:75:23, :170:18
    .R1_clk  (clock),
    .R2_addr (_GEN_8 + _GEN_9),	// Cache.scala:290:34, :493:61
    .R2_en   (~_T & ~_T_4 & ~_T_10 & ~(&state) & ~_T_25 & _T_200 & _T_204[0]),	// <stdin>:2627:18, :3688:18, Cache.scala:64:24, :75:23, :77:32, :170:18, :489:23
    .R2_clk  (clock),
    .R3_addr (_GEN_8 + _GEN_10),	// Cache.scala:290:34, :313:57, :511:57
    .R3_en   (~_T & ~_T_4 & ~_T_10 & ~(&state) & ~_T_25 & ~_T_200 & _T_206),	// <stdin>:2627:18, :3688:18, Cache.scala:64:24, :75:23, :77:32, :115:21, :170:18
    .R3_clk  (clock),
    .R4_addr ({io_cpu_req_bits_addr[10:3], 1'h0}),	// <stdin>:2554:10, :3615:10, Cache.scala:91:{22,43}
    .R4_en   (1'h1),	// <stdin>:2554:10, :3615:10
    .R4_clk  (clock),
    .R5_addr ({io_cpu_req_bits_addr[10:3], 1'h0} + 9'h1),	// <stdin>:2554:10, :3615:10, Cache.scala:91:43, :92:57
    .R5_en   (1'h1),	// <stdin>:2554:10, :3615:10
    .R5_clk  (clock),
    .W0_addr (_GEN_8 + 9'h1),	// Cache.scala:92:57, :290:34, :352:42
    .W0_en   (_GEN_14),	// Cache.scala:75:23, :170:18
    .W0_clk  (clock),
    .W0_data (tag),	// Cache.scala:67:18
    .W1_addr ({index, 1'h0}),	// <stdin>:2554:10, :3615:10, Cache.scala:68:20, :361:29
    .W1_en   (_GEN_16),	// Cache.scala:75:23, :170:18
    .W1_clk  (clock),
    .W1_data (tag),	// Cache.scala:67:18
    .W2_addr (_GEN_8 + 9'h1),	// Cache.scala:92:57, :290:34, :549:42
    .W2_en   (_GEN_21),	// Cache.scala:75:23, :170:18
    .W2_clk  (clock),
    .W2_data (tag),	// Cache.scala:67:18
    .W3_addr ({index, 1'h0}),	// <stdin>:2554:10, :3615:10, Cache.scala:68:20, :600:29
    .W3_en   (_GEN_28),	// Cache.scala:75:23, :170:18
    .W3_clk  (clock),
    .W3_data (tag),	// Cache.scala:67:18
    .R0_data (_TagArray_ext_R0_data),
    .R1_data (_TagArray_ext_R1_data),
    .R2_data (_TagArray_ext_R2_data),
    .R3_data (_TagArray_ext_R3_data),
    .R4_data (_TagArray_ext_R4_data),
    .R5_data (_TagArray_ext_R5_data)
  );
  DataArray_combMem DataArray_ext (	// Cache.scala:77:32
    .R0_addr (_GEN[8:0]),	// Cache.scala:99:35, :170:18, :179:35
    .R0_en   (_T ? io_cpu_req_valid & _T_3 : _T_4 ? _T_8[0] : _T_10 | ~(&state) & ~_T_25 & (_T_200 ?
                _T_204[0] : _T_206)),	// <stdin>:2627:18, :3688:18, Cache.scala:64:24, :77:32, :100:21, :129:28, :170:18, :179:35, :181:47, :290:{23,50}, :318:29, :489:{23,50}
    .R0_clk  (clock),
    .W0_addr (_GEN_8 + 9'h1),	// Cache.scala:92:57, :290:34, :353:43
    .W0_en   (_GEN_14),	// Cache.scala:75:23, :170:18
    .W0_clk  (clock),
    .W0_data (io_axi_resp_bits_data),
    .W1_addr ({index, 1'h0}),	// <stdin>:2554:10, :3615:10, Cache.scala:68:20, :362:30
    .W1_en   (_GEN_16),	// Cache.scala:75:23, :170:18
    .W1_clk  (clock),
    .W1_data (io_axi_resp_bits_data),
    .W2_addr (_GEN_8 + 9'h1),	// Cache.scala:92:57, :290:34, :385:39
    .W2_en   (~_T & ~_T_4 & ~_T_10 & ~(&state) & _T_25 & whitNum),	// Cache.scala:64:24, :75:23, :77:32, :125:26, :170:18
    .W2_clk  (clock),
    .W2_data (mask == 8'h1 ? _GEN_17[offset] : mask == 8'h3 ? (offset == 3'h6 ? {data[15:0],
                _DataArray_ext_R0_data[47:0]} : _T_107 ? {_DataArray_ext_R0_data[63:48], data[15:0],
                _DataArray_ext_R0_data[31:0]} : offset == 3'h2 ? {_DataArray_ext_R0_data[63:32],
                data[15:0], _DataArray_ext_R0_data[15:0]} : _T_379 ? {_DataArray_ext_R0_data[63:16],
                data[15:0]} : 64'h0) : mask == 8'hF ? (_T_107 ? {data[31:0], _DataArray_ext_R0_data[31:0]}
                : _T_379 ? {_DataArray_ext_R0_data[63:32], data[31:0]} : 64'h0) : (&mask) ? data : 64'h0),	// Cache.scala:69:21, :77:32, :119:23, :120:23, :143:36, :150:{35,56,76}, :206:31, :291:23, :388:31, :394:56, :395:88, :398:56, :399:88, :403:31, :408:69, :414:31, :419:69, :423:31, Cat.scala:33:92, Mux.scala:81:{58,61}, :101:16
    .W3_addr ({index, 1'h0}),	// <stdin>:2554:10, :3615:10, Cache.scala:68:20, :433:26
    .W3_en   (~_T & ~_T_4 & ~_T_10 & ~(&state) & _T_25 & ~whitNum),	// Cache.scala:64:24, :75:23, :77:32, :125:26, :170:18, :384:26, :433:26
    .W3_clk  (clock),
    .W3_data (mask == 8'h1 ? _GEN_18[offset] : mask == 8'h3 ? (offset == 3'h6 ? {data[15:0],
                _DataArray_ext_R0_data[47:0]} : _T_193 ? {_DataArray_ext_R0_data[63:48], data[15:0],
                _DataArray_ext_R0_data[31:0]} : offset == 3'h2 ? {_DataArray_ext_R0_data[63:32],
                data[15:0], _DataArray_ext_R0_data[15:0]} : _T_379 ? {_DataArray_ext_R0_data[63:16],
                data[15:0]} : 64'h0) : mask == 8'hF ? (_T_193 ? {data[31:0], _DataArray_ext_R0_data[31:0]}
                : _T_379 ? {_DataArray_ext_R0_data[63:32], data[31:0]} : 64'h0) : (&mask) ? data : 64'h0),	// Cache.scala:69:21, :77:32, :119:23, :120:23, :143:36, :150:{35,56,76}, :206:31, :291:23, :388:31, :403:31, :414:31, :436:31, :442:56, :443:88, :446:56, :447:88, :451:31, :456:69, :462:31, :467:69, :471:31, Cat.scala:33:92, Mux.scala:81:{58,61}, :101:16
    .W4_addr (_GEN_8 + 9'h1),	// Cache.scala:92:57, :290:34, :551:43
    .W4_en   (_GEN_21),	// Cache.scala:75:23, :170:18
    .W4_clk  (clock),
    .W4_data (mask == 8'h1 ? _GEN_22[offset] : mask == 8'h3 ? (offset == 3'h6 ? {data[15:0],
                io_axi_resp_bits_data[47:0]} : _T_293 ? {io_axi_resp_bits_data[63:48], data[15:0],
                io_axi_resp_bits_data[31:0]} : offset == 3'h2 ? {io_axi_resp_bits_data[63:32], data[15:0],
                io_axi_resp_bits_data[15:0]} : _T_379 ? {io_axi_resp_bits_data[63:16], data[15:0]} : 64'h0)
                : mask == 8'hF ? (_T_293 ? {data[31:0], io_axi_resp_bits_data[31:0]} : _T_379 ?
                {io_axi_resp_bits_data[63:32], data[31:0]} : 64'h0) : (&mask) ? data : 64'h0),	// Cache.scala:69:21, :119:23, :120:23, :143:36, :150:35, :206:31, :291:23, :388:31, :403:31, :414:31, :554:31, :560:65, :561:106, :562:65, :563:106, :564:65, :565:106, :569:31, :574:78, :580:31, :585:78, :589:31, Cat.scala:33:92, Mux.scala:81:{58,61}, :101:16
    .W5_addr ({index, 1'h0}),	// <stdin>:2554:10, :3615:10, Cache.scala:68:20, :601:30
    .W5_en   (_GEN_28),	// Cache.scala:75:23, :170:18
    .W5_clk  (clock),
    .W5_data (mask == 8'h1 ? _GEN_29[offset] : mask == 8'h3 ? (offset == 3'h6 ? {data[15:0],
                io_axi_resp_bits_data[47:0]} : _T_381 ? {io_axi_resp_bits_data[63:48], data[15:0],
                io_axi_resp_bits_data[31:0]} : offset == 3'h2 ? {io_axi_resp_bits_data[63:32], data[15:0],
                io_axi_resp_bits_data[15:0]} : _T_379 ? {io_axi_resp_bits_data[63:16], data[15:0]} : 64'h0)
                : mask == 8'hF ? (_T_381 ? {data[31:0], io_axi_resp_bits_data[31:0]} : _T_379 ?
                {io_axi_resp_bits_data[63:32], data[31:0]} : 64'h0) : (&mask) ? data : 64'h0),	// Cache.scala:69:21, :119:23, :120:23, :143:36, :150:35, :206:31, :291:23, :388:31, :403:31, :414:31, :604:31, :610:65, :611:106, :612:65, :613:106, :614:65, :615:106, :619:31, :624:78, :630:31, :635:78, :639:31, Cat.scala:33:92, Mux.scala:81:{58,61}, :101:16
    .R0_data (_DataArray_ext_R0_data)
  );
  assign io_cpu_resp_valid = cpu_resp_valid;	// <stdin>:2554:10, :3615:10, Cache.scala:138:33
  assign io_cpu_resp_bits_data = inDataOneArray ? (inst_type ? {32'h0, _T_379 ? _DataArray_ext_R0_data[31:0] :
                _DataArray_ext_R0_data[63:32]} : _DataArray_ext_R0_data) : cpu_resp_bits_data;	// <stdin>:2554:10, :3615:10, Cache.scala:77:32, :103:33, :118:23, :122:28, :139:37, :149:33, :150:{12,27,35,56,76}
  assign io_axi_req_valid = axi_req_valid;	// <stdin>:2554:10, :3615:10, Cache.scala:140:32
  assign io_axi_req_bits_rw = axi_req_bits_rw;	// <stdin>:2554:10, :3615:10, Cache.scala:141:34
  assign io_axi_req_bits_addr = axi_req_bits_addr;	// <stdin>:2554:10, :3615:10, Cache.scala:142:36
  assign io_axi_req_bits_data = inDataOneArray ? _DataArray_ext_R0_data : 64'h0;	// <stdin>:2554:10, :3615:10, Cache.scala:77:32, :103:33, :143:36, :159:32
  assign io_axi_req_bits_mask = axi_req_bits_mask;	// <stdin>:2554:10, :3615:10, Cache.scala:144:36
  assign io_fccache_req = io_cpu_req_valid;	// <stdin>:2554:10, :3615:10
  assign io_fccache_state = state;	// <stdin>:2554:10, :3615:10, Cache.scala:64:24
  assign io_fccache_mask = io_cpu_req_bits_mask;	// <stdin>:2554:10, :3615:10
  assign io_fccache_hit = _T_3;	// <stdin>:2554:10, :3615:10, Cache.scala:129:28
  assign io_fccache_cpu_valid = cpu_resp_valid;	// <stdin>:2554:10, :3615:10, Cache.scala:138:33
  assign io_fccache_axi_valid = io_axi_resp_valid;	// <stdin>:2554:10, :3615:10
endmodule

// external module DebugInterface

// external module Interact

module Core(	// <stdin>:4705:10
  input         clock,
                reset,
                io_AXI_Interface_aw_ready,
                io_AXI_Interface_w_ready,
                io_AXI_Interface_b_valid,
                io_AXI_Interface_ar_ready,
                io_AXI_Interface_r_valid,
  input  [63:0] io_AXI_Interface_r_bits_data,
  output        io_AXI_Interface_aw_valid,
  output [31:0] io_AXI_Interface_aw_bits_addr,
  output        io_AXI_Interface_w_valid,
  output [63:0] io_AXI_Interface_w_bits_data,
  output [7:0]  io_AXI_Interface_w_bits_strb,
  output        io_AXI_Interface_ar_valid,
  output [31:0] io_AXI_Interface_ar_bits_addr,
  output        io_AXI_Interface_r_ready);

  wire        _Dcache_io_cpu_resp_valid;	// Core.scala:105:24
  wire [63:0] _Dcache_io_cpu_resp_bits_data;	// Core.scala:105:24
  wire        _Dcache_io_axi_req_valid;	// Core.scala:105:24
  wire        _Dcache_io_axi_req_bits_rw;	// Core.scala:105:24
  wire [31:0] _Dcache_io_axi_req_bits_addr;	// Core.scala:105:24
  wire [63:0] _Dcache_io_axi_req_bits_data;	// Core.scala:105:24
  wire [7:0]  _Dcache_io_axi_req_bits_mask;	// Core.scala:105:24
  wire        _Dcache_io_fccache_req;	// Core.scala:105:24
  wire [2:0]  _Dcache_io_fccache_state;	// Core.scala:105:24
  wire [7:0]  _Dcache_io_fccache_mask;	// Core.scala:105:24
  wire        _Dcache_io_fccache_hit;	// Core.scala:105:24
  wire        _Dcache_io_fccache_cpu_valid;	// Core.scala:105:24
  wire        _Dcache_io_fccache_axi_valid;	// Core.scala:105:24
  wire        _Icache_io_cpu_resp_valid;	// Core.scala:104:24
  wire [63:0] _Icache_io_cpu_resp_bits_data;	// Core.scala:104:24
  wire        _Icache_io_axi_req_valid;	// Core.scala:104:24
  wire        _Icache_io_axi_req_bits_rw;	// Core.scala:104:24
  wire [31:0] _Icache_io_axi_req_bits_addr;	// Core.scala:104:24
  wire [63:0] _Icache_io_axi_req_bits_data;	// Core.scala:104:24
  wire [7:0]  _Icache_io_axi_req_bits_mask;	// Core.scala:104:24
  wire        _Icache_io_fccache_req;	// Core.scala:104:24
  wire [2:0]  _Icache_io_fccache_state;	// Core.scala:104:24
  wire [7:0]  _Icache_io_fccache_mask;	// Core.scala:104:24
  wire        _Icache_io_fccache_hit;	// Core.scala:104:24
  wire        _Icache_io_fccache_cpu_valid;	// Core.scala:104:24
  wire        _Icache_io_fccache_axi_valid;	// Core.scala:104:24
  wire        _arbitor_io_master0_resp_valid;	// Core.scala:101:25
  wire [63:0] _arbitor_io_master0_resp_bits_data;	// Core.scala:101:25
  wire        _arbitor_io_master1_resp_valid;	// Core.scala:101:25
  wire [63:0] _arbitor_io_master1_resp_bits_data;	// Core.scala:101:25
  wire        _arbitor_io_master2_resp_valid;	// Core.scala:101:25
  wire [63:0] _arbitor_io_master2_resp_bits_data;	// Core.scala:101:25
  wire [11:0] _trap_io_csrtr_rd;	// Core.scala:98:22
  wire        _trap_io_csrtr_csr_wen;	// Core.scala:98:22
  wire [63:0] _trap_io_csrtr_csr_wdata;	// Core.scala:98:22
  wire        _trap_io_fctr_pop_NOP;	// Core.scala:98:22
  wire [2:0]  _trap_io_fctr_trap_state;	// Core.scala:98:22
  wire        _trap_io_fctr_jump_flag;	// Core.scala:98:22
  wire [31:0] _trap_io_fctr_jump_pc;	// Core.scala:98:22
  wire [63:0] _csrs_io_CSRDe_csr_rdata;	// Core.scala:95:22
  wire [63:0] _csrs_io_CSRTr_MTVEC;	// Core.scala:95:22
  wire [63:0] _csrs_io_CSRTr_MCAUSE;	// Core.scala:95:22
  wire [63:0] _csrs_io_CSRTr_MEPC;	// Core.scala:95:22
  wire [63:0] _csrs_io_CSRTr_MIE;	// Core.scala:95:22
  wire [63:0] _csrs_io_CSRTr_MIP;	// Core.scala:95:22
  wire [63:0] _csrs_io_CSRTr_MSTATUS;	// Core.scala:95:22
  wire        _fc_io_fcfe_jump_flag;	// Core.scala:92:20
  wire [31:0] _fc_io_fcfe_jump_pc;	// Core.scala:92:20
  wire        _fc_io_fcfe_flush;	// Core.scala:92:20
  wire        _fc_io_fcfe_stall;	// Core.scala:92:20
  wire        _fc_io_fcde_flush;	// Core.scala:92:20
  wire        _fc_io_fcde_stall;	// Core.scala:92:20
  wire        _fc_io_fcex_stall;	// Core.scala:92:20
  wire        _fc_io_fcmem_stall;	// Core.scala:92:20
  wire        _fc_io_fcwb_stall;	// Core.scala:92:20
  wire        _fc_io_sdb_stall;	// Core.scala:92:20
  wire [63:0] _regfile_io_RfDe_reg1_rdata;	// Core.scala:89:25
  wire [63:0] _regfile_io_RfDe_reg2_rdata;	// Core.scala:89:25
  wire        _fw_io_fwde_fw_sel1;	// Core.scala:86:20
  wire        _fw_io_fwde_fw_sel2;	// Core.scala:86:20
  wire [63:0] _fw_io_fwde_fw_data1;	// Core.scala:86:20
  wire [63:0] _fw_io_fwde_fw_data2;	// Core.scala:86:20
  wire        _fw_io_fwde_csr_fw_sel;	// Core.scala:86:20
  wire [63:0] _fw_io_fwde_csr_fw_data;	// Core.scala:86:20
  wire        _clint_io_clmem_Clrvalue_valid;	// Core.scala:83:23
  wire [63:0] _clint_io_clmem_Clrvalue_bits;	// Core.scala:83:23
  wire        _clint_io_timer_int;	// Core.scala:83:23
  wire [4:0]  _wb_io_rfio_rd;	// Core.scala:30:20
  wire        _wb_io_rfio_reg_wen;	// Core.scala:30:20
  wire [63:0] _wb_io_rfio_reg_wdata;	// Core.scala:30:20
  wire [4:0]  _wb_io_fwwb_reg_waddr;	// Core.scala:30:20
  wire [63:0] _wb_io_fwwb_reg_wdata;	// Core.scala:30:20
  wire        _wb_io_fwwb_reg_we;	// Core.scala:30:20
  wire [63:0] _wb_io_fwwb_csr_wdata;	// Core.scala:30:20
  wire        _wb_io_fwwb_csr_wen;	// Core.scala:30:20
  wire [11:0] _wb_io_fwwb_csr_waddr;	// Core.scala:30:20
  wire [11:0] _wb_io_csrs_rd;	// Core.scala:30:20
  wire        _wb_io_csrs_csr_wen;	// Core.scala:30:20
  wire [63:0] _wb_io_csrs_csr_wdata;	// Core.scala:30:20
  wire [63:0] _mem_io_mwio_reg_wdata;	// Core.scala:29:21
  wire [4:0]  _mem_io_mwio_reg_waddr;	// Core.scala:29:21
  wire [1:0]  _mem_io_mwio_wb_type;	// Core.scala:29:21
  wire [63:0] _mem_io_mwio_csr_wdata;	// Core.scala:29:21
  wire        _mem_io_mwio_csr_wen;	// Core.scala:29:21
  wire [11:0] _mem_io_mwio_csr_waddr;	// Core.scala:29:21
  wire        _mem_io_mwio_has_inst;	// Core.scala:29:21
  wire [4:0]  _mem_io_fwmem_reg_waddr;	// Core.scala:29:21
  wire [63:0] _mem_io_fwmem_reg_wdata;	// Core.scala:29:21
  wire        _mem_io_fwmem_reg_we;	// Core.scala:29:21
  wire [63:0] _mem_io_fwmem_csr_wdata;	// Core.scala:29:21
  wire        _mem_io_fwmem_csr_wen;	// Core.scala:29:21
  wire [11:0] _mem_io_fwmem_csr_waddr;	// Core.scala:29:21
  wire [63:0] _excute_io_emio_reg_wdata;	// Core.scala:27:24
  wire [4:0]  _excute_io_emio_reg_waddr;	// Core.scala:27:24
  wire [1:0]  _excute_io_emio_wb_type;	// Core.scala:27:24
  wire [2:0]  _excute_io_emio_ld_type;	// Core.scala:27:24
  wire [2:0]  _excute_io_emio_ld_addr_lowbit;	// Core.scala:27:24
  wire [63:0] _excute_io_emio_csr_wdata;	// Core.scala:27:24
  wire        _excute_io_emio_csr_wen;	// Core.scala:27:24
  wire [11:0] _excute_io_emio_csr_waddr;	// Core.scala:27:24
  wire        _excute_io_emio_has_inst;	// Core.scala:27:24
  wire        _excute_io_jump_flag;	// Core.scala:27:24
  wire [31:0] _excute_io_jump_pc;	// Core.scala:27:24
  wire [63:0] _excute_io_raddr;	// Core.scala:27:24
  wire [63:0] _excute_io_waddr;	// Core.scala:27:24
  wire [63:0] _excute_io_wdata;	// Core.scala:27:24
  wire [7:0]  _excute_io_wmask;	// Core.scala:27:24
  wire [4:0]  _excute_io_fwex_reg_waddr;	// Core.scala:27:24
  wire [63:0] _excute_io_fwex_reg_wdata;	// Core.scala:27:24
  wire        _excute_io_fwex_reg_we;	// Core.scala:27:24
  wire [63:0] _excute_io_fwex_csr_wdata;	// Core.scala:27:24
  wire        _excute_io_fwex_csr_wen;	// Core.scala:27:24
  wire [11:0] _excute_io_fwex_csr_waddr;	// Core.scala:27:24
  wire        _excute_io_clex_valid;	// Core.scala:27:24
  wire [2:0]  _excute_io_clex_ld_type;	// Core.scala:27:24
  wire [63:0] _excute_io_clex_raddr;	// Core.scala:27:24
  wire [2:0]  _excute_io_clex_sd_type;	// Core.scala:27:24
  wire [63:0] _excute_io_clex_waddr;	// Core.scala:27:24
  wire [7:0]  _excute_io_clex_wmask;	// Core.scala:27:24
  wire [63:0] _excute_io_clex_wdata;	// Core.scala:27:24
  wire [4:0]  _decode_io_rfio_reg1_raddr;	// Core.scala:26:24
  wire [4:0]  _decode_io_rfio_reg2_raddr;	// Core.scala:26:24
  wire [63:0] _decode_io_deio_op_a;	// Core.scala:26:24
  wire [63:0] _decode_io_deio_op_b;	// Core.scala:26:24
  wire [4:0]  _decode_io_deio_reg_waddr;	// Core.scala:26:24
  wire        _decode_io_deio_branch_type;	// Core.scala:26:24
  wire [63:0] _decode_io_deio_branch_addr;	// Core.scala:26:24
  wire [5:0]  _decode_io_deio_alu_op;	// Core.scala:26:24
  wire [5:0]  _decode_io_deio_shamt;	// Core.scala:26:24
  wire [1:0]  _decode_io_deio_wb_type;	// Core.scala:26:24
  wire [2:0]  _decode_io_deio_sd_type;	// Core.scala:26:24
  wire [63:0] _decode_io_deio_reg2_rdata;	// Core.scala:26:24
  wire [2:0]  _decode_io_deio_ld_type;	// Core.scala:26:24
  wire [63:0] _decode_io_deio_csr_t;	// Core.scala:26:24
  wire [11:0] _decode_io_deio_csr_waddr;	// Core.scala:26:24
  wire        _decode_io_deio_csr_wen;	// Core.scala:26:24
  wire        _decode_io_deio_has_inst;	// Core.scala:26:24
  wire        _decode_io_jump_flag;	// Core.scala:26:24
  wire [31:0] _decode_io_jump_pc;	// Core.scala:26:24
  wire        _decode_io_load_use;	// Core.scala:26:24
  wire [4:0]  _decode_io_fwde_reg1_raddr;	// Core.scala:26:24
  wire [4:0]  _decode_io_fwde_reg2_raddr;	// Core.scala:26:24
  wire [11:0] _decode_io_fwde_csr_raddr;	// Core.scala:26:24
  wire [11:0] _decode_io_csrs_csr_raddr;	// Core.scala:26:24
  wire [31:0] _fetch_io_fdio_pc;	// Core.scala:25:23
  wire        _fetch_io_pc_valid;	// Core.scala:25:23
  wire [31:0] _fetch_io_pc_bits;	// Core.scala:25:23
  reg  [31:0] fdreg_pc;	// Core.scala:33:24
  reg  [63:0] dereg_op_a;	// Core.scala:39:24
  reg  [63:0] dereg_op_b;	// Core.scala:39:24
  reg  [4:0]  dereg_reg_waddr;	// Core.scala:39:24
  reg         dereg_branch_type;	// Core.scala:39:24
  reg  [63:0] dereg_branch_addr;	// Core.scala:39:24
  reg  [5:0]  dereg_alu_op;	// Core.scala:39:24
  reg  [5:0]  dereg_shamt;	// Core.scala:39:24
  reg  [1:0]  dereg_wb_type;	// Core.scala:39:24
  reg  [2:0]  dereg_sd_type;	// Core.scala:39:24
  reg  [63:0] dereg_reg2_rdata;	// Core.scala:39:24
  reg  [2:0]  dereg_ld_type;	// Core.scala:39:24
  reg  [63:0] dereg_csr_t;	// Core.scala:39:24
  reg  [11:0] dereg_csr_waddr;	// Core.scala:39:24
  reg         dereg_csr_wen;	// Core.scala:39:24
  reg         dereg_has_inst;	// Core.scala:39:24
  reg  [63:0] emreg_reg_wdata;	// Core.scala:57:24
  reg  [4:0]  emreg_reg_waddr;	// Core.scala:57:24
  reg  [1:0]  emreg_wb_type;	// Core.scala:57:24
  reg  [2:0]  emreg_ld_type;	// Core.scala:57:24
  reg  [2:0]  emreg_ld_addr_lowbit;	// Core.scala:57:24
  reg  [63:0] emreg_csr_wdata;	// Core.scala:57:24
  reg         emreg_csr_wen;	// Core.scala:57:24
  reg  [11:0] emreg_csr_waddr;	// Core.scala:57:24
  reg         emreg_has_inst;	// Core.scala:57:24
  reg  [63:0] mwreg_reg_wdata;	// Core.scala:71:24
  reg  [4:0]  mwreg_reg_waddr;	// Core.scala:71:24
  reg  [1:0]  mwreg_wb_type;	// Core.scala:71:24
  reg  [63:0] mwreg_csr_wdata;	// Core.scala:71:24
  reg         mwreg_csr_wen;	// Core.scala:71:24
  reg  [11:0] mwreg_csr_waddr;	// Core.scala:71:24
  reg         mwreg_has_inst;	// Core.scala:71:24
  reg         master0_resp_valid;	// Core.scala:428:37
  reg  [63:0] master0_resp_data;	// Core.scala:429:36
  wire        _mem_io_rdata_io_valid_T = _arbitor_io_master0_resp_valid | master0_resp_valid;	// Core.scala:101:25, :428:37, :439:55
  wire [63:0] _DI_io_mem_addr_T = _excute_io_waddr | _excute_io_raddr;	// Core.scala:27:24, :453:93
  wire        _arbitor_io_master0_req_valid_T_5 = ((|dereg_ld_type) | (|dereg_sd_type)) & _DI_io_mem_addr_T > 64'h9FFFFFFF;	// Core.scala:39:24, :453:{47,67,93}, :464:{56,77,117}
  always @(posedge clock) begin
    if (reset) begin
      fdreg_pc <= 32'h80000000;	// <stdin>:4726:23, Core.scala:33:24
      dereg_op_a <= 64'h0;	// Core.scala:39:24, :429:36
      dereg_op_b <= 64'h0;	// Core.scala:39:24, :429:36
      dereg_reg_waddr <= 5'h0;	// <stdin>:4742:27, Core.scala:39:24
      dereg_branch_type <= 1'h0;	// Core.scala:39:24, :105:24
      dereg_branch_addr <= 64'h0;	// Core.scala:39:24, :429:36
      dereg_alu_op <= 6'h3F;	// <stdin>:4739:27, Core.scala:39:24
      dereg_shamt <= 6'h0;	// <stdin>:4738:23, Core.scala:39:24
      dereg_wb_type <= 2'h0;	// <stdin>:4737:25, Core.scala:39:24
      dereg_sd_type <= 3'h0;	// <stdin>:4705:10, Core.scala:39:24
      dereg_reg2_rdata <= 64'h0;	// Core.scala:39:24, :429:36
      dereg_ld_type <= 3'h0;	// <stdin>:4705:10, Core.scala:39:24
      dereg_csr_t <= 64'h0;	// Core.scala:39:24, :429:36
      dereg_csr_waddr <= 12'h0;	// <stdin>:4732:27, Core.scala:39:24
      dereg_csr_wen <= 1'h0;	// Core.scala:39:24, :105:24
      emreg_reg_wdata <= 64'h0;	// Core.scala:57:24, :429:36
      emreg_reg_waddr <= 5'h0;	// <stdin>:4742:27, Core.scala:57:24
      emreg_wb_type <= 2'h0;	// <stdin>:4737:25, Core.scala:57:24
      emreg_ld_type <= 3'h0;	// <stdin>:4705:10, Core.scala:57:24
      emreg_ld_addr_lowbit <= 3'h0;	// <stdin>:4705:10, Core.scala:57:24
      emreg_csr_wdata <= 64'h0;	// Core.scala:57:24, :429:36
      emreg_csr_wen <= 1'h0;	// Core.scala:57:24, :105:24
      emreg_csr_waddr <= 12'h0;	// <stdin>:4732:27, Core.scala:57:24
      mwreg_reg_wdata <= 64'h0;	// Core.scala:71:24, :429:36
      mwreg_reg_waddr <= 5'h0;	// <stdin>:4742:27, Core.scala:71:24
      mwreg_wb_type <= 2'h0;	// <stdin>:4737:25, Core.scala:71:24
      mwreg_csr_wdata <= 64'h0;	// Core.scala:71:24, :429:36
      mwreg_csr_wen <= 1'h0;	// Core.scala:71:24, :105:24
      mwreg_csr_waddr <= 12'h0;	// <stdin>:4732:27, Core.scala:71:24
      master0_resp_valid <= 1'h0;	// Core.scala:105:24, :428:37
      master0_resp_data <= 64'h0;	// Core.scala:429:36
    end
    else begin
      automatic logic _T = _arbitor_io_master0_resp_valid & _fc_io_fcex_stall;	// Core.scala:92:20, :101:25, :475:40
      fdreg_pc <= _fetch_io_fdio_pc;	// Core.scala:25:23, :33:24
      if (_fc_io_fcde_stall) begin	// Core.scala:92:20
      end
      else begin	// Core.scala:92:20
        if (_fc_io_fcde_flush) begin	// Core.scala:92:20
          dereg_op_a <= 64'h0;	// Core.scala:39:24, :429:36
          dereg_op_b <= 64'h0;	// Core.scala:39:24, :429:36
          dereg_reg_waddr <= 5'h0;	// <stdin>:4742:27, Core.scala:39:24
          dereg_branch_addr <= 64'h0;	// Core.scala:39:24, :429:36
          dereg_alu_op <= 6'h0;	// <stdin>:4738:23, Core.scala:39:24
          dereg_shamt <= 6'h0;	// <stdin>:4738:23, Core.scala:39:24
          dereg_wb_type <= 2'h0;	// <stdin>:4737:25, Core.scala:39:24
          dereg_sd_type <= 3'h0;	// <stdin>:4705:10, Core.scala:39:24
          dereg_reg2_rdata <= 64'h0;	// Core.scala:39:24, :429:36
          dereg_ld_type <= 3'h0;	// <stdin>:4705:10, Core.scala:39:24
          dereg_csr_t <= 64'h0;	// Core.scala:39:24, :429:36
          dereg_csr_waddr <= 12'h0;	// <stdin>:4732:27, Core.scala:39:24
        end
        else begin	// Core.scala:92:20
          dereg_op_a <= _decode_io_deio_op_a;	// Core.scala:26:24, :39:24
          dereg_op_b <= _decode_io_deio_op_b;	// Core.scala:26:24, :39:24
          dereg_reg_waddr <= _decode_io_deio_reg_waddr;	// Core.scala:26:24, :39:24
          dereg_branch_addr <= _decode_io_deio_branch_addr;	// Core.scala:26:24, :39:24
          dereg_alu_op <= _decode_io_deio_alu_op;	// Core.scala:26:24, :39:24
          dereg_shamt <= _decode_io_deio_shamt;	// Core.scala:26:24, :39:24
          dereg_wb_type <= _decode_io_deio_wb_type;	// Core.scala:26:24, :39:24
          dereg_sd_type <= _decode_io_deio_sd_type;	// Core.scala:26:24, :39:24
          dereg_reg2_rdata <= _decode_io_deio_reg2_rdata;	// Core.scala:26:24, :39:24
          dereg_ld_type <= _decode_io_deio_ld_type;	// Core.scala:26:24, :39:24
          dereg_csr_t <= _decode_io_deio_csr_t;	// Core.scala:26:24, :39:24
          dereg_csr_waddr <= _decode_io_deio_csr_waddr;	// Core.scala:26:24, :39:24
        end
        dereg_branch_type <= ~_fc_io_fcde_flush & _decode_io_deio_branch_type;	// Core.scala:26:24, :39:24, :92:20, Mux.scala:101:16
        dereg_csr_wen <= ~_fc_io_fcde_flush & _decode_io_deio_csr_wen;	// Core.scala:26:24, :39:24, :92:20, Mux.scala:101:16
      end
      if (_fc_io_fcex_stall) begin	// Core.scala:92:20
      end
      else begin	// Core.scala:92:20
        emreg_reg_wdata <= _excute_io_emio_reg_wdata;	// Core.scala:27:24, :57:24
        emreg_reg_waddr <= _excute_io_emio_reg_waddr;	// Core.scala:27:24, :57:24
        emreg_wb_type <= _excute_io_emio_wb_type;	// Core.scala:27:24, :57:24
        emreg_ld_type <= _excute_io_emio_ld_type;	// Core.scala:27:24, :57:24
        emreg_ld_addr_lowbit <= _excute_io_emio_ld_addr_lowbit;	// Core.scala:27:24, :57:24
        emreg_csr_wdata <= _excute_io_emio_csr_wdata;	// Core.scala:27:24, :57:24
        emreg_csr_wen <= _excute_io_emio_csr_wen;	// Core.scala:27:24, :57:24
        emreg_csr_waddr <= _excute_io_emio_csr_waddr;	// Core.scala:27:24, :57:24
      end
      if (_fc_io_fcmem_stall) begin	// Core.scala:92:20
      end
      else begin	// Core.scala:92:20
        mwreg_reg_wdata <= _mem_io_mwio_reg_wdata;	// Core.scala:29:21, :71:24
        mwreg_reg_waddr <= _mem_io_mwio_reg_waddr;	// Core.scala:29:21, :71:24
        mwreg_wb_type <= _mem_io_mwio_wb_type;	// Core.scala:29:21, :71:24
        mwreg_csr_wdata <= _mem_io_mwio_csr_wdata;	// Core.scala:29:21, :71:24
        mwreg_csr_wen <= _mem_io_mwio_csr_wen;	// Core.scala:29:21, :71:24
        mwreg_csr_waddr <= _mem_io_mwio_csr_waddr;	// Core.scala:29:21, :71:24
      end
      master0_resp_valid <= _T | _fc_io_fcex_stall & master0_resp_valid;	// Core.scala:92:20, :428:37, :475:{40,60}, :476:28, :478:34, :479:28
      if (_T)	// Core.scala:475:40
        master0_resp_data <= _arbitor_io_master0_resp_bits_data;	// Core.scala:101:25, :429:36
      else if (_fc_io_fcex_stall) begin	// Core.scala:92:20, :475:40
      end
      else	// Core.scala:92:20, :475:40
        master0_resp_data <= 64'h0;	// Core.scala:429:36
    end
    if (_fc_io_fcde_stall) begin	// Core.scala:92:20
    end
    else	// Core.scala:92:20
      dereg_has_inst <= ~_fc_io_fcde_flush & _decode_io_deio_has_inst;	// Core.scala:26:24, :39:24, :92:20, Mux.scala:101:16
    if (_fc_io_fcex_stall) begin	// Core.scala:92:20
    end
    else	// Core.scala:92:20
      emreg_has_inst <= _excute_io_emio_has_inst;	// Core.scala:27:24, :57:24
    if (_fc_io_fcmem_stall) begin	// Core.scala:92:20
    end
    else	// Core.scala:92:20
      mwreg_has_inst <= _mem_io_mwio_has_inst;	// Core.scala:29:21, :71:24
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:4705:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:4705:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:4705:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_14;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_15;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_16;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_17;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_18;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_19;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_20;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_21;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_22;	// <stdin>:4705:10
      automatic logic [31:0] _RANDOM_23;	// <stdin>:4705:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:4705:10
        `INIT_RANDOM_PROLOG_	// <stdin>:4705:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:4705:10
        _RANDOM_0 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_1 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_2 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_3 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_4 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_5 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_6 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_7 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_8 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_9 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_10 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_11 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_12 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_13 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_14 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_15 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_16 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_17 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_18 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_19 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_20 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_21 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_22 = `RANDOM;	// <stdin>:4705:10
        _RANDOM_23 = `RANDOM;	// <stdin>:4705:10
        fdreg_pc = _RANDOM_0;	// Core.scala:33:24
        dereg_op_a = {_RANDOM_1, _RANDOM_2};	// Core.scala:39:24
        dereg_op_b = {_RANDOM_3, _RANDOM_4};	// Core.scala:39:24
        dereg_reg_waddr = _RANDOM_5[4:0];	// Core.scala:39:24
        dereg_branch_type = _RANDOM_5[5];	// Core.scala:39:24
        dereg_branch_addr = {_RANDOM_5[31:6], _RANDOM_6, _RANDOM_7[5:0]};	// Core.scala:39:24
        dereg_alu_op = _RANDOM_7[11:6];	// Core.scala:39:24
        dereg_shamt = _RANDOM_7[17:12];	// Core.scala:39:24
        dereg_wb_type = _RANDOM_7[19:18];	// Core.scala:39:24
        dereg_sd_type = _RANDOM_7[22:20];	// Core.scala:39:24
        dereg_reg2_rdata = {_RANDOM_7[31:23], _RANDOM_8, _RANDOM_9[22:0]};	// Core.scala:39:24
        dereg_ld_type = _RANDOM_9[25:23];	// Core.scala:39:24
        dereg_csr_t = {_RANDOM_9[31:26], _RANDOM_10, _RANDOM_11[25:0]};	// Core.scala:39:24
        dereg_csr_waddr = {_RANDOM_11[31:26], _RANDOM_12[5:0]};	// Core.scala:39:24
        dereg_csr_wen = _RANDOM_12[6];	// Core.scala:39:24
        dereg_has_inst = _RANDOM_12[7];	// Core.scala:39:24
        emreg_reg_wdata = {_RANDOM_12[31:8], _RANDOM_13, _RANDOM_14[7:0]};	// Core.scala:39:24, :57:24
        emreg_reg_waddr = _RANDOM_14[12:8];	// Core.scala:57:24
        emreg_wb_type = _RANDOM_14[14:13];	// Core.scala:57:24
        emreg_ld_type = _RANDOM_14[17:15];	// Core.scala:57:24
        emreg_ld_addr_lowbit = _RANDOM_14[20:18];	// Core.scala:57:24
        emreg_csr_wdata = {_RANDOM_14[31:21], _RANDOM_15, _RANDOM_16[20:0]};	// Core.scala:57:24
        emreg_csr_wen = _RANDOM_16[21];	// Core.scala:57:24
        emreg_csr_waddr = {_RANDOM_16[31:22], _RANDOM_17[1:0]};	// Core.scala:57:24
        emreg_has_inst = _RANDOM_17[2];	// Core.scala:57:24
        mwreg_reg_wdata = {_RANDOM_17[31:3], _RANDOM_18, _RANDOM_19[2:0]};	// Core.scala:57:24, :71:24
        mwreg_reg_waddr = _RANDOM_19[7:3];	// Core.scala:71:24
        mwreg_wb_type = _RANDOM_19[9:8];	// Core.scala:71:24
        mwreg_csr_wdata = {_RANDOM_19[31:10], _RANDOM_20, _RANDOM_21[9:0]};	// Core.scala:71:24
        mwreg_csr_wen = _RANDOM_21[10];	// Core.scala:71:24
        mwreg_csr_waddr = _RANDOM_21[22:11];	// Core.scala:71:24
        mwreg_has_inst = _RANDOM_21[23];	// Core.scala:71:24
        master0_resp_valid = _RANDOM_21[24];	// Core.scala:71:24, :428:37
        master0_resp_data = {_RANDOM_21[31:25], _RANDOM_22, _RANDOM_23[24:0]};	// Core.scala:71:24, :429:36
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:4705:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:4705:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Fetch fetch (	// Core.scala:25:23
    .clock             (clock),
    .reset             (reset),
    .io_fcfe_jump_flag (_fc_io_fcfe_jump_flag),	// Core.scala:92:20
    .io_fcfe_jump_pc   (_fc_io_fcfe_jump_pc),	// Core.scala:92:20
    .io_fcfe_flush     (_fc_io_fcfe_flush),	// Core.scala:92:20
    .io_fcfe_stall     (_fc_io_fcfe_stall),	// Core.scala:92:20
    .io_fdio_pc        (_fetch_io_fdio_pc),
    .io_pc_valid       (_fetch_io_pc_valid),
    .io_pc_bits        (_fetch_io_pc_bits)
  );
  Decode decode (	// Core.scala:26:24
    .clock               (clock),
    .reset               (reset),
    .io_inst_valid       (_Icache_io_cpu_resp_valid),	// Core.scala:104:24
    .io_inst_bits_data   (_Icache_io_cpu_resp_bits_data),	// Core.scala:104:24
    .io_fdio_pc          (fdreg_pc),	// Core.scala:33:24
    .io_rfio_reg1_rdata  (_regfile_io_RfDe_reg1_rdata),	// Core.scala:89:25
    .io_rfio_reg2_rdata  (_regfile_io_RfDe_reg2_rdata),	// Core.scala:89:25
    .io_branch           (_excute_io_jump_flag),	// Core.scala:27:24
    .io_stall            (_fc_io_fcde_stall),	// Core.scala:92:20
    .io_flush            (_fc_io_fcde_flush),	// Core.scala:92:20
    .io_fwde_fw_sel1     (_fw_io_fwde_fw_sel1),	// Core.scala:86:20
    .io_fwde_fw_sel2     (_fw_io_fwde_fw_sel2),	// Core.scala:86:20
    .io_fwde_fw_data1    (_fw_io_fwde_fw_data1),	// Core.scala:86:20
    .io_fwde_fw_data2    (_fw_io_fwde_fw_data2),	// Core.scala:86:20
    .io_fwde_csr_fw_sel  (_fw_io_fwde_csr_fw_sel),	// Core.scala:86:20
    .io_fwde_csr_fw_data (_fw_io_fwde_csr_fw_data),	// Core.scala:86:20
    .io_csrs_csr_rdata   (_csrs_io_CSRDe_csr_rdata),	// Core.scala:95:22
    .io_rfio_reg1_raddr  (_decode_io_rfio_reg1_raddr),
    .io_rfio_reg2_raddr  (_decode_io_rfio_reg2_raddr),
    .io_deio_op_a        (_decode_io_deio_op_a),
    .io_deio_op_b        (_decode_io_deio_op_b),
    .io_deio_reg_waddr   (_decode_io_deio_reg_waddr),
    .io_deio_branch_type (_decode_io_deio_branch_type),
    .io_deio_branch_addr (_decode_io_deio_branch_addr),
    .io_deio_alu_op      (_decode_io_deio_alu_op),
    .io_deio_shamt       (_decode_io_deio_shamt),
    .io_deio_wb_type     (_decode_io_deio_wb_type),
    .io_deio_sd_type     (_decode_io_deio_sd_type),
    .io_deio_reg2_rdata  (_decode_io_deio_reg2_rdata),
    .io_deio_ld_type     (_decode_io_deio_ld_type),
    .io_deio_csr_t       (_decode_io_deio_csr_t),
    .io_deio_csr_waddr   (_decode_io_deio_csr_waddr),
    .io_deio_csr_wen     (_decode_io_deio_csr_wen),
    .io_deio_has_inst    (_decode_io_deio_has_inst),
    .io_jump_flag        (_decode_io_jump_flag),
    .io_jump_pc          (_decode_io_jump_pc),
    .io_load_use         (_decode_io_load_use),
    .io_fwde_reg1_raddr  (_decode_io_fwde_reg1_raddr),
    .io_fwde_reg2_raddr  (_decode_io_fwde_reg2_raddr),
    .io_fwde_csr_raddr   (_decode_io_fwde_csr_raddr),
    .io_csrs_csr_raddr   (_decode_io_csrs_csr_raddr)
  );
  Excute excute (	// Core.scala:27:24
    .io_deio_op_a           (dereg_op_a),	// Core.scala:39:24
    .io_deio_op_b           (dereg_op_b),	// Core.scala:39:24
    .io_deio_reg_waddr      (dereg_reg_waddr),	// Core.scala:39:24
    .io_deio_branch_type    (dereg_branch_type),	// Core.scala:39:24
    .io_deio_branch_addr    (dereg_branch_addr),	// Core.scala:39:24
    .io_deio_alu_op         (dereg_alu_op),	// Core.scala:39:24
    .io_deio_shamt          (dereg_shamt),	// Core.scala:39:24
    .io_deio_wb_type        (dereg_wb_type),	// Core.scala:39:24
    .io_deio_sd_type        (dereg_sd_type),	// Core.scala:39:24
    .io_deio_reg2_rdata     (dereg_reg2_rdata),	// Core.scala:39:24
    .io_deio_ld_type        (dereg_ld_type),	// Core.scala:39:24
    .io_deio_csr_t          (dereg_csr_t),	// Core.scala:39:24
    .io_deio_csr_waddr      (dereg_csr_waddr),	// Core.scala:39:24
    .io_deio_csr_wen        (dereg_csr_wen),	// Core.scala:39:24
    .io_deio_has_inst       (dereg_has_inst),	// Core.scala:39:24
    .io_emio_reg_wdata      (_excute_io_emio_reg_wdata),
    .io_emio_reg_waddr      (_excute_io_emio_reg_waddr),
    .io_emio_wb_type        (_excute_io_emio_wb_type),
    .io_emio_ld_type        (_excute_io_emio_ld_type),
    .io_emio_ld_addr_lowbit (_excute_io_emio_ld_addr_lowbit),
    .io_emio_csr_wdata      (_excute_io_emio_csr_wdata),
    .io_emio_csr_wen        (_excute_io_emio_csr_wen),
    .io_emio_csr_waddr      (_excute_io_emio_csr_waddr),
    .io_emio_has_inst       (_excute_io_emio_has_inst),
    .io_jump_flag           (_excute_io_jump_flag),
    .io_jump_pc             (_excute_io_jump_pc),
    .io_raddr               (_excute_io_raddr),
    .io_waddr               (_excute_io_waddr),
    .io_wdata               (_excute_io_wdata),
    .io_wmask               (_excute_io_wmask),
    .io_fwex_reg_waddr      (_excute_io_fwex_reg_waddr),
    .io_fwex_reg_wdata      (_excute_io_fwex_reg_wdata),
    .io_fwex_reg_we         (_excute_io_fwex_reg_we),
    .io_fwex_csr_wdata      (_excute_io_fwex_csr_wdata),
    .io_fwex_csr_wen        (_excute_io_fwex_csr_wen),
    .io_fwex_csr_waddr      (_excute_io_fwex_csr_waddr),
    .io_clex_valid          (_excute_io_clex_valid),
    .io_clex_ld_type        (_excute_io_clex_ld_type),
    .io_clex_raddr          (_excute_io_clex_raddr),
    .io_clex_sd_type        (_excute_io_clex_sd_type),
    .io_clex_waddr          (_excute_io_clex_waddr),
    .io_clex_wmask          (_excute_io_clex_wmask),
    .io_clex_wdata          (_excute_io_clex_wdata)
  );
  Mem mem (	// Core.scala:29:21
    .clock                   (clock),
    .reset                   (reset),
    .io_emio_reg_wdata       (emreg_reg_wdata),	// Core.scala:57:24
    .io_emio_reg_waddr       (emreg_reg_waddr),	// Core.scala:57:24
    .io_emio_wb_type         (emreg_wb_type),	// Core.scala:57:24
    .io_emio_ld_type         (emreg_ld_type),	// Core.scala:57:24
    .io_emio_ld_addr_lowbit  (emreg_ld_addr_lowbit),	// Core.scala:57:24
    .io_emio_csr_wdata       (emreg_csr_wdata),	// Core.scala:57:24
    .io_emio_csr_wen         (emreg_csr_wen),	// Core.scala:57:24
    .io_emio_csr_waddr       (emreg_csr_waddr),	// Core.scala:57:24
    .io_emio_has_inst        (emreg_has_inst),	// Core.scala:57:24
    .io_rdata_valid          (_Dcache_io_cpu_resp_valid),	// Core.scala:105:24
    .io_rdata_bits_data      (_Dcache_io_cpu_resp_bits_data),	// Core.scala:105:24
    .io_rdata_io_valid       (_mem_io_rdata_io_valid_T),	// Core.scala:439:55
    .io_rdata_io_bits_data   (_arbitor_io_master0_resp_bits_data | master0_resp_data),	// Core.scala:101:25, :429:36, :472:68
    .io_clmem_Clrvalue_valid (_clint_io_clmem_Clrvalue_valid),	// Core.scala:83:23
    .io_clmem_Clrvalue_bits  (_clint_io_clmem_Clrvalue_bits),	// Core.scala:83:23
    .io_stall                (_fc_io_fcmem_stall),	// Core.scala:92:20
    .io_mwio_reg_wdata       (_mem_io_mwio_reg_wdata),
    .io_mwio_reg_waddr       (_mem_io_mwio_reg_waddr),
    .io_mwio_wb_type         (_mem_io_mwio_wb_type),
    .io_mwio_csr_wdata       (_mem_io_mwio_csr_wdata),
    .io_mwio_csr_wen         (_mem_io_mwio_csr_wen),
    .io_mwio_csr_waddr       (_mem_io_mwio_csr_waddr),
    .io_mwio_has_inst        (_mem_io_mwio_has_inst),
    .io_fwmem_reg_waddr      (_mem_io_fwmem_reg_waddr),
    .io_fwmem_reg_wdata      (_mem_io_fwmem_reg_wdata),
    .io_fwmem_reg_we         (_mem_io_fwmem_reg_we),
    .io_fwmem_csr_wdata      (_mem_io_fwmem_csr_wdata),
    .io_fwmem_csr_wen        (_mem_io_fwmem_csr_wen),
    .io_fwmem_csr_waddr      (_mem_io_fwmem_csr_waddr)
  );
  Wb wb (	// Core.scala:30:20
    .io_mwio_reg_wdata (mwreg_reg_wdata),	// Core.scala:71:24
    .io_mwio_reg_waddr (mwreg_reg_waddr),	// Core.scala:71:24
    .io_mwio_wb_type   (mwreg_wb_type),	// Core.scala:71:24
    .io_mwio_csr_wdata (mwreg_csr_wdata),	// Core.scala:71:24
    .io_mwio_csr_wen   (mwreg_csr_wen),	// Core.scala:71:24
    .io_mwio_csr_waddr (mwreg_csr_waddr),	// Core.scala:71:24
    .io_mwio_has_inst  (mwreg_has_inst),	// Core.scala:71:24
    .io_stall          (_fc_io_fcwb_stall),	// Core.scala:92:20
    .io_rfio_rd        (_wb_io_rfio_rd),
    .io_rfio_reg_wen   (_wb_io_rfio_reg_wen),
    .io_rfio_reg_wdata (_wb_io_rfio_reg_wdata),
    .io_fwwb_reg_waddr (_wb_io_fwwb_reg_waddr),
    .io_fwwb_reg_wdata (_wb_io_fwwb_reg_wdata),
    .io_fwwb_reg_we    (_wb_io_fwwb_reg_we),
    .io_fwwb_csr_wdata (_wb_io_fwwb_csr_wdata),
    .io_fwwb_csr_wen   (_wb_io_fwwb_csr_wen),
    .io_fwwb_csr_waddr (_wb_io_fwwb_csr_waddr),
    .io_csrs_rd        (_wb_io_csrs_rd),
    .io_csrs_csr_wen   (_wb_io_csrs_csr_wen),
    .io_csrs_csr_wdata (_wb_io_csrs_csr_wdata)
  );
  CLINT clint (	// Core.scala:83:23
    .clock                   (clock),
    .reset                   (reset),
    .io_clex_valid           (_excute_io_clex_valid),	// Core.scala:27:24
    .io_clex_ld_type         (_excute_io_clex_ld_type),	// Core.scala:27:24
    .io_clex_raddr           (_excute_io_clex_raddr),	// Core.scala:27:24
    .io_clex_sd_type         (_excute_io_clex_sd_type),	// Core.scala:27:24
    .io_clex_waddr           (_excute_io_clex_waddr),	// Core.scala:27:24
    .io_clex_wmask           (_excute_io_clex_wmask),	// Core.scala:27:24
    .io_clex_wdata           (_excute_io_clex_wdata),	// Core.scala:27:24
    .io_clmem_Clrvalue_valid (_clint_io_clmem_Clrvalue_valid),
    .io_clmem_Clrvalue_bits  (_clint_io_clmem_Clrvalue_bits),
    .io_timer_int            (_clint_io_timer_int)
  );
  Forward fw (	// Core.scala:86:20
    .io_fwde_reg1_raddr  (_decode_io_fwde_reg1_raddr),	// Core.scala:26:24
    .io_fwde_reg2_raddr  (_decode_io_fwde_reg2_raddr),	// Core.scala:26:24
    .io_fwde_csr_raddr   (_decode_io_fwde_csr_raddr),	// Core.scala:26:24
    .io_fwex_reg_waddr   (_excute_io_fwex_reg_waddr),	// Core.scala:27:24
    .io_fwex_reg_wdata   (_excute_io_fwex_reg_wdata),	// Core.scala:27:24
    .io_fwex_reg_we      (_excute_io_fwex_reg_we),	// Core.scala:27:24
    .io_fwex_csr_wdata   (_excute_io_fwex_csr_wdata),	// Core.scala:27:24
    .io_fwex_csr_wen     (_excute_io_fwex_csr_wen),	// Core.scala:27:24
    .io_fwex_csr_waddr   (_excute_io_fwex_csr_waddr),	// Core.scala:27:24
    .io_fwmem_reg_waddr  (_mem_io_fwmem_reg_waddr),	// Core.scala:29:21
    .io_fwmem_reg_wdata  (_mem_io_fwmem_reg_wdata),	// Core.scala:29:21
    .io_fwmem_reg_we     (_mem_io_fwmem_reg_we),	// Core.scala:29:21
    .io_fwmem_csr_wdata  (_mem_io_fwmem_csr_wdata),	// Core.scala:29:21
    .io_fwmem_csr_wen    (_mem_io_fwmem_csr_wen),	// Core.scala:29:21
    .io_fwmem_csr_waddr  (_mem_io_fwmem_csr_waddr),	// Core.scala:29:21
    .io_fwwb_reg_waddr   (_wb_io_fwwb_reg_waddr),	// Core.scala:30:20
    .io_fwwb_reg_wdata   (_wb_io_fwwb_reg_wdata),	// Core.scala:30:20
    .io_fwwb_reg_we      (_wb_io_fwwb_reg_we),	// Core.scala:30:20
    .io_fwwb_csr_wdata   (_wb_io_fwwb_csr_wdata),	// Core.scala:30:20
    .io_fwwb_csr_wen     (_wb_io_fwwb_csr_wen),	// Core.scala:30:20
    .io_fwwb_csr_waddr   (_wb_io_fwwb_csr_waddr),	// Core.scala:30:20
    .io_fwde_fw_sel1     (_fw_io_fwde_fw_sel1),
    .io_fwde_fw_sel2     (_fw_io_fwde_fw_sel2),
    .io_fwde_fw_data1    (_fw_io_fwde_fw_data1),
    .io_fwde_fw_data2    (_fw_io_fwde_fw_data2),
    .io_fwde_csr_fw_sel  (_fw_io_fwde_csr_fw_sel),
    .io_fwde_csr_fw_data (_fw_io_fwde_csr_fw_data)
  );
  Regfile regfile (	// Core.scala:89:25
    .clock              (clock),
    .io_RfDe_reg1_raddr (_decode_io_rfio_reg1_raddr),	// Core.scala:26:24
    .io_RfDe_reg2_raddr (_decode_io_rfio_reg2_raddr),	// Core.scala:26:24
    .io_RfWb_rd         (_wb_io_rfio_rd),	// Core.scala:30:20
    .io_RfWb_reg_wen    (_wb_io_rfio_reg_wen),	// Core.scala:30:20
    .io_RfWb_reg_wdata  (_wb_io_rfio_reg_wdata),	// Core.scala:30:20
    .io_RfDe_reg1_rdata (_regfile_io_RfDe_reg1_rdata),
    .io_RfDe_reg2_rdata (_regfile_io_RfDe_reg2_rdata)
  );
  FlowControl fc (	// Core.scala:92:20
    .io_fcde_jump_flag     (_decode_io_jump_flag),	// Core.scala:26:24
    .io_fcde_jump_pc       (_decode_io_jump_pc),	// Core.scala:26:24
    .io_fcde_load_use      (_decode_io_load_use),	// Core.scala:26:24
    .io_fcex_jump_flag     (_excute_io_jump_flag),	// Core.scala:27:24
    .io_fcex_jump_pc       (_excute_io_jump_pc),	// Core.scala:27:24
    .io_fctr_pop_NOP       (_trap_io_fctr_pop_NOP),	// Core.scala:98:22
    .io_fctr_trap_state    (_trap_io_fctr_trap_state),	// Core.scala:98:22
    .io_fctr_jump_flag     (_trap_io_fctr_jump_flag),	// Core.scala:98:22
    .io_fctr_jump_pc       (_trap_io_fctr_jump_pc),	// Core.scala:98:22
    .io_fcIcache_req       (_Icache_io_fccache_req),	// Core.scala:104:24
    .io_fcIcache_state     (_Icache_io_fccache_state),	// Core.scala:104:24
    .io_fcIcache_mask      (_Icache_io_fccache_mask),	// Core.scala:104:24
    .io_fcIcache_cpu_valid (_Icache_io_fccache_cpu_valid),	// Core.scala:104:24
    .io_fcIcache_axi_valid (_Icache_io_fccache_axi_valid),	// Core.scala:104:24
    .io_fcDcache_req       (_Dcache_io_fccache_req),	// Core.scala:105:24
    .io_fcDcache_state     (_Dcache_io_fccache_state),	// Core.scala:105:24
    .io_fcDcache_mask      (_Dcache_io_fccache_mask),	// Core.scala:105:24
    .io_fcDcache_hit       (_Dcache_io_fccache_hit),	// Core.scala:105:24
    .io_fcDcache_axi_valid (_Dcache_io_fccache_axi_valid),	// Core.scala:105:24
    .io_fcio_req           (_arbitor_io_master0_req_valid_T_5),	// Core.scala:464:77
    .io_fcio_valid         (_mem_io_rdata_io_valid_T),	// Core.scala:439:55
    .io_fcfe_jump_flag     (_fc_io_fcfe_jump_flag),
    .io_fcfe_jump_pc       (_fc_io_fcfe_jump_pc),
    .io_fcfe_flush         (_fc_io_fcfe_flush),
    .io_fcfe_stall         (_fc_io_fcfe_stall),
    .io_fcde_flush         (_fc_io_fcde_flush),
    .io_fcde_stall         (_fc_io_fcde_stall),
    .io_fcex_stall         (_fc_io_fcex_stall),
    .io_fcmem_stall        (_fc_io_fcmem_stall),
    .io_fcwb_stall         (_fc_io_fcwb_stall),
    .io_sdb_stall          (_fc_io_sdb_stall)
  );
  CSRs csrs (	// Core.scala:95:22
    .clock              (clock),
    .reset              (reset),
    .io_CSRDe_csr_raddr (_decode_io_csrs_csr_raddr),	// Core.scala:26:24
    .io_CSRWb_rd        (_wb_io_csrs_rd),	// Core.scala:30:20
    .io_CSRWb_csr_wen   (_wb_io_csrs_csr_wen),	// Core.scala:30:20
    .io_CSRWb_csr_wdata (_wb_io_csrs_csr_wdata),	// Core.scala:30:20
    .io_CSRTr_rd        (_trap_io_csrtr_rd),	// Core.scala:98:22
    .io_CSRTr_csr_wen   (_trap_io_csrtr_csr_wen),	// Core.scala:98:22
    .io_CSRTr_csr_wdata (_trap_io_csrtr_csr_wdata),	// Core.scala:98:22
    .io_timer_int       (_clint_io_timer_int),	// Core.scala:83:23
    .io_CSRDe_csr_rdata (_csrs_io_CSRDe_csr_rdata),
    .io_CSRTr_MTVEC     (_csrs_io_CSRTr_MTVEC),
    .io_CSRTr_MCAUSE    (_csrs_io_CSRTr_MCAUSE),
    .io_CSRTr_MEPC      (_csrs_io_CSRTr_MEPC),
    .io_CSRTr_MIE       (_csrs_io_CSRTr_MIE),
    .io_CSRTr_MIP       (_csrs_io_CSRTr_MIP),
    .io_CSRTr_MSTATUS   (_csrs_io_CSRTr_MSTATUS)
  );
  Trap trap (	// Core.scala:98:22
    .clock              (clock),
    .reset              (reset),
    .io_ex_hasinst      (dereg_has_inst),	// Core.scala:39:24
    .io_mem_hasinst     (emreg_has_inst),	// Core.scala:57:24
    .io_wb_hasinst      (mwreg_has_inst),	// Core.scala:71:24
    .io_csrtr_MTVEC     (_csrs_io_CSRTr_MTVEC),	// Core.scala:95:22
    .io_csrtr_MCAUSE    (_csrs_io_CSRTr_MCAUSE),	// Core.scala:95:22
    .io_csrtr_MEPC      (_csrs_io_CSRTr_MEPC),	// Core.scala:95:22
    .io_csrtr_MIE       (_csrs_io_CSRTr_MIE),	// Core.scala:95:22
    .io_csrtr_MIP       (_csrs_io_CSRTr_MIP),	// Core.scala:95:22
    .io_csrtr_MSTATUS   (_csrs_io_CSRTr_MSTATUS),	// Core.scala:95:22
    .io_inst            (_Icache_io_cpu_resp_bits_data[31:0]),	// Core.scala:104:24, :413:18
    .io_pc              (_fetch_io_pc_bits),	// Core.scala:25:23
    .io_csrtr_rd        (_trap_io_csrtr_rd),
    .io_csrtr_csr_wen   (_trap_io_csrtr_csr_wen),
    .io_csrtr_csr_wdata (_trap_io_csrtr_csr_wdata),
    .io_fctr_pop_NOP    (_trap_io_fctr_pop_NOP),
    .io_fctr_trap_state (_trap_io_fctr_trap_state),
    .io_fctr_jump_flag  (_trap_io_fctr_jump_flag),
    .io_fctr_jump_pc    (_trap_io_fctr_jump_pc)
  );
  AXIArbitor arbitor (	// Core.scala:101:25
    .clock                     (clock),
    .reset                     (reset),
    .io_master0_req_valid      (_arbitor_io_master0_req_valid_T_5),	// Core.scala:464:77
    .io_master0_req_bits_rw    (|dereg_ld_type),	// Core.scala:39:24, :453:47
    .io_master0_req_bits_addr  (_DI_io_mem_addr_T[31:0]),	// Core.scala:453:93, :454:33
    .io_master0_req_bits_data  (_excute_io_wdata),	// Core.scala:27:24
    .io_master0_req_bits_mask  (_excute_io_wmask),	// Core.scala:27:24
    .io_master1_req_valid      (_Dcache_io_axi_req_valid),	// Core.scala:105:24
    .io_master1_req_bits_rw    (_Dcache_io_axi_req_bits_rw),	// Core.scala:105:24
    .io_master1_req_bits_addr  (_Dcache_io_axi_req_bits_addr),	// Core.scala:105:24
    .io_master1_req_bits_data  (_Dcache_io_axi_req_bits_data),	// Core.scala:105:24
    .io_master1_req_bits_mask  (_Dcache_io_axi_req_bits_mask),	// Core.scala:105:24
    .io_master2_req_valid      (_Icache_io_axi_req_valid),	// Core.scala:104:24
    .io_master2_req_bits_rw    (_Icache_io_axi_req_bits_rw),	// Core.scala:104:24
    .io_master2_req_bits_addr  (_Icache_io_axi_req_bits_addr),	// Core.scala:104:24
    .io_master2_req_bits_data  (_Icache_io_axi_req_bits_data),	// Core.scala:104:24
    .io_master2_req_bits_mask  (_Icache_io_axi_req_bits_mask),	// Core.scala:104:24
    .io_AXI_O_aw_ready         (io_AXI_Interface_aw_ready),
    .io_AXI_O_w_ready          (io_AXI_Interface_w_ready),
    .io_AXI_O_b_valid          (io_AXI_Interface_b_valid),
    .io_AXI_O_ar_ready         (io_AXI_Interface_ar_ready),
    .io_AXI_O_r_valid          (io_AXI_Interface_r_valid),
    .io_AXI_O_r_bits_data      (io_AXI_Interface_r_bits_data),
    .io_master0_resp_valid     (_arbitor_io_master0_resp_valid),
    .io_master0_resp_bits_data (_arbitor_io_master0_resp_bits_data),
    .io_master1_resp_valid     (_arbitor_io_master1_resp_valid),
    .io_master1_resp_bits_data (_arbitor_io_master1_resp_bits_data),
    .io_master2_resp_valid     (_arbitor_io_master2_resp_valid),
    .io_master2_resp_bits_data (_arbitor_io_master2_resp_bits_data),
    .io_AXI_O_aw_valid         (io_AXI_Interface_aw_valid),
    .io_AXI_O_aw_bits_addr     (io_AXI_Interface_aw_bits_addr),
    .io_AXI_O_w_valid          (io_AXI_Interface_w_valid),
    .io_AXI_O_w_bits_data      (io_AXI_Interface_w_bits_data),
    .io_AXI_O_w_bits_strb      (io_AXI_Interface_w_bits_strb),
    .io_AXI_O_ar_valid         (io_AXI_Interface_ar_valid),
    .io_AXI_O_ar_bits_addr     (io_AXI_Interface_ar_bits_addr),
    .io_AXI_O_r_ready          (io_AXI_Interface_r_ready)
  );
  Cache Icache (	// Core.scala:104:24
    .clock                     (clock),
    .reset                     (reset),
    .io_cpu_req_valid          (_fetch_io_pc_valid),	// Core.scala:25:23
    .io_cpu_req_bits_inst_type (1'h1),	// <stdin>:4705:10
    .io_cpu_req_bits_addr      (_fetch_io_pc_bits),	// Core.scala:25:23
    .io_cpu_req_bits_data      (64'h0),	// Core.scala:429:36
    .io_cpu_req_bits_mask      (8'h0),	// Core.scala:445:33
    .io_axi_resp_valid         (_arbitor_io_master2_resp_valid),	// Core.scala:101:25
    .io_axi_resp_bits_data     (_arbitor_io_master2_resp_bits_data),	// Core.scala:101:25
    .io_cpu_resp_valid         (_Icache_io_cpu_resp_valid),
    .io_cpu_resp_bits_data     (_Icache_io_cpu_resp_bits_data),
    .io_axi_req_valid          (_Icache_io_axi_req_valid),
    .io_axi_req_bits_rw        (_Icache_io_axi_req_bits_rw),
    .io_axi_req_bits_addr      (_Icache_io_axi_req_bits_addr),
    .io_axi_req_bits_data      (_Icache_io_axi_req_bits_data),
    .io_axi_req_bits_mask      (_Icache_io_axi_req_bits_mask),
    .io_fccache_req            (_Icache_io_fccache_req),
    .io_fccache_state          (_Icache_io_fccache_state),
    .io_fccache_mask           (_Icache_io_fccache_mask),
    .io_fccache_hit            (_Icache_io_fccache_hit),
    .io_fccache_cpu_valid      (_Icache_io_fccache_cpu_valid),
    .io_fccache_axi_valid      (_Icache_io_fccache_axi_valid)
  );
  Cache Dcache (	// Core.scala:105:24
    .clock                     (clock),
    .reset                     (reset),
    .io_cpu_req_valid          (((|dereg_ld_type) | (|dereg_sd_type)) & _DI_io_mem_addr_T < 64'hA0000000),	// Core.scala:39:24, :453:{47,51,67,72,93,112}
    .io_cpu_req_bits_inst_type (1'h0),	// Core.scala:105:24
    .io_cpu_req_bits_addr      (_DI_io_mem_addr_T[31:0]),	// Core.scala:453:93, :454:33
    .io_cpu_req_bits_data      (_excute_io_wdata),	// Core.scala:27:24
    .io_cpu_req_bits_mask      (_excute_io_wmask),	// Core.scala:27:24
    .io_axi_resp_valid         (_arbitor_io_master1_resp_valid),	// Core.scala:101:25
    .io_axi_resp_bits_data     (_arbitor_io_master1_resp_bits_data),	// Core.scala:101:25
    .io_cpu_resp_valid         (_Dcache_io_cpu_resp_valid),
    .io_cpu_resp_bits_data     (_Dcache_io_cpu_resp_bits_data),
    .io_axi_req_valid          (_Dcache_io_axi_req_valid),
    .io_axi_req_bits_rw        (_Dcache_io_axi_req_bits_rw),
    .io_axi_req_bits_addr      (_Dcache_io_axi_req_bits_addr),
    .io_axi_req_bits_data      (_Dcache_io_axi_req_bits_data),
    .io_axi_req_bits_mask      (_Dcache_io_axi_req_bits_mask),
    .io_fccache_req            (_Dcache_io_fccache_req),
    .io_fccache_state          (_Dcache_io_fccache_state),
    .io_fccache_mask           (_Dcache_io_fccache_mask),
    .io_fccache_hit            (_Dcache_io_fccache_hit),
    .io_fccache_cpu_valid      (_Dcache_io_fccache_cpu_valid),
    .io_fccache_axi_valid      (_Dcache_io_fccache_axi_valid)
  );
  DebugInterface DI (	// Core.scala:492:19
    .clk        (clock),
    .rst        (reset),
    .pc         (_fetch_io_pc_bits),	// Core.scala:25:23
    .pc_req     (_fetch_io_pc_valid),	// Core.scala:25:23
    .inst       (_Icache_io_cpu_resp_bits_data[31:0]),	// Core.scala:104:24, :497:47
    .inst_valid (_Icache_io_cpu_resp_valid & ~_fc_io_fcde_flush),	// Core.scala:92:20, :104:24, :498:{50,70}
    .load_use   (_decode_io_load_use),	// Core.scala:26:24
    .op_a       (dereg_op_a),	// Core.scala:39:24
    .op_b       (dereg_op_b),	// Core.scala:39:24
    .result     (_excute_io_emio_reg_wdata),	// Core.scala:27:24
    .br_yes     (_excute_io_jump_flag),	// Core.scala:27:24
    .mem_access ((|dereg_ld_type) | (|dereg_sd_type)),	// Core.scala:39:24, :504:{48,52,77}
    .mem_addr   (_DI_io_mem_addr_T),	// Core.scala:453:93
    .rd         (_wb_io_rfio_rd),	// Core.scala:30:20
    .reg_wen    (_wb_io_rfio_reg_wen),	// Core.scala:30:20
    .reg_wdata  (_wb_io_rfio_reg_wdata),	// Core.scala:30:20
    .csr_wen    (_wb_io_csrs_csr_wen),	// Core.scala:30:20
    .csr_wdata  (_wb_io_csrs_csr_wdata),	// Core.scala:30:20
    .csr_waddr  (_wb_io_csrs_rd),	// Core.scala:30:20
    .sdb_stall  (_fc_io_sdb_stall)	// Core.scala:92:20
  );
  Interact interact (	// Core.scala:515:26
    .inst (_Icache_io_cpu_resp_valid & ~_fc_io_fcde_flush ? _Icache_io_cpu_resp_bits_data[31:0] :
                32'h0),	// Core.scala:92:20, :104:24, :497:47, :498:70, :516:{28,54}
    .clk  (clock),
    .rst  (reset)
  );
endmodule

// external module Sram

module Soc(	// <stdin>:5129:10
  input clock,
        reset);

  wire        _sram_S_AXI_AWREADY;	// Soc.scala:12:22
  wire        _sram_S_AXI_WREADY;	// Soc.scala:12:22
  wire [1:0]  _sram_S_AXI_BRESP;	// Soc.scala:12:22
  wire        _sram_S_AXI_BVALID;	// Soc.scala:12:22
  wire        _sram_S_AXI_ARREADY;	// Soc.scala:12:22
  wire [63:0] _sram_S_AXI_RDATA;	// Soc.scala:12:22
  wire [1:0]  _sram_S_AXI_RRESP;	// Soc.scala:12:22
  wire        _sram_S_AXI_RVALID;	// Soc.scala:12:22
  wire        _core_io_AXI_Interface_aw_valid;	// Soc.scala:11:22
  wire [31:0] _core_io_AXI_Interface_aw_bits_addr;	// Soc.scala:11:22
  wire        _core_io_AXI_Interface_w_valid;	// Soc.scala:11:22
  wire [63:0] _core_io_AXI_Interface_w_bits_data;	// Soc.scala:11:22
  wire [7:0]  _core_io_AXI_Interface_w_bits_strb;	// Soc.scala:11:22
  wire        _core_io_AXI_Interface_ar_valid;	// Soc.scala:11:22
  wire [31:0] _core_io_AXI_Interface_ar_bits_addr;	// Soc.scala:11:22
  wire        _core_io_AXI_Interface_r_ready;	// Soc.scala:11:22
  Core core (	// Soc.scala:11:22
    .clock                         (clock),
    .reset                         (reset),
    .io_AXI_Interface_aw_ready     (_sram_S_AXI_AWREADY),	// Soc.scala:12:22
    .io_AXI_Interface_w_ready      (_sram_S_AXI_WREADY),	// Soc.scala:12:22
    .io_AXI_Interface_b_valid      (_sram_S_AXI_BVALID),	// Soc.scala:12:22
    .io_AXI_Interface_ar_ready     (_sram_S_AXI_ARREADY),	// Soc.scala:12:22
    .io_AXI_Interface_r_valid      (_sram_S_AXI_RVALID),	// Soc.scala:12:22
    .io_AXI_Interface_r_bits_data  (_sram_S_AXI_RDATA),	// Soc.scala:12:22
    .io_AXI_Interface_aw_valid     (_core_io_AXI_Interface_aw_valid),
    .io_AXI_Interface_aw_bits_addr (_core_io_AXI_Interface_aw_bits_addr),
    .io_AXI_Interface_w_valid      (_core_io_AXI_Interface_w_valid),
    .io_AXI_Interface_w_bits_data  (_core_io_AXI_Interface_w_bits_data),
    .io_AXI_Interface_w_bits_strb  (_core_io_AXI_Interface_w_bits_strb),
    .io_AXI_Interface_ar_valid     (_core_io_AXI_Interface_ar_valid),
    .io_AXI_Interface_ar_bits_addr (_core_io_AXI_Interface_ar_bits_addr),
    .io_AXI_Interface_r_ready      (_core_io_AXI_Interface_r_ready)
  );
  Sram sram (	// Soc.scala:12:22
    .ACLK          (clock),
    .ARESETn       (~reset),	// Soc.scala:15:13
    .S_AXI_AWADDR  (_core_io_AXI_Interface_aw_bits_addr),	// Soc.scala:11:22
    .S_AXI_AWPROT  (3'h0),	// Soc.scala:12:22
    .S_AXI_AWVALID (_core_io_AXI_Interface_aw_valid),	// Soc.scala:11:22
    .S_AXI_WDATA   (_core_io_AXI_Interface_w_bits_data),	// Soc.scala:11:22
    .S_AXI_WSTRB   (_core_io_AXI_Interface_w_bits_strb),	// Soc.scala:11:22
    .S_AXI_WVALID  (_core_io_AXI_Interface_w_valid),	// Soc.scala:11:22
    .S_AXI_BREADY  (1'h1),	// Soc.scala:12:22
    .S_AXI_ARADDR  (_core_io_AXI_Interface_ar_bits_addr),	// Soc.scala:11:22
    .S_AXI_ARPROT  (3'h0),	// Soc.scala:12:22
    .S_AXI_ARVALID (_core_io_AXI_Interface_ar_valid),	// Soc.scala:11:22
    .S_AXI_RREADY  (_core_io_AXI_Interface_r_ready),	// Soc.scala:11:22
    .S_AXI_AWREADY (_sram_S_AXI_AWREADY),
    .S_AXI_WREADY  (_sram_S_AXI_WREADY),
    .S_AXI_BRESP   (_sram_S_AXI_BRESP),
    .S_AXI_BVALID  (_sram_S_AXI_BVALID),
    .S_AXI_ARREADY (_sram_S_AXI_ARREADY),
    .S_AXI_RDATA   (_sram_S_AXI_RDATA),
    .S_AXI_RRESP   (_sram_S_AXI_RRESP),
    .S_AXI_RVALID  (_sram_S_AXI_RVALID)
  );
endmodule


// ----- 8< ----- FILE "rv64/./build/DebugInterface.v" ----- 8< -----



import "DPI-C" function void update_debuginfo(input reg[31:0] pc, input pc_req, input reg[31:0] inst, 
  input inst_valid, input load_use, input reg[63:0] op_a, input reg[63:0] op_b, input reg[63:0] result, 
   input br_yes, input reg mem_access, input [63:0] mem_addr,
   input reg[4:0] rd, input reg[63:0] reg_wdata,
  input reg_wen, input csr_wen, input [63:0] csr_wdata, input [11:0] csr_waddr, input sdb_stall);

module DebugInterface(
                   input        clk,
                   input        rst,            
                   //fetch
                   input [31:0] pc,
                   input        pc_req,

                   input [31:0] inst,
                   input        inst_valid,
                   input        load_use,
                   
                   //decode
                   input [63:0] op_a,
                   input [63:0] op_b,
                   input [63:0] result,

                   //execute
                   input        br_yes,

                   input        mem_access,
                   input [63:0] mem_addr,
       

                   //wb
                   input [4:0] rd,
                   input [63:0] reg_wdata,
                   input        reg_wen,

                   input       csr_wen,
                   input [63:0] csr_wdata,
                   input [11:0]    csr_waddr,

                   input   sdb_stall
);




always@(posedge clk)begin
   if(rst != 'd1)
       update_debuginfo(pc,pc_req,inst,inst_valid,load_use,op_a,op_b,result,br_yes, mem_access, mem_addr, rd,reg_wdata,reg_wen,
       csr_wen,csr_wdata,csr_waddr,sdb_stall);
end



endmodule


    

// ----- 8< ----- FILE "rv64/./build/Interact.v" ----- 8< -----


module Interact(input [31:0] inst,
                input  clk,
                input  rst
);
   
   reg ebreak_flag;
   reg [2:0] over_count;

   always@(posedge clk)begin
       if(rst)
           ebreak_flag <= 1'b0;
       else
       if(inst == 32'b00000000000100000000000001110011)begin
           ebreak_flag <= 1'b1;
       end
   end

   always@(posedge clk)begin  //需要等前面指令执行结束，再停止程序
       if(rst)
           over_count <= 'd0;
       else begin
           if(ebreak_flag)begin
               over_count <= over_count + 1'b1;
               if(over_count == 3'd2)begin          
                   $display("ebreak!");
                   $finish;
               end
                   
           end
       end 
           
   end

   
endmodule
        

// ----- 8< ----- FILE "rv64/./build/Sram.v" ----- 8< -----


import "DPI-C" function longint pmem_read(
   input reg[31:0] raddr);

import "DPI-C" function void pmem_write(
   input reg[31:0] waddr, input reg[63:0] wdata, input byte wmask);


module Sram(
   input        ACLK,
   input        ARESETn,

   input [31:0] S_AXI_AWADDR,
   input [2:0]  S_AXI_AWPROT,
   input        S_AXI_AWVALID,
   output       S_AXI_AWREADY,

   input [63:0] S_AXI_WDATA,
   input [7:0]  S_AXI_WSTRB,
   input        S_AXI_WVALID,
   output       S_AXI_WREADY,

   output [1:0] S_AXI_BRESP,
   output       S_AXI_BVALID,
   input        S_AXI_BREADY,

   input [31:0] S_AXI_ARADDR,
   input [2:0]  S_AXI_ARPROT,
   input        S_AXI_ARVALID,
   output       S_AXI_ARREADY,

   output [63:0]S_AXI_RDATA,
   output [1:0] S_AXI_RRESP,
   output       S_AXI_RVALID,
   input        S_AXI_RREADY
);

//interface reg_def
reg             awready;

reg             wready;

reg     [1:0]   bresp;
reg             bvalid;

reg             arready;

reg     [63:0]  rdata;
reg     [1:0]   rresp;
reg             rvalid;

assign S_AXI_AWREADY = awready;
assign S_AXI_WREADY = wready;
assign S_AXI_BRESP = bresp;
assign S_AXI_BVALID = bvalid;
assign S_AXI_ARREADY = arready;
assign S_AXI_RDATA = rdata;
assign S_AXI_RRESP = rresp;
assign S_AXI_RVALID = rvalid;


//aw channel
always@(posedge ACLK or negedge ARESETn) begin
   if(!ARESETn)
       awready <= 1'b0;
    else begin
        if(S_AXI_AWVALID) begin
            awready <= 1'b1;
        end
        else begin
            awready <= 1'b0;
        end
    end 
end

reg [31:0] awaddr_buffer;

always@(posedge ACLK or negedge ARESETn)begin
    if(!ARESETn)
        awaddr_buffer <= 32'd0;
    else begin
        if(S_AXI_AWVALID && S_AXI_AWREADY)begin
            awaddr_buffer <= S_AXI_AWADDR;
        end
    end
end


//address selection
wire [31:0] awaddr; //True addr
assign awaddr = (S_AXI_WVALID && S_AXI_WREADY && S_AXI_AWVALID && S_AXI_AWREADY) ? S_AXI_AWADDR : awaddr_buffer;

//w channel
always @(posedge ACLK or negedge ARESETn) begin
    if(!ARESETn)
        wready <= 1'b0;
    else begin
        if(S_AXI_WVALID)
            wready <= 1'b1;
        else 
            wready <= 1'b0;
    end
end

//b channel
reg need_resp;
always@(posedge ACLK or negedge ARESETn)begin
    if(!ARESETn)
        need_resp <= 1'b0;
    else begin
        if(S_AXI_WVALID && S_AXI_WREADY)begin
            need_resp <= 1'b1;
            pmem_write(awaddr, S_AXI_WDATA, S_AXI_WSTRB);
        end 
        else begin 
            need_resp <= 1'b0;
        end
    end
end

always@(posedge ACLK or negedge ARESETn)begin
    if(!ARESETn)
        bvalid <= 1'b0;
    else begin
        if(need_resp)begin
            bvalid <= 1'b1;
            bresp <= 2'b00;
        end
        else if(S_AXI_BVALID && S_AXI_BREADY)begin
            bvalid <= 1'b0;
        end
    end
end



//ar channel
always@(posedge ACLK or negedge ARESETn) begin
   if(!ARESETn)
       arready <= 1'b0;
    else begin
        if(S_AXI_ARVALID) begin
            arready <= 1'b1;
        end
        else begin
            arready <= 1'b0;
        end
    end 
end

reg [31:0] araddr; 
reg need_read;

always@(posedge ACLK or negedge ARESETn)begin
    if(!ARESETn)begin
        araddr <= 32'd0;
        need_read <= 1'b0;
    end
    else begin
        if(S_AXI_ARVALID && S_AXI_ARREADY)begin
            araddr <= S_AXI_ARADDR;
            need_read <= 1'b1;
        end
        else begin
            need_read <= 1'b0;
        end
    end
end

//r channel
always@(posedge ACLK or negedge ARESETn) begin
   if(!ARESETn)begin
       rvalid <= 1'b0;
       rdata <= 64'd0;
       rresp <= 2'd0;
    end
    else begin
        if(need_read) begin
            rvalid <= 1'b1;
            rdata <= pmem_read(araddr);
            rresp <= 2'b00;
        end
        else begin
             rvalid <= 1'b0;
        end
    end 
end



endmodule
    

// ----- 8< ----- FILE "firrtl_black_box_resource_files.f" ----- 8< -----


