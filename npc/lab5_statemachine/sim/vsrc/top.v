// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_REG_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_REG_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

module Button(	// <stdin>:2:10
  input        clock,
               reset,
               io_ps2_clk,
               io_ps2_data,
  output [7:0] io_button_out);

  reg  [9:0] buffer;	// Button.scala:55:36
  reg  [3:0] count;	// Button.scala:56:36
  reg  [2:0] ps2_clk_sync;	// Button.scala:57:36
  wire       sampling = ps2_clk_sync[2] & ~(ps2_clk_sync[1]);	// Button.scala:57:36, :60:{45,49,51,64}
  wire       _T_1 = count == 4'hA;	// Button.scala:56:36, :73:20
  always @(posedge clock) begin
    if (reset) begin
      buffer <= 10'h0;	// Button.scala:55:36
      count <= 4'h0;	// Button.scala:56:36
      ps2_clk_sync <= 3'h0;	// Button.scala:57:36
    end
    else begin
      if (~sampling | _T_1) begin	// Button.scala:55:36, :60:49, :72:30, :73:{20,29}
      end
      else	// Button.scala:55:36, :60:49, :72:30, :73:{20,29}
        buffer <= {count == 4'h9 ? io_ps2_data : buffer[9], count == 4'h8 ? io_ps2_data : buffer[8], count ==
                                                                4'h7 ? io_ps2_data : buffer[7], count == 4'h6 ? io_ps2_data : buffer[6], count == 4'h5 ?
                                                                io_ps2_data : buffer[5], count == 4'h4 ? io_ps2_data : buffer[4], count == 4'h3 ?
                                                                io_ps2_data : buffer[3], count == 4'h2 ? io_ps2_data : buffer[2], count == 4'h1 ?
                                                                io_ps2_data : buffer[1], count == 4'h0 ? io_ps2_data : buffer[0]};	// Button.scala:55:36, :56:36, :62:{36,44}, :64:22, :121:33
      if (sampling) begin	// Button.scala:60:49
        if (_T_1)	// Button.scala:73:20
          count <= 4'h0;	// Button.scala:56:36
        else	// Button.scala:73:20
          count <= count + 4'h1;	// Button.scala:56:36, :64:22, :123:28
      end
      ps2_clk_sync <= {ps2_clk_sync[1:0], io_ps2_clk};	// Button.scala:57:36, :67:37, Cat.scala:33:92
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2:10
        buffer = _RANDOM_0[9:0];	// Button.scala:55:36
        count = _RANDOM_0[13:10];	// Button.scala:55:36, :56:36
        ps2_clk_sync = _RANDOM_0[16:14];	// Button.scala:55:36, :57:36
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_button_out = sampling & _T_1 & ~(buffer[0]) & io_ps2_data & ^(buffer[9:1]) ? (buffer[8:1] == 8'h1C ?
                8'h1C : buffer[8:1] == 8'h32 ? 8'h32 : buffer[8:1] == 8'h21 ? 8'h21 : buffer[8:1] == 8'h23
                ? 8'h23 : buffer[8:1] == 8'h24 ? 8'h24 : buffer[8:1] == 8'h2B ? 8'h2B : buffer[8:1] ==
                8'h34 ? 8'h34 : buffer[8:1] == 8'h33 ? 8'h33 : buffer[8:1] == 8'h43 ? 8'h43 : buffer[8:1]
                == 8'h3B ? 8'h3B : buffer[8:1] == 8'h42 ? 8'h42 : buffer[8:1] == 8'h4B ? 8'h4B :
                buffer[8:1] == 8'h3A ? 8'h3A : buffer[8:1] == 8'h31 ? 8'h31 : buffer[8:1] == 8'h44 ? 8'h44
                : buffer[8:1] == 8'h4D ? 8'h4D : buffer[8:1] == 8'h15 ? 8'h15 : buffer[8:1] == 8'h2D ?
                8'h2D : buffer[8:1] == 8'h1B ? 8'h1B : buffer[8:1] == 8'h2C ? 8'h2C : buffer[8:1] == 8'h3C
                ? 8'h3C : buffer[8:1] == 8'h2A ? 8'h2A : buffer[8:1] == 8'h1D ? 8'h1D : buffer[8:1] ==
                8'h22 ? 8'h22 : buffer[8:1] == 8'h35 ? 8'h35 : buffer[8:1] == 8'h1A ? 8'h1A : buffer[8:1]
                == 8'hF0 ? 8'hF0 : 8'hFF) : 8'hFF;	// <stdin>:2:10, Button.scala:55:36, :60:49, :62:44, :70:19, :72:30, :73:{20,29}, :75:27, :77:{27,33}, :84:{36,42}, :85:42, :86:42, :87:42, :88:42, :89:42, :90:42, :91:42, :92:42, :93:42, :94:42, :95:42, :96:42, :97:42, :98:42, :99:42, :100:42, :101:42, :102:42, :103:42, :104:42, :105:42, :106:42, :107:42, :108:42, :109:42, :111:42, Mux.scala:101:16
endmodule

module ButtonControl(	// <stdin>:157:10
  input        clock,
               reset,
  input  [7:0] io_validButton,
  output [7:0] io_count,
               io_code,
               io_ASCIIO,
  output       io_blank);

  reg       state;	// ButtonControl.scala:55:24
  reg [7:0] count;	// ButtonControl.scala:57:24
  reg [7:0] code;	// ButtonControl.scala:58:24
  reg [7:0] ASCII;	// ButtonControl.scala:59:24
  reg       blank;	// ButtonControl.scala:61:24
  reg       waiton;	// ButtonControl.scala:63:25
  always @(posedge clock) begin
    if (reset) begin
      state <= 1'h0;	// ButtonControl.scala:55:24
      count <= 8'h0;	// ButtonControl.scala:57:24
      code <= 8'hFF;	// ButtonControl.scala:58:24
      ASCII <= 8'hFF;	// ButtonControl.scala:58:24, :59:24
      blank <= 1'h0;	// ButtonControl.scala:55:24, :61:24
      waiton <= 1'h0;	// ButtonControl.scala:55:24, :63:25
    end
    else begin
      automatic logic _T_3;	// ButtonControl.scala:70:49
      automatic logic _T_7;	// ButtonControl.scala:121:25
      _T_3 = io_validButton != 8'hFF & io_validButton != 8'hF0;	// ButtonControl.scala:58:24, :70:{33,49,67}
      _T_7 = waiton & io_validButton == code;	// ButtonControl.scala:58:24, :63:25, :121:{25,43}
      if (state)	// ButtonControl.scala:55:24
        state <= (~state | ~_T_7) & state;	// ButtonControl.scala:55:24, :66:19, :117:48, :121:{25,52}, :122:24
      else	// ButtonControl.scala:55:24
        state <= _T_3 | state;	// ButtonControl.scala:55:24, :70:{49,82}, :71:23
      if (state | ~_T_3) begin	// ButtonControl.scala:55:24, :57:24, :66:19, :70:{49,82}
      end
      else	// ButtonControl.scala:55:24, :57:24, :66:19, :70:{49,82}
        count <= count + 8'h1;	// ButtonControl.scala:57:24, :75:32
      if (state) begin	// ButtonControl.scala:55:24
        automatic logic _GEN;	// ButtonControl.scala:59:24, :66:19, :121:52
        _GEN = state & _T_7;	// ButtonControl.scala:55:24, :59:24, :66:19, :121:{25,52}
        if (_GEN) begin	// ButtonControl.scala:59:24, :66:19, :121:52
          code <= 8'hFF;	// ButtonControl.scala:58:24
          ASCII <= 8'hFF;	// ButtonControl.scala:58:24, :59:24
        end
        blank <= _GEN | blank;	// ButtonControl.scala:59:24, :61:24, :66:19, :121:52
        waiton <= ~_T_7 & (io_validButton == 8'hF0 | waiton);	// ButtonControl.scala:63:25, :70:67, :117:{33,48}, :118:24, :121:{25,52}, :122:24
      end
      else begin	// ButtonControl.scala:55:24
        if (_T_3) begin	// ButtonControl.scala:70:49
          code <= io_validButton;	// ButtonControl.scala:58:24
          if (io_validButton == 8'h1C)	// ButtonControl.scala:83:45
            ASCII <= 8'h61;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h32)	// ButtonControl.scala:83:45, :84:45
            ASCII <= 8'h62;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h21)	// ButtonControl.scala:83:45, :84:45, :85:45
            ASCII <= 8'h63;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h23)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45
            ASCII <= 8'h64;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h24)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45
            ASCII <= 8'h65;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h2B)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45
            ASCII <= 8'h66;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h34)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45
            ASCII <= 8'h67;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h33)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45
            ASCII <= 8'h68;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h43)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45
            ASCII <= 8'h69;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h3B)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45
            ASCII <= 8'h6A;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h42)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45
            ASCII <= 8'h6B;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h4B)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45, :94:45
            ASCII <= 8'h6C;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h3A)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45, :94:45, :95:45
            ASCII <= 8'h6D;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h31)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45, :94:45, :95:45, :96:45
            ASCII <= 8'h6E;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h44)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45, :94:45, :95:45, :96:45, :97:45
            ASCII <= 8'h6F;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h4D)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45, :94:45, :95:45, :96:45, :97:45, :98:45
            ASCII <= 8'h70;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h15)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45, :94:45, :95:45, :96:45, :97:45, :98:45, :99:45
            ASCII <= 8'h71;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h2D)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45, :94:45, :95:45, :96:45, :97:45, :98:45, :99:45, :100:45
            ASCII <= 8'h72;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h1B)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45, :94:45, :95:45, :96:45, :97:45, :98:45, :99:45, :100:45, :101:45
            ASCII <= 8'h73;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h2C)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45, :94:45, :95:45, :96:45, :97:45, :98:45, :99:45, :100:45, :101:45, :102:45
            ASCII <= 8'h74;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h3C)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45, :94:45, :95:45, :96:45, :97:45, :98:45, :99:45, :100:45, :101:45, :102:45, :103:45
            ASCII <= 8'h75;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h2A)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45, :94:45, :95:45, :96:45, :97:45, :98:45, :99:45, :100:45, :101:45, :102:45, :103:45, :104:45
            ASCII <= 8'h76;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h1D)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45, :94:45, :95:45, :96:45, :97:45, :98:45, :99:45, :100:45, :101:45, :102:45, :103:45, :104:45, :105:45
            ASCII <= 8'h77;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h22)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45, :94:45, :95:45, :96:45, :97:45, :98:45, :99:45, :100:45, :101:45, :102:45, :103:45, :104:45, :105:45, :106:45
            ASCII <= 8'h78;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h35)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45, :94:45, :95:45, :96:45, :97:45, :98:45, :99:45, :100:45, :101:45, :102:45, :103:45, :104:45, :105:45, :106:45, :107:45
            ASCII <= 8'h79;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else if (io_validButton == 8'h1A)	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45, :94:45, :95:45, :96:45, :97:45, :98:45, :99:45, :100:45, :101:45, :102:45, :103:45, :104:45, :105:45, :106:45, :107:45, :108:45
            ASCII <= 8'h7A;	// ButtonControl.scala:59:24, Mux.scala:101:16
          else	// ButtonControl.scala:83:45, :84:45, :85:45, :86:45, :87:45, :88:45, :89:45, :90:45, :91:45, :92:45, :93:45, :94:45, :95:45, :96:45, :97:45, :98:45, :99:45, :100:45, :101:45, :102:45, :103:45, :104:45, :105:45, :106:45, :107:45, :108:45
            ASCII <= 8'hFF;	// ButtonControl.scala:58:24, :59:24
        end
        blank <= ~_T_3 & blank;	// ButtonControl.scala:57:24, :61:24, :66:19, :70:{49,82}, :77:23
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:157:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:157:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:157:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:157:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:157:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:157:10
        `INIT_RANDOM_PROLOG_	// <stdin>:157:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:157:10
        _RANDOM_0 = `RANDOM;	// <stdin>:157:10
        state = _RANDOM_0[0];	// ButtonControl.scala:55:24
        count = _RANDOM_0[8:1];	// ButtonControl.scala:55:24, :57:24
        code = _RANDOM_0[16:9];	// ButtonControl.scala:55:24, :58:24
        ASCII = _RANDOM_0[24:17];	// ButtonControl.scala:55:24, :59:24
        blank = _RANDOM_0[25];	// ButtonControl.scala:55:24, :61:24
        waiton = _RANDOM_0[26];	// ButtonControl.scala:55:24, :63:25
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:157:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:157:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_count = count;	// <stdin>:157:10, ButtonControl.scala:57:24
  assign io_code = code;	// <stdin>:157:10, ButtonControl.scala:58:24
  assign io_ASCIIO = ASCII;	// <stdin>:157:10, ButtonControl.scala:59:24
  assign io_blank = blank;	// <stdin>:157:10, ButtonControl.scala:61:24
endmodule

module Seg(	// <stdin>:258:10
  input        io_blank,
  input  [3:0] io_dataIn_0,
               io_dataIn_1,
               io_dataIn_2,
               io_dataIn_3,
               io_dataIn_4,
               io_dataIn_5,
  output [6:0] io_encodeOut_0,
               io_encodeOut_1,
               io_encodeOut_2,
               io_encodeOut_3,
               io_encodeOut_4,
               io_encodeOut_5);

  wire [15:0][6:0] _GEN = {{7'h38}, {7'h30}, {7'h42}, {7'h31}, {7'h60}, {7'h8}, {7'h4}, {7'h0}, {7'hF}, {7'h20},
                {7'h24}, {7'h4C}, {7'h6}, {7'h12}, {7'h4F}, {7'h1}};	// Mux.scala:81:{58,61}
  assign io_encodeOut_0 = io_blank ? 7'h7F : _GEN[io_dataIn_0];	// <stdin>:258:10, Mux.scala:81:{58,61}, Seg.scala:37:30, :38:25, :40:25
  assign io_encodeOut_1 = io_blank ? 7'h7F : _GEN[io_dataIn_1];	// <stdin>:258:10, Mux.scala:81:{58,61}, Seg.scala:38:25, :42:30, :43:25, :45:25
  assign io_encodeOut_2 = io_blank ? 7'h7F : _GEN[io_dataIn_2];	// <stdin>:258:10, Mux.scala:81:{58,61}, Seg.scala:38:25, :47:30, :48:25, :50:25
  assign io_encodeOut_3 = io_blank ? 7'h7F : _GEN[io_dataIn_3];	// <stdin>:258:10, Mux.scala:81:{58,61}, Seg.scala:38:25, :52:30, :53:25, :55:25
  assign io_encodeOut_4 = _GEN[io_dataIn_4];	// <stdin>:258:10, Mux.scala:81:{58,61}
  assign io_encodeOut_5 = _GEN[io_dataIn_5];	// <stdin>:258:10, Mux.scala:81:{58,61}
endmodule

module top(	// <stdin>:466:10
  input        clock,
               reset,
               io_ps2_clk,
               io_ps2_data,
  output [6:0] io_seg5,
               io_seg4,
               io_seg3,
               io_seg2,
               io_seg1,
               io_seg0);

  wire [7:0] _ButtonControl_io_count;	// top.scala:24:31
  wire [7:0] _ButtonControl_io_code;	// top.scala:24:31
  wire [7:0] _ButtonControl_io_ASCIIO;	// top.scala:24:31
  wire       _ButtonControl_io_blank;	// top.scala:24:31
  wire [7:0] _Button_io_button_out;	// top.scala:19:24
  Button Button (	// top.scala:19:24
    .clock         (clock),
    .reset         (reset),
    .io_ps2_clk    (io_ps2_clk),
    .io_ps2_data   (io_ps2_data),
    .io_button_out (_Button_io_button_out)
  );
  ButtonControl ButtonControl (	// top.scala:24:31
    .clock          (clock),
    .reset          (reset),
    .io_validButton (_Button_io_button_out),	// top.scala:19:24
    .io_count       (_ButtonControl_io_count),
    .io_code        (_ButtonControl_io_code),
    .io_ASCIIO      (_ButtonControl_io_ASCIIO),
    .io_blank       (_ButtonControl_io_blank)
  );
  Seg Seg (	// top.scala:28:21
    .io_blank       (_ButtonControl_io_blank),	// top.scala:24:31
    .io_dataIn_0    (_ButtonControl_io_code[3:0]),	// top.scala:24:31, :30:46
    .io_dataIn_1    (_ButtonControl_io_code[7:4]),	// top.scala:24:31, :31:46
    .io_dataIn_2    (_ButtonControl_io_ASCIIO[3:0]),	// top.scala:24:31, :32:48
    .io_dataIn_3    (_ButtonControl_io_ASCIIO[7:4]),	// top.scala:24:31, :33:48
    .io_dataIn_4    (_ButtonControl_io_count[3:0]),	// top.scala:24:31, :34:47
    .io_dataIn_5    (_ButtonControl_io_count[7:4]),	// top.scala:24:31, :35:47
    .io_encodeOut_0 (io_seg0),
    .io_encodeOut_1 (io_seg1),
    .io_encodeOut_2 (io_seg2),
    .io_encodeOut_3 (io_seg3),
    .io_encodeOut_4 (io_seg4),
    .io_encodeOut_5 (io_seg5)
  );
endmodule

