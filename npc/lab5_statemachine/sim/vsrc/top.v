// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_REG_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_REG_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

module LFSR(	// <stdin>:2:10
  input        clock,
               reset,
  output [7:0] io_Dout);

  reg [7:0]  LFSR_Reg;	// LFSR.scala:12:27
  reg [22:0] count;	// LFSR.scala:16:26
  always @(posedge clock) begin
    if (reset) begin
      LFSR_Reg <= 8'h1;	// LFSR.scala:12:27
      count <= 23'h0;	// LFSR.scala:16:26
    end
    else if (count == 23'h4C4B40) begin	// LFSR.scala:16:26, :18:16
      LFSR_Reg <= {LFSR_Reg[4] ^ LFSR_Reg[3] ^ LFSR_Reg[2] ^ LFSR_Reg[0], LFSR_Reg[7:1]};	// Cat.scala:33:92, LFSR.scala:12:27, :14:{28,42,56,60,70}, :19:40
      count <= 23'h0;	// LFSR.scala:16:26
    end
    else	// LFSR.scala:16:26, :18:16
      count <= count + 23'h1;	// LFSR.scala:16:26, :22:24
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2:10
        LFSR_Reg = _RANDOM_0[7:0];	// LFSR.scala:12:27
        count = _RANDOM_0[30:8];	// LFSR.scala:12:27, :16:26
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_Dout = LFSR_Reg;	// <stdin>:2:10, LFSR.scala:12:27
endmodule

module Seg(	// <stdin>:30:10
  input  [3:0] io_dataIn_0,
               io_dataIn_1,
  output [6:0] io_encodeOut_0,
               io_encodeOut_1);

  assign io_encodeOut_0 = io_dataIn_0 == 4'h9 ? 7'h4 : io_dataIn_0 == 4'h8 ? 7'h0 : io_dataIn_0 == 4'h7 ? 7'hF :
                io_dataIn_0 == 4'h6 ? 7'h20 : io_dataIn_0 == 4'h5 ? 7'h24 : io_dataIn_0 == 4'h4 ? 7'h4C :
                io_dataIn_0 == 4'h3 ? 7'h6 : io_dataIn_0 == 4'h2 ? 7'h12 : io_dataIn_0 == 4'h1 ? 7'h4F :
                7'h1;	// <stdin>:30:10, Mux.scala:81:{58,61}
  assign io_encodeOut_1 = io_dataIn_1 == 4'h9 ? 7'h4 : io_dataIn_1 == 4'h8 ? 7'h0 : io_dataIn_1 == 4'h7 ? 7'hF :
                io_dataIn_1 == 4'h6 ? 7'h20 : io_dataIn_1 == 4'h5 ? 7'h24 : io_dataIn_1 == 4'h4 ? 7'h4C :
                io_dataIn_1 == 4'h3 ? 7'h6 : io_dataIn_1 == 4'h2 ? 7'h12 : io_dataIn_1 == 4'h1 ? 7'h4F :
                7'h1;	// <stdin>:30:10, Mux.scala:81:{58,61}
endmodule

module top(	// <stdin>:78:10
  input        clock,
               reset,
  output [6:0] io_Segout1,
               io_Segout0);

  wire [7:0] _LFSR_io_Dout;	// top.scala:11:22
  LFSR LFSR (	// top.scala:11:22
    .clock   (clock),
    .reset   (reset),
    .io_Dout (_LFSR_io_Dout)
  );
  Seg Seg (	// top.scala:13:21
    .io_dataIn_0    (_LFSR_io_Dout[3:0]),	// top.scala:11:22, :15:37
    .io_dataIn_1    (_LFSR_io_Dout[7:4]),	// top.scala:11:22, :14:37
    .io_encodeOut_0 (io_Segout0),
    .io_encodeOut_1 (io_Segout1)
  );
endmodule

